{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport useRefresh from '../useRefresh';\nimport useTombFinance from './../useTombFinance';\n\nconst useClaimRewardCheck = () => {\n  const {\n    slowRefresh\n  } = useRefresh();\n  const [canClaimReward, setCanClaimReward] = useState(false);\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance === null || tombFinance === void 0 ? void 0 : tombFinance.isUnlocked;\n  useEffect(() => {\n    async function canUserClaimReward() {\n      try {\n        setCanClaimReward(await tombFinance.canUserClaimRewardFromMasonry());\n      } catch (err) {\n        console.error(err);\n      }\n\n      ;\n    }\n\n    if (isUnlocked) {\n      canUserClaimReward();\n    }\n  }, [isUnlocked, slowRefresh, tombFinance]);\n  return canClaimReward;\n};\n\nexport default useClaimRewardCheck;","map":{"version":3,"sources":["C:/Users/ali_9/Desktop/StrawBerry_UI/src/hooks/masonry/useClaimRewardCheck.ts"],"names":["useEffect","useState","useRefresh","useTombFinance","useClaimRewardCheck","slowRefresh","canClaimReward","setCanClaimReward","tombFinance","isUnlocked","canUserClaimReward","canUserClaimRewardFromMasonry","err","console","error"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAChC,QAAO;AAAEC,IAAAA;AAAF,MAAkBH,UAAU,EAAnC;AACA,QAAM,CAACI,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,KAAD,CAApD;AACA,QAAMO,WAAW,GAAGL,cAAc,EAAlC;AACA,QAAMM,UAAU,GAAGD,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEC,UAAhC;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeU,kBAAf,GAAoC;AAClC,UAAI;AACFH,QAAAA,iBAAiB,CAAC,MAAMC,WAAW,CAACG,6BAAZ,EAAP,CAAjB;AACD,OAFD,CAEE,OAAMC,GAAN,EAAU;AACVC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;;AAAA;AACF;;AACD,QAAIH,UAAJ,EAAgB;AACdC,MAAAA,kBAAkB;AACnB;AACF,GAXQ,EAWN,CAACD,UAAD,EAAaJ,WAAb,EAA0BG,WAA1B,CAXM,CAAT;AAaA,SAAOF,cAAP;AACD,CApBD;;AAsBA,eAAeF,mBAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport useRefresh from '../useRefresh';\nimport useTombFinance from './../useTombFinance';\n\nconst useClaimRewardCheck = () => {\n  const  { slowRefresh } = useRefresh();\n  const [canClaimReward, setCanClaimReward] = useState(false);\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  useEffect(() => {\n    async function canUserClaimReward() {\n      try {\n        setCanClaimReward(await tombFinance.canUserClaimRewardFromMasonry());\n      } catch(err){\n        console.error(err);\n      };\n    }\n    if (isUnlocked) {\n      canUserClaimReward();\n    }\n  }, [isUnlocked, slowRefresh, tombFinance]);\n\n  return canClaimReward;\n};\n\nexport default useClaimRewardCheck;\n"]},"metadata":{},"sourceType":"module"}