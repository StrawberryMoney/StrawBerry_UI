{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport useTombFinance from './useTombFinance';\nimport config from '../config';\n\nconst useTokenBalance = token => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance === null || tombFinance === void 0 ? void 0 : tombFinance.isUnlocked;\n  const fetchBalance = useCallback(async () => {\n    setBalance(await token.balanceOf(tombFinance.myAccount));\n  }, [token, tombFinance.myAccount]);\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch(err => console.error(`Failed to fetch token balance: ${err.stack}`));\n      let refreshInterval = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [isUnlocked, token, fetchBalance, tombFinance]);\n  return balance;\n};\n\nexport default useTokenBalance;","map":{"version":3,"sources":["C:/Users/ali_9/Desktop/StrawBerry_UI/src/hooks/useTokenBalance.ts"],"names":["useCallback","useEffect","useState","BigNumber","useTombFinance","config","useTokenBalance","token","balance","setBalance","from","tombFinance","isUnlocked","fetchBalance","balanceOf","myAccount","catch","err","console","error","stack","refreshInterval","setInterval","clearInterval"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,SAAT,QAA0B,QAA1B;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAkB;AACxC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAACC,SAAS,CAACO,IAAV,CAAe,CAAf,CAAD,CAAtC;AACA,QAAMC,WAAW,GAAGP,cAAc,EAAlC;AACA,QAAMQ,UAAU,GAAGD,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEC,UAAhC;AAEA,QAAMC,YAAY,GAAGb,WAAW,CAAC,YAAY;AAC3CS,IAAAA,UAAU,CAAC,MAAMF,KAAK,CAACO,SAAN,CAAgBH,WAAW,CAACI,SAA5B,CAAP,CAAV;AACD,GAF+B,EAE7B,CAACR,KAAD,EAAQI,WAAW,CAACI,SAApB,CAF6B,CAAhC;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,UAAJ,EAAgB;AACdC,MAAAA,YAAY,GAAGG,KAAf,CAAsBC,GAAD,IAASC,OAAO,CAACC,KAAR,CAAe,kCAAiCF,GAAG,CAACG,KAAM,EAA1D,CAA9B;AACA,UAAIC,eAAe,GAAGC,WAAW,CAACT,YAAD,EAAeR,MAAM,CAACgB,eAAtB,CAAjC;AACA,aAAO,MAAME,aAAa,CAACF,eAAD,CAA1B;AACD;AACF,GANQ,EAMN,CAACT,UAAD,EAAaL,KAAb,EAAoBM,YAApB,EAAkCF,WAAlC,CANM,CAAT;AAQA,SAAOH,OAAP;AACD,CAlBD;;AAoBA,eAAeF,eAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport ERC20 from '../tomb-finance/ERC20';\nimport useTombFinance from './useTombFinance';\nimport config from '../config';\n\nconst useTokenBalance = (token: ERC20) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    setBalance(await token.balanceOf(tombFinance.myAccount));\n  }, [token, tombFinance.myAccount]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(`Failed to fetch token balance: ${err.stack}`));\n      let refreshInterval = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [isUnlocked, token, fetchBalance, tombFinance]);\n\n  return balance;\n};\n\nexport default useTokenBalance;\n"]},"metadata":{},"sourceType":"module"}