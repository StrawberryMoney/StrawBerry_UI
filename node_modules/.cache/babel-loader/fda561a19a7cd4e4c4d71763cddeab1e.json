{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport useTombFinance from './useTombFinance';\nimport config from '../config';\n\nconst useStakedBalance = (poolName, poolId) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance === null || tombFinance === void 0 ? void 0 : tombFinance.isUnlocked;\n  const fetchBalance = useCallback(async () => {\n    const balance = await tombFinance.stakedBalanceOnBank(poolName, poolId, tombFinance.myAccount);\n    setBalance(balance);\n  }, [poolName, poolId, tombFinance]);\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch(err => console.error(err.stack));\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [isUnlocked, poolName, setBalance, tombFinance, fetchBalance]);\n  return balance;\n};\n\nexport default useStakedBalance;","map":{"version":3,"sources":["C:/Users/ali_9/Desktop/StrawBerry_UI/src/hooks/useStakedBalance.ts"],"names":["useCallback","useEffect","useState","BigNumber","useTombFinance","config","useStakedBalance","poolName","poolId","balance","setBalance","from","tombFinance","isUnlocked","fetchBalance","stakedBalanceOnBank","myAccount","catch","err","console","error","stack","refreshBalance","setInterval","refreshInterval","clearInterval"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,QAAD,EAAyBC,MAAzB,KAA4C;AACnE,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAACC,SAAS,CAACQ,IAAV,CAAe,CAAf,CAAD,CAAtC;AACA,QAAMC,WAAW,GAAGR,cAAc,EAAlC;AACA,QAAMS,UAAU,GAAGD,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEC,UAAhC;AAEA,QAAMC,YAAY,GAAGd,WAAW,CAAC,YAAY;AAC3C,UAAMS,OAAO,GAAG,MAAMG,WAAW,CAACG,mBAAZ,CAAgCR,QAAhC,EAA0CC,MAA1C,EAAkDI,WAAW,CAACI,SAA9D,CAAtB;AACAN,IAAAA,UAAU,CAACD,OAAD,CAAV;AACD,GAH+B,EAG7B,CAACF,QAAD,EAAWC,MAAX,EAAmBI,WAAnB,CAH6B,CAAhC;AAKAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,UAAJ,EAAgB;AACdC,MAAAA,YAAY,GAAGG,KAAf,CAAsBC,GAAD,IAASC,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,KAAlB,CAA9B;AAEA,YAAMC,cAAc,GAAGC,WAAW,CAACT,YAAD,EAAeT,MAAM,CAACmB,eAAtB,CAAlC;AACA,aAAO,MAAMC,aAAa,CAACH,cAAD,CAA1B;AACD;AACF,GAPQ,EAON,CAACT,UAAD,EAAaN,QAAb,EAAuBG,UAAvB,EAAmCE,WAAnC,EAAgDE,YAAhD,CAPM,CAAT;AASA,SAAOL,OAAP;AACD,CApBD;;AAsBA,eAAeH,gBAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\n\nimport { BigNumber } from 'ethers';\nimport useTombFinance from './useTombFinance';\nimport { ContractName } from '../tomb-finance';\nimport config from '../config';\n\nconst useStakedBalance = (poolName: ContractName, poolId: Number) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await tombFinance.stakedBalanceOnBank(poolName, poolId, tombFinance.myAccount);\n    setBalance(balance);\n  }, [poolName, poolId, tombFinance]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(err.stack));\n\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [isUnlocked, poolName, setBalance, tombFinance, fetchBalance]);\n\n  return balance;\n};\n\nexport default useStakedBalance;\n"]},"metadata":{},"sourceType":"module"}