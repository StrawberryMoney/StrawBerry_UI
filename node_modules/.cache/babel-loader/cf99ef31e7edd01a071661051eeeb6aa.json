{"ast":null,"code":"import { useCallback, useState, useEffect } from 'react';\nimport useTombFinance from './useTombFinance';\nimport config from '../config';\n\nconst useStatsForPool = bank => {\n  const tombFinance = useTombFinance();\n  const [poolAPRs, setPoolAPRs] = useState();\n  const fetchAPRsForPool = useCallback(async () => {\n    setPoolAPRs(await tombFinance.getPoolAPRs(bank));\n  }, [tombFinance, bank]);\n  useEffect(() => {\n    fetchAPRsForPool().catch(err => console.error(`Failed to fetch BBOND price: ${err.stack}`));\n    const refreshInterval = setInterval(fetchAPRsForPool, config.refreshInterval);\n    return () => clearInterval(refreshInterval);\n  }, [setPoolAPRs, tombFinance, fetchAPRsForPool]);\n  return poolAPRs;\n};\n\nexport default useStatsForPool;","map":{"version":3,"sources":["C:/Users/ali_9/Desktop/StrawBerry_UI/src/hooks/useStatsForPool.ts"],"names":["useCallback","useState","useEffect","useTombFinance","config","useStatsForPool","bank","tombFinance","poolAPRs","setPoolAPRs","fetchAPRsForPool","getPoolAPRs","catch","err","console","error","stack","refreshInterval","setInterval","clearInterval"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,SAAhC,QAAiD,OAAjD;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAGA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,MAAMC,eAAe,GAAIC,IAAD,IAAgB;AACtC,QAAMC,WAAW,GAAGJ,cAAc,EAAlC;AAEA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,EAAxC;AAEA,QAAMS,gBAAgB,GAAGV,WAAW,CAAC,YAAY;AAC/CS,IAAAA,WAAW,CAAC,MAAMF,WAAW,CAACI,WAAZ,CAAwBL,IAAxB,CAAP,CAAX;AACD,GAFmC,EAEjC,CAACC,WAAD,EAAcD,IAAd,CAFiC,CAApC;AAIAJ,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,gBAAgB,GAAGE,KAAnB,CAA0BC,GAAD,IAASC,OAAO,CAACC,KAAR,CAAe,gCAA+BF,GAAG,CAACG,KAAM,EAAxD,CAAlC;AACA,UAAMC,eAAe,GAAGC,WAAW,CAACR,gBAAD,EAAmBN,MAAM,CAACa,eAA1B,CAAnC;AACA,WAAO,MAAME,aAAa,CAACF,eAAD,CAA1B;AACD,GAJQ,EAIN,CAACR,WAAD,EAAcF,WAAd,EAA2BG,gBAA3B,CAJM,CAAT;AAMA,SAAOF,QAAP;AACD,CAhBD;;AAkBA,eAAeH,eAAf","sourcesContent":["import { useCallback, useState, useEffect } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport { PoolStats } from '../tomb-finance/types';\nimport config from '../config';\n\nconst useStatsForPool = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n\n  const [poolAPRs, setPoolAPRs] = useState<PoolStats>();\n\n  const fetchAPRsForPool = useCallback(async () => {\n    setPoolAPRs(await tombFinance.getPoolAPRs(bank));\n  }, [tombFinance, bank]);\n\n  useEffect(() => {\n    fetchAPRsForPool().catch((err) => console.error(`Failed to fetch BBOND price: ${err.stack}`));\n    const refreshInterval = setInterval(fetchAPRsForPool, config.refreshInterval);\n    return () => clearInterval(refreshInterval);\n  }, [setPoolAPRs, tombFinance, fetchAPRsForPool]);\n\n  return poolAPRs;\n};\n\nexport default useStatsForPool;\n"]},"metadata":{},"sourceType":"module"}