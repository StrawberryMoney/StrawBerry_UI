{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport config from '../config';\n\nconst useStakedTokenPriceInDollars = (stakedTokenName, stakedToken) => {\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance === null || tombFinance === void 0 ? void 0 : tombFinance.isUnlocked;\n  const fetchBalance = useCallback(async () => {\n    const balance = await tombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\n    setStakedTokenPriceInDollars(balance);\n  }, [stakedToken, stakedTokenName, tombFinance]);\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch(err => console.error(err.stack));\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\n    }\n  }, [isUnlocked, setStakedTokenPriceInDollars, tombFinance, fetchBalance]);\n  return stakedTokenPriceInDollars;\n};\n\nexport default useStakedTokenPriceInDollars;","map":{"version":3,"sources":["C:/Users/ali_9/Desktop/StrawBerry_UI/src/hooks/useStakedTokenPriceInDollars.ts"],"names":["useCallback","useEffect","useState","useTombFinance","config","useStakedTokenPriceInDollars","stakedTokenName","stakedToken","stakedTokenPriceInDollars","setStakedTokenPriceInDollars","tombFinance","isUnlocked","fetchBalance","balance","getDepositTokenPriceInDollars","catch","err","console","error","stack","refreshStakedTokenPriceInDollars","setInterval","refreshInterval","clearInterval"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAGA,MAAMC,4BAA4B,GAAG,CAACC,eAAD,EAA0BC,WAA1B,KAAiD;AACpF,QAAM,CAACC,yBAAD,EAA4BC,4BAA5B,IAA4DP,QAAQ,CAAC,GAAD,CAA1E;AACA,QAAMQ,WAAW,GAAGP,cAAc,EAAlC;AACA,QAAMQ,UAAU,GAAGD,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEC,UAAhC;AAEA,QAAMC,YAAY,GAAGZ,WAAW,CAAC,YAAY;AAC3C,UAAMa,OAAO,GAAG,MAAMH,WAAW,CAACI,6BAAZ,CAA0CR,eAA1C,EAA2DC,WAA3D,CAAtB;AACAE,IAAAA,4BAA4B,CAACI,OAAD,CAA5B;AACD,GAH+B,EAG7B,CAACN,WAAD,EAAcD,eAAd,EAA+BI,WAA/B,CAH6B,CAAhC;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,UAAJ,EAAgB;AACdC,MAAAA,YAAY,GAAGG,KAAf,CAAsBC,GAAD,IAASC,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,KAAlB,CAA9B;AAEA,YAAMC,gCAAgC,GAAGC,WAAW,CAACT,YAAD,EAAeR,MAAM,CAACkB,eAAtB,CAApD;AACA,aAAO,MAAMC,aAAa,CAACH,gCAAD,CAA1B;AACD;AACF,GAPQ,EAON,CAACT,UAAD,EAAaF,4BAAb,EAA2CC,WAA3C,EAAwDE,YAAxD,CAPM,CAAT;AASA,SAAOJ,yBAAP;AACD,CApBD;;AAsBA,eAAeH,4BAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\n\nimport useTombFinance from './useTombFinance';\nimport config from '../config';\nimport ERC20 from '../tomb-finance/ERC20';\n\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await tombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\n    setStakedTokenPriceInDollars(balance);\n  }, [stakedToken, stakedTokenName, tombFinance]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(err.stack));\n\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\n    }\n  }, [isUnlocked, setStakedTokenPriceInDollars, tombFinance, fetchBalance]);\n\n  return stakedTokenPriceInDollars;\n};\n\nexport default useStakedTokenPriceInDollars;\n"]},"metadata":{},"sourceType":"module"}