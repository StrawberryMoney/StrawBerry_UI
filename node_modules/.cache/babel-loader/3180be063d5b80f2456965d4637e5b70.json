{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ali_9\\\\Desktop\\\\StrawBerry_UI\\\\src\\\\contexts\\\\TombFinanceProvider\\\\TombFinanceProvider.tsx\";\nimport React, { createContext, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport TombFinance from '../../tomb-finance';\nimport config from '../../config';\nexport const Context = createContext({\n  tombFinance: null\n});\nexport const TombFinanceProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const {\n    ethereum,\n    account\n  } = useWallet();\n  const [tombFinance, setTombFinance] = useState();\n  useEffect(() => {\n    if (!tombFinance) {\n      const tomb = new TombFinance(config);\n\n      if (account) {\n        // wallet was unlocked at initialization\n        tomb.unlockWallet(ethereum, account);\n      }\n\n      setTombFinance(tomb);\n    } else if (account) {\n      tombFinance.unlockWallet(ethereum, account);\n    }\n  }, [account, ethereum, tombFinance]);\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      tombFinance\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }\n  }, children);\n};","map":{"version":3,"sources":["C:/Users/ali_9/Desktop/StrawBerry_UI/src/contexts/TombFinanceProvider/TombFinanceProvider.tsx"],"names":["React","createContext","useEffect","useState","useWallet","TombFinance","config","Context","tombFinance","TombFinanceProvider","children","ethereum","account","setTombFinance","tomb","unlockWallet"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAMA,OAAO,MAAMC,OAAO,GAAGN,aAAa,CAAqB;AAAEO,EAAAA,WAAW,EAAE;AAAf,CAArB,CAA7B;AAEP,OAAO,MAAMC,mBAA6B,GAAG,QAAkB;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC7D,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAwBR,SAAS,EAAvC;AACA,QAAM,CAACI,WAAD,EAAcK,cAAd,IAAgCV,QAAQ,EAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACM,WAAL,EAAkB;AAChB,YAAMM,IAAI,GAAG,IAAIT,WAAJ,CAAgBC,MAAhB,CAAb;;AACA,UAAIM,OAAJ,EAAa;AACX;AACAE,QAAAA,IAAI,CAACC,YAAL,CAAkBJ,QAAlB,EAA4BC,OAA5B;AACD;;AACDC,MAAAA,cAAc,CAACC,IAAD,CAAd;AACD,KAPD,MAOO,IAAIF,OAAJ,EAAa;AAClBJ,MAAAA,WAAW,CAACO,YAAZ,CAAyBJ,QAAzB,EAAmCC,OAAnC;AACD;AACF,GAXQ,EAWN,CAACA,OAAD,EAAUD,QAAV,EAAoBH,WAApB,CAXM,CAAT;AAaA,sBAAO,oBAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AAAEA,MAAAA;AAAF,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2CE,QAA3C,CAAP;AACD,CAlBM","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport TombFinance from '../../tomb-finance';\nimport config from '../../config';\n\nexport interface TombFinanceContext {\n  tombFinance?: TombFinance;\n}\n\nexport const Context = createContext<TombFinanceContext>({ tombFinance: null });\n\nexport const TombFinanceProvider: React.FC = ({ children }) => {\n  const { ethereum, account } = useWallet();\n  const [tombFinance, setTombFinance] = useState<TombFinance>();\n\n  useEffect(() => {\n    if (!tombFinance) {\n      const tomb = new TombFinance(config);\n      if (account) {\n        // wallet was unlocked at initialization\n        tomb.unlockWallet(ethereum, account);\n      }\n      setTombFinance(tomb);\n    } else if (account) {\n      tombFinance.unlockWallet(ethereum, account);\n    }\n  }, [account, ethereum, tombFinance]);\n\n  return <Context.Provider value={{ tombFinance }}>{children}</Context.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}