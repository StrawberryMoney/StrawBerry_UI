{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport useTombFinance from './useTombFinance';\nimport config from '../config';\n\nconst useEarnings = (poolName, earnTokenName, poolId) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance === null || tombFinance === void 0 ? void 0 : tombFinance.isUnlocked;\n  const fetchBalance = useCallback(async () => {\n    const balance = await tombFinance.earnedFromBank(poolName, earnTokenName, poolId, tombFinance.myAccount);\n    setBalance(balance);\n  }, [poolName, earnTokenName, poolId, tombFinance]);\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch(err => console.error(err.stack));\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [isUnlocked, poolName, tombFinance, fetchBalance]);\n  return balance;\n};\n\nexport default useEarnings;","map":{"version":3,"sources":["C:/Users/ali_9/Desktop/StrawBerry_UI/src/hooks/useEarnings.ts"],"names":["useCallback","useEffect","useState","BigNumber","useTombFinance","config","useEarnings","poolName","earnTokenName","poolId","balance","setBalance","from","tombFinance","isUnlocked","fetchBalance","earnedFromBank","myAccount","catch","err","console","error","stack","refreshBalance","setInterval","refreshInterval","clearInterval"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,MAAMC,WAAW,GAAG,CAACC,QAAD,EAAyBC,aAAzB,EAAgDC,MAAhD,KAAmE;AACrF,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAACC,SAAS,CAACS,IAAV,CAAe,CAAf,CAAD,CAAtC;AACA,QAAMC,WAAW,GAAGT,cAAc,EAAlC;AACA,QAAMU,UAAU,GAAGD,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEC,UAAhC;AAEA,QAAMC,YAAY,GAAGf,WAAW,CAAC,YAAY;AAC3C,UAAMU,OAAO,GAAG,MAAMG,WAAW,CAACG,cAAZ,CAA2BT,QAA3B,EAAqCC,aAArC,EAAoDC,MAApD,EAA4DI,WAAW,CAACI,SAAxE,CAAtB;AACAN,IAAAA,UAAU,CAACD,OAAD,CAAV;AACD,GAH+B,EAG7B,CAACH,QAAD,EAAWC,aAAX,EAA0BC,MAA1B,EAAkCI,WAAlC,CAH6B,CAAhC;AAKAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,UAAJ,EAAgB;AACdC,MAAAA,YAAY,GAAGG,KAAf,CAAsBC,GAAD,IAASC,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,KAAlB,CAA9B;AAEA,YAAMC,cAAc,GAAGC,WAAW,CAACT,YAAD,EAAeV,MAAM,CAACoB,eAAtB,CAAlC;AACA,aAAO,MAAMC,aAAa,CAACH,cAAD,CAA1B;AACD;AACF,GAPQ,EAON,CAACT,UAAD,EAAaP,QAAb,EAAuBM,WAAvB,EAAoCE,YAApC,CAPM,CAAT;AASA,SAAOL,OAAP;AACD,CApBD;;AAsBA,eAAeJ,WAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport useTombFinance from './useTombFinance';\nimport { ContractName } from '../tomb-finance';\nimport config from '../config';\n\nconst useEarnings = (poolName: ContractName, earnTokenName: String, poolId: Number) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await tombFinance.earnedFromBank(poolName, earnTokenName, poolId, tombFinance.myAccount);\n    setBalance(balance);\n  }, [poolName, earnTokenName, poolId, tombFinance]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(err.stack));\n\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [isUnlocked, poolName, tombFinance, fetchBalance]);\n\n  return balance;\n};\n\nexport default useEarnings;\n"]},"metadata":{},"sourceType":"module"}