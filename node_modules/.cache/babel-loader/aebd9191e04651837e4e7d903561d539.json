{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useWallet } from 'use-wallet';\nimport useDebounce from '../../hooks/useDebounce';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport { updateBlockNumber } from './actions';\nimport { getDefaultProvider } from '../../utils/provider';\nexport default function Updater() {\n  const {\n    ethereum,\n    chainId\n  } = useWallet();\n  const dispatch = useDispatch();\n  const windowVisible = useIsWindowVisible();\n  const [state, setState] = useState({\n    chainId,\n    blockNumber: null\n  });\n  const blockNumberCallback = useCallback(blockNumber => {\n    setState(state => {\n      if (chainId === state.chainId) {\n        if (typeof state.blockNumber !== 'number') return {\n          chainId,\n          blockNumber\n        };\n        return {\n          chainId,\n          blockNumber: Math.max(blockNumber, state.blockNumber)\n        };\n      }\n\n      return state;\n    });\n  }, [chainId, setState]); // attach/detach listeners\n  // @ts-ignore\n\n  useEffect(() => {\n    if (!ethereum || !chainId || !windowVisible) return undefined;\n    setState({\n      chainId,\n      blockNumber: null\n    });\n    const provider = getDefaultProvider();\n    provider.getBlockNumber().then(blockNumberCallback).catch(error => console.error(`Failed to get block number for chainId: ${chainId}`, error));\n    provider.on('block', blockNumberCallback);\n    return () => provider.removeListener('block', blockNumberCallback);\n  }, [dispatch, chainId, ethereum, blockNumberCallback, windowVisible]);\n  const debouncedState = useDebounce(state, 100);\n  useEffect(() => {\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\n    dispatch(updateBlockNumber({\n      chainId: debouncedState.chainId,\n      blockNumber: debouncedState.blockNumber\n    }));\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\n  return null;\n}","map":{"version":3,"sources":["C:/Users/ali_9/Desktop/StrawBerry_UI/src/state/application/updater.ts"],"names":["useCallback","useEffect","useState","useDispatch","useWallet","useDebounce","useIsWindowVisible","updateBlockNumber","getDefaultProvider","Updater","ethereum","chainId","dispatch","windowVisible","state","setState","blockNumber","blockNumberCallback","Math","max","undefined","provider","getBlockNumber","then","catch","error","console","on","removeListener","debouncedState"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AACA,SAASC,iBAAT,QAAkC,WAAlC;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AAEA,eAAe,SAASC,OAAT,GAAyB;AACtC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAwBP,SAAS,EAAvC;AAEA,QAAMQ,QAAQ,GAAGT,WAAW,EAA5B;AAEA,QAAMU,aAAa,GAAGP,kBAAkB,EAAxC;AAEA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAG/B;AACDS,IAAAA,OADC;AAEDK,IAAAA,WAAW,EAAE;AAFZ,GAH+B,CAAlC;AAQA,QAAMC,mBAAmB,GAAGjB,WAAW,CACpCgB,WAAD,IAAyB;AACvBD,IAAAA,QAAQ,CAAED,KAAD,IAAW;AAClB,UAAIH,OAAO,KAAKG,KAAK,CAACH,OAAtB,EAA+B;AAC7B,YAAI,OAAOG,KAAK,CAACE,WAAb,KAA6B,QAAjC,EAA2C,OAAO;AAAEL,UAAAA,OAAF;AAAWK,UAAAA;AAAX,SAAP;AAC3C,eAAO;AAAEL,UAAAA,OAAF;AAAWK,UAAAA,WAAW,EAAEE,IAAI,CAACC,GAAL,CAASH,WAAT,EAAsBF,KAAK,CAACE,WAA5B;AAAxB,SAAP;AACD;;AACD,aAAOF,KAAP;AACD,KANO,CAAR;AAOD,GAToC,EAUrC,CAACH,OAAD,EAAUI,QAAV,CAVqC,CAAvC,CAfsC,CA4BtC;AACA;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACS,QAAD,IAAa,CAACC,OAAd,IAAyB,CAACE,aAA9B,EAA6C,OAAOO,SAAP;AAC7CL,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,OAAF;AAAWK,MAAAA,WAAW,EAAE;AAAxB,KAAD,CAAR;AAEA,UAAMK,QAAQ,GAAGb,kBAAkB,EAAnC;AACAa,IAAAA,QAAQ,CACLC,cADH,GAEGC,IAFH,CAEQN,mBAFR,EAGGO,KAHH,CAGUC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAe,2CAA0Cd,OAAQ,EAAjE,EAAoEc,KAApE,CAHpB;AAKAJ,IAAAA,QAAQ,CAACM,EAAT,CAAY,OAAZ,EAAqBV,mBAArB;AACA,WAAO,MAAMI,QAAQ,CAACO,cAAT,CAAwB,OAAxB,EAAiCX,mBAAjC,CAAb;AACD,GAZQ,EAYN,CAACL,QAAD,EAAWD,OAAX,EAAoBD,QAApB,EAA8BO,mBAA9B,EAAmDJ,aAAnD,CAZM,CAAT;AAcA,QAAMgB,cAAc,GAAGxB,WAAW,CAACS,KAAD,EAAQ,GAAR,CAAlC;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC4B,cAAc,CAAClB,OAAhB,IAA2B,CAACkB,cAAc,CAACb,WAA3C,IAA0D,CAACH,aAA/D,EAA8E;AAC9ED,IAAAA,QAAQ,CACNL,iBAAiB,CAAC;AAChBI,MAAAA,OAAO,EAAEkB,cAAc,CAAClB,OADR;AAEhBK,MAAAA,WAAW,EAAEa,cAAc,CAACb;AAFZ,KAAD,CADX,CAAR;AAMD,GARQ,EAQN,CAACH,aAAD,EAAgBD,QAAhB,EAA0BiB,cAAc,CAACb,WAAzC,EAAsDa,cAAc,CAAClB,OAArE,CARM,CAAT;AAUA,SAAO,IAAP;AACD","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useWallet } from 'use-wallet';\nimport useDebounce from '../../hooks/useDebounce';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport { updateBlockNumber } from './actions';\nimport { getDefaultProvider } from '../../utils/provider';\n\nexport default function Updater(): null {\n  const { ethereum, chainId } = useWallet();\n\n  const dispatch = useDispatch();\n\n  const windowVisible = useIsWindowVisible();\n\n  const [state, setState] = useState<{\n    chainId: number | undefined;\n    blockNumber: number | null;\n  }>({\n    chainId,\n    blockNumber: null,\n  });\n\n  const blockNumberCallback = useCallback(\n    (blockNumber: number) => {\n      setState((state) => {\n        if (chainId === state.chainId) {\n          if (typeof state.blockNumber !== 'number') return { chainId, blockNumber };\n          return { chainId, blockNumber: Math.max(blockNumber, state.blockNumber) };\n        }\n        return state;\n      });\n    },\n    [chainId, setState],\n  );\n\n  // attach/detach listeners\n  // @ts-ignore\n  useEffect(() => {\n    if (!ethereum || !chainId || !windowVisible) return undefined;\n    setState({ chainId, blockNumber: null });\n\n    const provider = getDefaultProvider();\n    provider\n      .getBlockNumber()\n      .then(blockNumberCallback)\n      .catch((error) => console.error(`Failed to get block number for chainId: ${chainId}`, error));\n\n    provider.on('block', blockNumberCallback);\n    return () => provider.removeListener('block', blockNumberCallback);\n  }, [dispatch, chainId, ethereum, blockNumberCallback, windowVisible]);\n\n  const debouncedState = useDebounce(state, 100);\n\n  useEffect(() => {\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\n    dispatch(\n      updateBlockNumber({\n        chainId: debouncedState.chainId,\n        blockNumber: debouncedState.blockNumber,\n      }),\n    );\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}