{"ast":null,"code":"import { Fetcher, Route, Token } from '@traderjoe-xyz/sdk';\nimport { BigNumber, Contract, ethers } from 'ethers';\nimport { decimalToBalance } from './ether-utils';\nimport ERC20 from './ERC20';\nimport { getFullDisplayBalance, getDisplayBalance } from '../utils/formatBalance';\nimport { getDefaultProvider } from '../utils/provider';\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\nimport config, { bankDefinitions } from '../config';\nimport moment from 'moment';\nimport { parseUnits } from 'ethers/lib/utils';\nimport { AVAX_TICKER, TRADERJOE_ROUTER_ADDR, TOMB_TICKER } from '../utils/constants';\n/**\n * An API module of Strawberry DAO contracts.\n * All contract-interacting domain logic should be defined in here.\n */\n\nexport class TombFinance {\n  constructor(cfg) {\n    this.myAccount = void 0;\n    this.provider = void 0;\n    this.signer = void 0;\n    this.config = void 0;\n    this.contracts = void 0;\n    this.externalTokens = void 0;\n    this.masonryVersionOfUser = void 0;\n    this.TOMBWAVAX_LP = void 0;\n    this.TOMB = void 0;\n    this.TSHARE = void 0;\n    this.TBOND = void 0;\n    this.AVAX = void 0;\n    this.TOMBWAVX = void 0;\n    this.TSHAREWAVX = void 0;\n    const {\n      deployments,\n      externalTokens\n    } = cfg;\n    const provider = getDefaultProvider(); // loads contracts from deployments\n\n    this.contracts = {};\n\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\n    }\n\n    this.externalTokens = {};\n\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\n    }\n\n    this.TOMB = new ERC20(deployments.tomb.address, provider, 'BERRY');\n    this.TSHARE = new ERC20(deployments.tShare.address, provider, 'BSHARE');\n    this.TBOND = new ERC20(deployments.tBond.address, provider, 'BBOND');\n    this.TOMBWAVX = new ERC20('0xFae3957daAE1dA061489FB0e4DD403324593C1dA', provider, 'BERRY-A-LP');\n    console.log('tombavax', this.TBOND);\n    this.TSHAREWAVX = new ERC20('0x01eE7717bC86F0415232F9BCb199970e6Ce49688', provider, 'BSHARE-A-LP');\n    this.AVAX = this.externalTokens['WAVAX']; // Uniswap V2 Pair\n\n    this.TOMBWAVAX_LP = new Contract(externalTokens['BERRY-AVAX-LP'][0], IUniswapV2PairABI, provider);\n    this.config = cfg;\n    this.provider = provider;\n  }\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n\n\n  unlockWallet(provider, account) {\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n\n    const tokens = [this.TOMB, this.TSHARE, this.TBOND, ...Object.values(this.externalTokens)];\n\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n\n    this.TOMBWAVAX_LP = this.TOMBWAVAX_LP.connect(this.signer);\n    console.log(`ðŸ”“ Wallet is unlocked. Welcome, ${account}!`);\n    this.fetchMasonryVersionOfUser().then(version => this.masonryVersionOfUser = version).catch(err => {\n      console.error(`Failed to fetch masonry version: ${err.stack}`);\n      this.masonryVersionOfUser = 'latest';\n    });\n  }\n\n  get isUnlocked() {\n    return !!this.myAccount;\n  } //===================================================================\n  //===================== GET ASSET STATS =============================\n  //===================FROM SPOOKY TO DISPLAY =========================\n  //=========================IN HOME PAGE==============================\n  //===================================================================\n\n\n  async getTombStat() {\n    const {\n      TombAvaxRewardPool\n    } = this.contracts;\n    const supply = await this.TOMB.totalSupply();\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(TombAvaxRewardPool.address);\n    const tombCirculatingSupply = supply.sub(tombRewardPoolSupply);\n    const priceInAVAX = await this.getTokenPriceFromPancakeswap(this.TOMB);\n    const priceOfOneAVAX = await this.getWAVAXPriceFromPancakeswap();\n    const priceOfTombInDollars = (Number(priceInAVAX) * Number(priceOfOneAVAX)).toFixed(2);\n    return {\n      tokenInAvax: priceInAVAX,\n      priceInDollars: priceOfTombInDollars,\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0)\n    };\n  }\n  /**\n   * Calculates various stats for the requested LP\n   * @param name of the LP token to load stats for\n   * @returns\n   */\n\n\n  async getLPStat(name) {\n    const lpToken = this.externalTokens[name];\n    const lpTokenSupplyBN = await lpToken.totalSupply();\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\n    const token0 = name.startsWith('BERRY') ? this.TOMB : this.TSHARE;\n    const isTomb = name.startsWith('BERRY');\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\n    const avaxAmountBN = await this.AVAX.balanceOf(lpToken.address);\n    const avaxAmount = getDisplayBalance(avaxAmountBN, 18);\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\n    const avaxAmountInOneLP = Number(avaxAmount) / Number(lpTokenSupply);\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isTomb);\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\n    return {\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      avaxAmount: avaxAmountInOneLP.toFixed(2).toString(),\n      priceOfOne: lpTokenPriceFixed,\n      totalLiquidity: liquidity,\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString()\n    };\n  }\n  /**\n   * Use this method to get price for Tomb\n   * @returns TokenStat for TBOND\n   * priceInAVAX\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for Market)\n   */\n\n\n  async getBondStat() {\n    const {\n      Treasury\n    } = this.contracts;\n    const tombStat = await this.getTombStat();\n    const bondTombRatioBN = await Treasury.getBondPremiumRate();\n    const modifier = bondTombRatioBN / 1e18 > 1 ? bondTombRatioBN / 1e18 : 1;\n    const bondPriceInAVAX = (Number(tombStat.tokenInAvax) * modifier).toFixed(2);\n    const priceOfTBondInDollars = (Number(tombStat.priceInDollars) * modifier).toFixed(2);\n    const supply = await this.TBOND.displayedTotalSupply();\n    return {\n      tokenInAvax: bondPriceInAVAX,\n      priceInDollars: priceOfTBondInDollars,\n      totalSupply: supply,\n      circulatingSupply: supply\n    };\n  }\n  /**\n   * @returns TokenStat for TSHARE\n   * priceInAVAX\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for Market)\n   */\n\n\n  async getShareStat() {\n    const {\n      TombAvaxLPTShareRewardPool\n    } = this.contracts;\n    const supply = await this.TSHARE.totalSupply();\n    const priceInAVAX = await this.getTokenPriceFromPancakeswap(this.TSHARE);\n    const tombRewardPoolSupply = await this.TSHARE.balanceOf(TombAvaxLPTShareRewardPool.address);\n    const tShareCirculatingSupply = supply.sub(tombRewardPoolSupply);\n    const priceOfOneAVAX = await this.getWAVAXPriceFromPancakeswap();\n    const priceOfSharesInDollars = (Number(priceInAVAX) * Number(priceOfOneAVAX)).toFixed(2);\n    return {\n      tokenInAvax: priceInAVAX,\n      priceInDollars: priceOfSharesInDollars,\n      totalSupply: getDisplayBalance(supply, this.TSHARE.decimal, 0),\n      circulatingSupply: getDisplayBalance(tShareCirculatingSupply, this.TSHARE.decimal, 0)\n    };\n  }\n\n  async getTombStatInEstimatedTWAP() {\n    const {\n      SeigniorageOracle,\n      TombAvaxRewardPool\n    } = this.contracts;\n    const expectedPrice = await SeigniorageOracle.twap(this.TOMB.address, ethers.utils.parseEther('1'));\n    const supply = await this.TOMB.totalSupply();\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(TombAvaxRewardPool.address);\n    const tombCirculatingSupply = supply.sub(tombRewardPoolSupply);\n    return {\n      tokenInAvax: getDisplayBalance(expectedPrice),\n      priceInDollars: getDisplayBalance(expectedPrice),\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0)\n    };\n  }\n\n  async getBerryPriceInLastTWAP() {\n    const {\n      Treasury\n    } = this.contracts;\n    return Treasury.getBerryUpdatedPrice();\n  }\n\n  async getBondsPurchasable() {\n    const {\n      Treasury\n    } = this.contracts;\n    return Treasury.getBurnableBerryLeft();\n  }\n  /**\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\n   * @param bank\n   * @returns\n   */\n\n\n  async getPoolAPRs(bank) {\n    if (this.myAccount === undefined) return;\n    const depositToken = bank.depositToken;\n    const poolContract = this.contracts[bank.contract];\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\n    const stakeInPool = await depositToken.balanceOf(bank.address);\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const stat = bank.earnTokenName === 'BERRY' ? await this.getTombStat() : await this.getShareStat();\n    const tokenPerSecond = await this.getTokenPerSecond(bank.earnTokenName, bank.contract, poolContract, bank.depositTokenName, bank.poolId);\n    const tokenPerHour = tokenPerSecond.mul(60).mul(60);\n    const totalRewardPricePerYear = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n    const totalStakingTokenInPool = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const dailyAPR = totalRewardPricePerDay / totalStakingTokenInPool * 100;\n    const yearlyAPR = totalRewardPricePerYear / totalStakingTokenInPool * 100;\n    return {\n      dailyAPR: dailyAPR.toFixed(2).toString(),\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\n      TVL: TVL.toFixed(2).toString()\n    };\n  }\n  /**\n   * Method to return the amount of tokens the pool yields per second\n   * @param earnTokenName the name of the token that the pool is earning\n   * @param contractName the contract of the pool/bank\n   * @param poolContract the actual contract of the pool\n   * @returns\n   */\n\n\n  async getTokenPerSecond(earnTokenName, contractName, poolContract, depositTokenName, poolId) {\n    if (earnTokenName === 'BERRY') {\n      if (!contractName.endsWith('TombRewardPool')) {\n        const rewardPerSecond = await poolContract.berryPerSecond();\n        const totalAllocPoint = await poolContract.totalAllocPoint();\n        const allocPoint = (await poolContract.poolInfo(poolId)).allocPoint;\n        return rewardPerSecond.mul(allocPoint).div(totalAllocPoint);\n      }\n\n      const poolStartTime = await poolContract.poolStartTime();\n      const startDateTime = new Date(poolStartTime.toNumber() * 1000);\n      const FOUR_DAYS = 4 * 24 * 60 * 60 * 1000;\n\n      if (Date.now() - startDateTime.getTime() > FOUR_DAYS) {\n        return await poolContract.epochBerryPerSecond(1);\n      }\n\n      return await poolContract.epochBerryPerSecond(0);\n    }\n\n    const rewardPerSecond = await poolContract.bSharePerSecond();\n    console.log('poolContract', poolContract.bSharePerSecond());\n\n    if (depositTokenName.startsWith('BERRY-AVAX')) {\n      return rewardPerSecond.mul(30000).div(59500);\n    } else if (depositTokenName.startsWith('BSHARE-AVAX')) {\n      return rewardPerSecond.mul(24000).div(59500);\n    } else {\n      return rewardPerSecond.mul(5500).div(59500);\n    }\n  }\n  /**\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\n   * If the deposited token is an LP it will find the price of its pieces\n   * @param tokenName\n   * @param pool\n   * @param token\n   * @returns\n   */\n\n\n  async getDepositTokenPriceInDollars(tokenName, token) {\n    let tokenPrice;\n    const priceOfOneAvaxInDollars = await this.getWAVAXPriceFromPancakeswap();\n\n    if (tokenName === 'WAVAX') {\n      tokenPrice = priceOfOneAvaxInDollars;\n    } else {\n      if (tokenName === 'BERRY-AVAX-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.TOMB, true);\n      } else if (tokenName === 'BSHARE-AVAX-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.TSHARE, false);\n      } else if (tokenName === \"BERRY-BSHARE-LP\") {\n        tokenPrice = await this.getLPTokenPrice(token, this.TOMB, true);\n      } else if (tokenName === 'SHIBA') {\n        tokenPrice = await this.getTokenPriceFromSpiritswap(token);\n      } else {\n        tokenPrice = await this.getTokenPriceFromPancakeswap(token);\n        tokenPrice = (Number(tokenPrice) * Number(priceOfOneAvaxInDollars)).toString();\n      }\n    }\n\n    return tokenPrice;\n  } //===================================================================\n  //===================== GET ASSET STATS =============================\n  //=========================== END ===================================\n  //===================================================================\n\n\n  async getCurrentEpoch() {\n    const {\n      Treasury\n    } = this.contracts;\n    return Treasury.epoch();\n  }\n\n  async getBondOraclePriceInLastTWAP() {\n    const {\n      Treasury\n    } = this.contracts;\n    return Treasury.getBondPremiumRate();\n  }\n  /**\n   * Buy Market with cash.\n   * @param amount amount of cash to purchase Market with.\n   */\n\n\n  async buyBonds(amount) {\n    const {\n      Treasury\n    } = this.contracts;\n    const treasuryTombPrice = await Treasury.getBerrtPrice();\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryTombPrice);\n  }\n  /**\n   * Redeem Market for cash.\n   * @param amount amount of Market to redeem.\n   */\n\n\n  async redeemBonds(amount) {\n    const {\n      Treasury\n    } = this.contracts;\n    const priceForTomb = await Treasury.getBerryPrice();\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForTomb);\n  } // async getTotalValueLocked(): Promise<Number> {\n  //   let totalValue = 0;\n  //   for (const bankInfo of Object.values(bankDefinitions)) {\n  //     const pool = this.contracts[bankInfo.contract];\n  //     const token = this.externalTokens[bankInfo.depositTokenName];\n  //     const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\n  //     const tokenAmountInPool = await token.balanceOf(pool.address);\n  //     const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\n  //     const poolValue = Number.isNaN(value) ? 0 : value;\n  //     totalValue += poolValue;\n  //   }\n  //   return totalValue;\n  // }\n\n\n  async getTotalValueLocked() {\n    let totalValue = 0;\n\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      const pool = this.contracts[bankInfo.contract];\n      const token = this.externalTokens[bankInfo.depositTokenName];\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\n      const tokenAmountInPool = await token.balanceOf(pool.address);\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\n      const poolValue = Number.isNaN(value) ? 0 : value;\n      totalValue += poolValue;\n    }\n\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(this.currentMasonry().address);\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\n    return totalValue + masonryTVL;\n  }\n  /**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be AVAX in most cases)\n   * @param isTomb sanity check for usage of tomb token or tShare\n   * @returns price of the LP token\n   */\n\n\n  async getLPTokenPrice(lpToken, token, isTomb) {\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal); //Get amount of tokenA\n\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\n    const stat = isTomb === true ? await this.getTombStat() : await this.getShareStat();\n    const priceOfToken = stat.priceInDollars;\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2 //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n    ).toString();\n    return tokenPrice;\n  }\n\n  async earnedFromBank(poolName, earnTokenName, poolId) {\n    let account = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.myAccount;\n    const pool = this.contracts[poolName];\n\n    try {\n      if (earnTokenName === 'BERRY') {\n        // problem is pendingBERRY isnt a function since the abi still says pendingTOMB\n        return await pool.pendingBERRY(poolId, account);\n      } else {\n        return await pool.pendingShare(poolId, account);\n      }\n    } catch (err) {\n      console.error(`Failed to call earned() on pool ${pool.address}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async stakedBalanceOnBank(poolName, poolId) {\n    let account = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.myAccount;\n    const pool = this.contracts[poolName];\n\n    try {\n      let userInfo = await pool.userInfo(poolId, account);\n      return await userInfo.amount;\n    } catch (err) {\n      console.error(`Failed to call balanceOf() on pool ${pool.address}`);\n      return BigNumber.from(0);\n    }\n  }\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n\n\n  async stake(poolName, poolId, amount) {\n    const pool = this.contracts[poolName];\n    return await pool.deposit(poolId, amount);\n  }\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n\n\n  async unstake(poolName, poolId, amount) {\n    const pool = this.contracts[poolName];\n    return await pool.withdraw(poolId, amount);\n  }\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n\n\n  async harvest(poolName, poolId) {\n    const pool = this.contracts[poolName]; //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\n\n    return await pool.withdraw(poolId, 0);\n  }\n  /**\n   * Harvests and withdraws deposited tokens from the pool.\n   */\n\n\n  async exit(poolName, poolId) {\n    let account = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.myAccount;\n    const pool = this.contracts[poolName];\n    let userInfo = await pool.userInfo(poolId, account);\n    return await pool.withdraw(poolId, userInfo.amount);\n  }\n\n  async fetchMasonryVersionOfUser() {\n    return 'latest';\n  }\n\n  currentMasonry() {\n    if (!this.masonryVersionOfUser) {//throw new Error('you must unlock the wallet to continue.');\n    }\n\n    return this.contracts.Masonry;\n  }\n\n  isOldMasonryMember() {\n    return this.masonryVersionOfUser !== 'latest';\n  }\n\n  async getTokenPriceFromPancakeswap(tokenContract) {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const {\n      chainId\n    } = this.config;\n    const {\n      WAVAX\n    } = this.config.externalTokens;\n    const wavax = new Token(chainId, WAVAX[0], WAVAX[1]);\n    const token = new Token(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    console.log('token', token);\n\n    try {\n      const wavaxToToken = await Fetcher.fetchPairData(wavax, token, this.provider);\n      const priceInBUSD = new Route([wavaxToToken], token);\n      return priceInBUSD.midPrice.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromSpiritswap(tokenContract) {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const {\n      chainId\n    } = this.config;\n    const {\n      WAVAX\n    } = this.externalTokens;\n    const wavax = new Token(chainId, WAVAX.address, WAVAX.decimal);\n    const token = new Token(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n\n    try {\n      const wavaxToToken = await Fetcher.fetchPairData(wavax, token, this.provider);\n      const liquidityToken = wavaxToToken.liquidityToken;\n      let avaxBalanceInLP = await WAVAX.balanceOf(liquidityToken.address);\n      let avaxAmount = Number(getFullDisplayBalance(avaxBalanceInLP, WAVAX.decimal));\n      let shibaBalanceInLP = await tokenContract.balanceOf(liquidityToken.address);\n      let shibaAmount = Number(getFullDisplayBalance(shibaBalanceInLP, tokenContract.decimal));\n      const priceOfOneAvaxInDollars = await this.getWAVAXPriceFromPancakeswap();\n      let priceOfShiba = avaxAmount / shibaAmount * Number(priceOfOneAvaxInDollars);\n      return priceOfShiba.toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getWAVAXPriceFromPancakeswap() {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const {\n      WAVAX,\n      FUSDT\n    } = this.externalTokens;\n\n    try {\n      const fusdt_wavax_lp_pair = this.externalTokens['USDT-AVAX-LP'];\n      let avax_amount_BN = await WAVAX.balanceOf(fusdt_wavax_lp_pair.address);\n      let avax_amount = Number(getFullDisplayBalance(avax_amount_BN, WAVAX.decimal));\n      let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_wavax_lp_pair.address);\n      let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\n      return (fusdt_amount / avax_amount).toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of WAVAX: ${err}`);\n    }\n  } //===================================================================\n  //===================================================================\n  //===================== MASONRY METHODS =============================\n  //===================================================================\n  //===================================================================\n\n\n  async getMasonryAPR() {\n    const Masonry = this.currentMasonry();\n    const latestSnapshotIndex = await Masonry.latestSnapshotIndex();\n    const lastHistory = await Masonry.boardroomHistory(latestSnapshotIndex);\n    const lastRewardsReceived = lastHistory[1];\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const TOMBPrice = (await this.getTombStat()).priceInDollars;\n    const epochRewardsPerShare = lastRewardsReceived / 1e18; //Mgod formula\n\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(TOMBPrice) * 4;\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(Masonry.address);\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\n    const realAPR = amountOfRewardsPerDay * 100 / masonryTVL * 365;\n    return realAPR;\n  }\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Masonry\n   * @returns true if user can withdraw reward, false if they can't\n   */\n\n\n  async canUserClaimRewardFromMasonry() {\n    const Masonry = this.currentMasonry();\n    return await Masonry.canClaimReward(this.myAccount);\n  }\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Masonry\n   * @returns true if user can withdraw reward, false if they can't\n   */\n\n\n  async canUserUnstakeFromMasonry() {\n    const Masonry = this.currentMasonry();\n    const canWithdraw = await Masonry.canWithdraw(this.myAccount);\n    const stakedAmount = await this.getStakedSharesOnMasonry();\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.TSHARE.decimal)) === 0;\n    const result = notStaked ? true : canWithdraw;\n    return result;\n  }\n\n  async timeUntilClaimRewardFromMasonry() {\n    // const Masonry = this.currentMasonry();\n    // const mason = await Masonry.members(this.myAccount);\n    return BigNumber.from(0);\n  }\n\n  async getTotalStakedInMasonry() {\n    const Masonry = this.currentMasonry();\n    return await Masonry.totalSupply();\n  }\n\n  async stakeShareToMasonry(amount) {\n    if (this.isOldMasonryMember()) {\n      throw new Error(\"you're using old masonry. please withdraw and deposit the TSHARE again.\");\n    }\n\n    const Masonry = this.currentMasonry();\n    return await Masonry.stake(decimalToBalance(amount));\n  }\n\n  async getStakedSharesOnMasonry() {\n    const Masonry = this.currentMasonry();\n\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.getShareOf(this.myAccount);\n    }\n\n    return await Masonry.balanceOf(this.myAccount);\n  }\n\n  async getEarningsOnMasonry() {\n    const Masonry = this.currentMasonry();\n\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.getCashEarningsOf(this.myAccount);\n    }\n\n    return await Masonry.earned(this.myAccount);\n  }\n\n  async withdrawShareFromMasonry(amount) {\n    const Masonry = this.currentMasonry();\n    return await Masonry.withdraw(decimalToBalance(amount));\n  }\n\n  async harvestCashFromMasonry() {\n    const Masonry = this.currentMasonry();\n\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.claimDividends();\n    }\n\n    return await Masonry.claimReward();\n  }\n\n  async exitFromMasonry() {\n    const Masonry = this.currentMasonry();\n    return await Masonry.exit();\n  }\n\n  async getTreasuryNextAllocationTime() {\n    const {\n      Treasury\n    } = this.contracts;\n    const nextEpochTimestamp = await Treasury.nextEpochPoint();\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\n    const prevAllocation = new Date(Date.now());\n    return {\n      from: prevAllocation,\n      to: nextAllocation\n    };\n  }\n\n  async getGenesisPoolStartAndEndTime() {\n    const {\n      TombAvaxRewardPool\n    } = this.contracts;\n    const startTimestamp = await TombAvaxRewardPool.poolStartTime();\n    const endTimestamp = await TombAvaxRewardPool.poolEndTime();\n    const startAllocation = new Date(startTimestamp.mul(1000).toNumber());\n    const endAllocation = new Date(endTimestamp.mul(1000).toNumber());\n    return {\n      from: startAllocation,\n      to: endAllocation\n    };\n  }\n\n  async getMeteorPoolStartAndEndTime() {\n    const {\n      TombAvaxLPTShareRewardPool\n    } = this.contracts;\n    const startTimestamp = await TombAvaxLPTShareRewardPool.poolStartTime();\n    const endTimestamp = await TombAvaxLPTShareRewardPool.poolEndTime();\n    const startAllocation = new Date(startTimestamp.mul(1000).toNumber());\n    const endAllocation = new Date(endTimestamp.mul(1000).toNumber());\n    return {\n      from: startAllocation,\n      to: endAllocation\n    };\n  }\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to claim\n   * their reward from the masonry\n   * @returns Promise<AllocationTime>\n   */\n\n\n  async getUserClaimRewardTime() {\n    const {\n      Masonry,\n      Treasury\n    } = this.contracts;\n    const nextEpochTimestamp = await Masonry.nextEpochPoint(); //in unix timestamp\n\n    const currentEpoch = await Masonry.epoch();\n    const mason = await Masonry.members(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\n\n    const rewardLockupEpochs = await Masonry.rewardLockupEpochs();\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\n    const fromDate = new Date(Date.now());\n\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\n      return {\n        from: fromDate,\n        to: fromDate\n      };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return {\n        from: fromDate,\n        to: toDate\n      };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\n      const endDate = moment(toDate).add(delta * periodInHours, 'hours').toDate();\n      return {\n        from: fromDate,\n        to: endDate\n      };\n    }\n  }\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to unstake\n   * from the masonry\n   * @returns Promise<AllocationTime>\n   */\n\n\n  async getUserUnstakeTime() {\n    const {\n      Masonry,\n      Treasury\n    } = this.contracts;\n    const nextEpochTimestamp = await Masonry.nextEpochPoint();\n    const currentEpoch = await Masonry.epoch();\n    const mason = await Masonry.members(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const PeriodInHours = period / 60 / 60;\n    const withdrawLockupEpochs = await Masonry.withdrawLockupEpochs();\n    const fromDate = new Date(Date.now());\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\n    const stakedAmount = await this.getStakedSharesOnMasonry();\n\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\n      return {\n        from: fromDate,\n        to: fromDate\n      };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return {\n        from: fromDate,\n        to: toDate\n      };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\n      const endDate = moment(toDate).add(delta * PeriodInHours, 'hours').toDate();\n      return {\n        from: fromDate,\n        to: endDate\n      };\n    }\n  }\n\n  async watchAssetInMetamask(assetName) {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum && ethereum.networkVersion === config.chainId.toString()) {\n      let asset;\n      let assetUrl;\n\n      if (assetName === 'BERRY') {\n        asset = this.TOMB;\n        assetUrl = 'https://raw.githubusercontent.com/CryptoGolden/StrawBerryImage/main/BERRY.png';\n      } else if (assetName === 'BSHARE') {\n        asset = this.TSHARE;\n        assetUrl = 'https://raw.githubusercontent.com/CryptoGolden/StrawBerryImage/main/BSHARE.png';\n      } else if (assetName === 'BBOND') {\n        asset = this.TBOND;\n        assetUrl = 'https://raw.githubusercontent.com/CryptoGolden/StrawBerryImage/main/BBOND.png';\n      } else if (assetName === 'BERRY-WAVAX') {\n        asset = this.TOMBWAVX;\n        assetUrl = 'https://raw.githubusercontent.com/CryptoGolden/StrawBerryImage/main/BERRY-WAVAX.png';\n      } else {\n        asset = this.TSHAREWAVX;\n        assetUrl = 'https://raw.githubusercontent.com/CryptoGolden/StrawBerryImage/main/BSHARE-WAVAX.png';\n      }\n\n      await ethereum.request({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20',\n          options: {\n            address: asset.address,\n            symbol: asset.symbol,\n            decimals: 18,\n            image: assetUrl\n          }\n        }\n      });\n    }\n\n    return true;\n  }\n\n  async provideTombAvaxLP(avaxAmount, tombAmount) {\n    const {\n      TaxOffice\n    } = this.contracts;\n    let overrides = {\n      value: parseUnits(avaxAmount, 18)\n    };\n    return await TaxOffice.addLiquidityETHTaxFree(tombAmount, tombAmount.mul(992).div(1000), parseUnits(avaxAmount, 18).mul(992).div(1000), overrides);\n  }\n\n  async quoteFromSpooky(tokenAmount, tokenName) {\n    const {\n      SpookyRouter\n    } = this.contracts;\n    const {\n      _reserve0,\n      _reserve1\n    } = await this.TOMBWAVAX_LP.getReserves();\n    let quote;\n\n    if (tokenName === 'TOMB') {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve1, _reserve0);\n    } else {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve0, _reserve1);\n    }\n\n    return (quote / 1e18).toString();\n  }\n  /**\n   * @returns an array of the regulation events till the most up to date epoch\n   */\n\n\n  async listenForRegulationsEvents() {\n    const {\n      Treasury\n    } = this.contracts;\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\n    const treasuryMasonryFundedFilter = Treasury.filters.MasonryFunded();\n    const boughtBondsFilter = Treasury.filters.BoughtBonds();\n    const redeemBondsFilter = Treasury.filters.RedeemedBonds();\n    let epochBlocksRanges = [];\n    let masonryFundEvents = await Treasury.queryFilter(treasuryMasonryFundedFilter);\n    var events = [];\n    masonryFundEvents.forEach(function callback(value, index) {\n      events.push({\n        epoch: index + 1\n      });\n      events[index].masonryFund = getDisplayBalance(value.args[1]);\n\n      if (index === 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0\n        });\n      }\n\n      if (index > 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0\n        });\n        epochBlocksRanges[index - 1].endBlock = value.blockNumber;\n      }\n    });\n    epochBlocksRanges.forEach(async (value, index) => {\n      events[index].bondsBought = await this.getBondsWithFilterForPeriod(boughtBondsFilter, value.startBlock, value.endBlock);\n      events[index].bondsRedeemed = await this.getBondsWithFilterForPeriod(redeemBondsFilter, value.startBlock, value.endBlock);\n    });\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\n    DEVFundEvents.forEach(function callback(value, index) {\n      events[index].devFund = getDisplayBalance(value.args[1]);\n    });\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\n    DAOFundEvents.forEach(function callback(value, index) {\n      events[index].daoFund = getDisplayBalance(value.args[1]);\n    });\n    return events;\n  }\n  /**\n   * Helper method\n   * @param filter applied on the query to the treasury events\n   * @param from block number\n   * @param to block number\n   * @returns the amount of Market events emitted based on the filter provided during a specific period\n   */\n\n\n  async getBondsWithFilterForPeriod(filter, from, to) {\n    const {\n      Treasury\n    } = this.contracts;\n    const bondsAmount = await Treasury.queryFilter(filter, from, to);\n    return bondsAmount.length;\n  }\n\n  async estimateZapIn(tokenName, lpName, amount) {\n    const {\n      zapper\n    } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    let estimate;\n\n    if (tokenName === AVAX_TICKER) {\n      estimate = await zapper.estimateZapIn(lpToken.address, TRADERJOE_ROUTER_ADDR, parseUnits(amount, 18));\n    } else {\n      const token = tokenName === TOMB_TICKER ? this.TOMB : this.TSHARE;\n      estimate = await zapper.estimateZapInToken(token.address, lpToken.address, TRADERJOE_ROUTER_ADDR, parseUnits(amount, 18));\n    }\n\n    return [estimate[0] / 1e18, estimate[1] / 1e18];\n  }\n\n  async zapIn(tokenName, lpName, amount) {\n    const {\n      zapper\n    } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n\n    if (tokenName === AVAX_TICKER) {\n      let overrides = {\n        value: parseUnits(amount, 18)\n      };\n      return await zapper.zapIn(lpToken.address, TRADERJOE_ROUTER_ADDR, this.myAccount, overrides);\n    } else {\n      const token = tokenName === TOMB_TICKER ? this.TOMB : this.TSHARE;\n      return await zapper.zapInToken(token.address, parseUnits(amount, 18), lpToken.address, TRADERJOE_ROUTER_ADDR, this.myAccount);\n    }\n  }\n\n  async swapTBondToTShare(tbondAmount) {\n    const {\n      TShareSwapper\n    } = this.contracts;\n    return await TShareSwapper.swapTBondToTShare(tbondAmount);\n  }\n\n  async estimateAmountOfTShare(tbondAmount) {\n    const {\n      TShareSwapper\n    } = this.contracts;\n\n    try {\n      const estimateBN = await TShareSwapper.estimateAmountOfTShare(parseUnits(tbondAmount, 18));\n      return getDisplayBalance(estimateBN, 18, 6);\n    } catch (err) {\n      console.error(`Failed to fetch estimate tshare amount: ${err}`);\n    }\n  }\n\n  async getTShareSwapperStat(address) {\n    const {\n      TShareSwapper\n    } = this.contracts;\n    const tshareBalanceBN = await TShareSwapper.getTShareBalance();\n    const tbondBalanceBN = await TShareSwapper.getTBondBalance(address); // const tombPriceBN = await TShareSwapper.getBerryPrice();\n    // const tsharePriceBN = await TShareSwapper.getTSharePrice();\n\n    const rateTSharePerTombBN = await TShareSwapper.getTShareAmountPerTomb();\n    const tshareBalance = getDisplayBalance(tshareBalanceBN, 18, 5);\n    const tbondBalance = getDisplayBalance(tbondBalanceBN, 18, 5);\n    return {\n      tshareBalance: tshareBalance.toString(),\n      tbondBalance: tbondBalance.toString(),\n      // tombPrice: tombPriceBN.toString(),\n      // tsharePrice: tsharePriceBN.toString(),\n      rateTSharePerTomb: rateTSharePerTombBN.toString()\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ali_9/Desktop/StrawBerry_UI/src/tomb-finance/TombFinance.ts"],"names":["Fetcher","Route","Token","BigNumber","Contract","ethers","decimalToBalance","ERC20","getFullDisplayBalance","getDisplayBalance","getDefaultProvider","IUniswapV2PairABI","config","bankDefinitions","moment","parseUnits","AVAX_TICKER","TRADERJOE_ROUTER_ADDR","TOMB_TICKER","TombFinance","constructor","cfg","myAccount","provider","signer","contracts","externalTokens","masonryVersionOfUser","TOMBWAVAX_LP","TOMB","TSHARE","TBOND","AVAX","TOMBWAVX","TSHAREWAVX","deployments","name","deployment","Object","entries","address","abi","symbol","decimal","tomb","tShare","tBond","console","log","unlockWallet","account","newProvider","providers","Web3Provider","chainId","getSigner","contract","connect","tokens","values","token","fetchMasonryVersionOfUser","then","version","catch","err","error","stack","isUnlocked","getTombStat","TombAvaxRewardPool","supply","totalSupply","tombRewardPoolSupply","balanceOf","tombCirculatingSupply","sub","priceInAVAX","getTokenPriceFromPancakeswap","priceOfOneAVAX","getWAVAXPriceFromPancakeswap","priceOfTombInDollars","Number","toFixed","tokenInAvax","priceInDollars","circulatingSupply","getLPStat","lpToken","lpTokenSupplyBN","lpTokenSupply","token0","startsWith","isTomb","tokenAmountBN","tokenAmount","avaxAmountBN","avaxAmount","tokenAmountInOneLP","avaxAmountInOneLP","lpTokenPrice","getLPTokenPrice","lpTokenPriceFixed","toString","liquidity","priceOfOne","totalLiquidity","getBondStat","Treasury","tombStat","bondTombRatioBN","getBondPremiumRate","modifier","bondPriceInAVAX","priceOfTBondInDollars","displayedTotalSupply","getShareStat","TombAvaxLPTShareRewardPool","tShareCirculatingSupply","priceOfSharesInDollars","getTombStatInEstimatedTWAP","SeigniorageOracle","expectedPrice","twap","utils","parseEther","getBerryPriceInLastTWAP","getBerryUpdatedPrice","getBondsPurchasable","getBurnableBerryLeft","getPoolAPRs","bank","undefined","depositToken","poolContract","depositTokenPrice","getDepositTokenPriceInDollars","depositTokenName","stakeInPool","TVL","stat","earnTokenName","tokenPerSecond","getTokenPerSecond","poolId","tokenPerHour","mul","totalRewardPricePerYear","totalRewardPricePerDay","totalStakingTokenInPool","dailyAPR","yearlyAPR","contractName","endsWith","rewardPerSecond","berryPerSecond","totalAllocPoint","allocPoint","poolInfo","div","poolStartTime","startDateTime","Date","toNumber","FOUR_DAYS","now","getTime","epochBerryPerSecond","bSharePerSecond","tokenName","tokenPrice","priceOfOneAvaxInDollars","getTokenPriceFromSpiritswap","getCurrentEpoch","epoch","getBondOraclePriceInLastTWAP","buyBonds","amount","treasuryTombPrice","getBerrtPrice","redeemBonds","priceForTomb","getBerryPrice","getTotalValueLocked","totalValue","bankInfo","pool","tokenAmountInPool","value","poolValue","isNaN","TSHAREPrice","masonrytShareBalanceOf","currentMasonry","masonryTVL","tokenSupply","priceOfToken","tokenInLP","earnedFromBank","poolName","pendingBERRY","pendingShare","from","stakedBalanceOnBank","userInfo","stake","deposit","unstake","withdraw","harvest","exit","Masonry","isOldMasonryMember","tokenContract","ready","WAVAX","wavax","wavaxToToken","fetchPairData","priceInBUSD","midPrice","liquidityToken","avaxBalanceInLP","shibaBalanceInLP","shibaAmount","priceOfShiba","FUSDT","fusdt_wavax_lp_pair","avax_amount_BN","avax_amount","fusdt_amount_BN","fusdt_amount","getMasonryAPR","latestSnapshotIndex","lastHistory","boardroomHistory","lastRewardsReceived","TOMBPrice","epochRewardsPerShare","amountOfRewardsPerDay","realAPR","canUserClaimRewardFromMasonry","canClaimReward","canUserUnstakeFromMasonry","canWithdraw","stakedAmount","getStakedSharesOnMasonry","notStaked","result","timeUntilClaimRewardFromMasonry","getTotalStakedInMasonry","stakeShareToMasonry","Error","getShareOf","getEarningsOnMasonry","getCashEarningsOf","earned","withdrawShareFromMasonry","harvestCashFromMasonry","claimDividends","claimReward","exitFromMasonry","getTreasuryNextAllocationTime","nextEpochTimestamp","nextEpochPoint","nextAllocation","prevAllocation","to","getGenesisPoolStartAndEndTime","startTimestamp","endTimestamp","poolEndTime","startAllocation","endAllocation","getMeteorPoolStartAndEndTime","getUserClaimRewardTime","currentEpoch","mason","members","startTimeEpoch","epochTimerStart","period","PERIOD","periodInHours","rewardLockupEpochs","targetEpochForClaimUnlock","fromDate","toDate","delta","endDate","add","getUserUnstakeTime","PeriodInHours","withdrawLockupEpochs","watchAssetInMetamask","assetName","ethereum","window","networkVersion","asset","assetUrl","request","method","params","type","options","decimals","image","provideTombAvaxLP","tombAmount","TaxOffice","overrides","addLiquidityETHTaxFree","quoteFromSpooky","SpookyRouter","_reserve0","_reserve1","getReserves","quote","listenForRegulationsEvents","treasuryDaoFundedFilter","filters","DaoFundFunded","treasuryDevFundedFilter","DevFundFunded","treasuryMasonryFundedFilter","MasonryFunded","boughtBondsFilter","BoughtBonds","redeemBondsFilter","RedeemedBonds","epochBlocksRanges","masonryFundEvents","queryFilter","events","forEach","callback","index","push","masonryFund","args","startBlock","blockNumber","boughBonds","redeemedBonds","endBlock","bondsBought","getBondsWithFilterForPeriod","bondsRedeemed","DEVFundEvents","devFund","DAOFundEvents","daoFund","filter","bondsAmount","length","estimateZapIn","lpName","zapper","estimate","estimateZapInToken","zapIn","zapInToken","swapTBondToTShare","tbondAmount","TShareSwapper","estimateAmountOfTShare","estimateBN","getTShareSwapperStat","tshareBalanceBN","getTShareBalance","tbondBalanceBN","getTBondBalance","rateTSharePerTombBN","getTShareAmountPerTomb","tshareBalance","tbondBalance","rateTSharePerTomb"],"mappings":"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","sourcesContent":["import { Fetcher, Route, Token } from '@traderjoe-xyz/sdk';\nimport { Configuration } from './config';\nimport { ContractName, TokenStat, AllocationTime, LPStat, Bank, PoolStats, TShareSwapperStat } from './types';\nimport { BigNumber, Contract, ethers, EventFilter } from 'ethers';\nimport { decimalToBalance } from './ether-utils';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport ERC20 from './ERC20';\nimport { getFullDisplayBalance, getDisplayBalance } from '../utils/formatBalance';\nimport { getDefaultProvider } from '../utils/provider';\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\nimport config, { bankDefinitions } from '../config';\n\nimport moment from 'moment';\nimport { parseUnits } from 'ethers/lib/utils';\nimport { AVAX_TICKER, TRADERJOE_ROUTER_ADDR, TOMB_TICKER } from '../utils/constants';\n/**\n * An API module of Strawberry DAO contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class TombFinance {\n  myAccount: string;\n  provider: ethers.providers.Web3Provider;\n  signer?: ethers.Signer;\n  config: Configuration;\n  contracts: { [name: string]: Contract };\n  externalTokens: { [name: string]: ERC20 };\n  masonryVersionOfUser?: string;\n\n  TOMBWAVAX_LP: Contract;\n  TOMB: ERC20;\n  TSHARE: ERC20;\n  TBOND: ERC20;\n  AVAX: ERC20;\n  TOMBWAVX: ERC20;\n  TSHAREWAVX: ERC20;\n\n  constructor(cfg: Configuration) {\n    const { deployments, externalTokens } = cfg;\n    const provider = getDefaultProvider();\n\n    // loads contracts from deployments\n    this.contracts = {};\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\n    }\n    this.externalTokens = {};\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\n    }\n    this.TOMB = new ERC20(deployments.tomb.address, provider, 'BERRY');\n    this.TSHARE = new ERC20(deployments.tShare.address, provider, 'BSHARE');\n    this.TBOND = new ERC20(deployments.tBond.address, provider, 'BBOND');\n    this.TOMBWAVX = new ERC20('0xFae3957daAE1dA061489FB0e4DD403324593C1dA', provider, 'BERRY-A-LP');\n    console.log('tombavax', this.TBOND)\n    this.TSHAREWAVX = new ERC20('0x01eE7717bC86F0415232F9BCb199970e6Ce49688', provider, 'BSHARE-A-LP');\n    this.AVAX = this.externalTokens['WAVAX'];\n\n    // Uniswap V2 Pair\n    this.TOMBWAVAX_LP = new Contract(externalTokens['BERRY-AVAX-LP'][0], IUniswapV2PairABI, provider);\n\n    this.config = cfg;\n    this.provider = provider;\n  }\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n    const tokens = [this.TOMB, this.TSHARE, this.TBOND, ...Object.values(this.externalTokens)];\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n    this.TOMBWAVAX_LP = this.TOMBWAVAX_LP.connect(this.signer);\n    console.log(`ðŸ”“ Wallet is unlocked. Welcome, ${account}!`);\n    this.fetchMasonryVersionOfUser()\n      .then((version) => (this.masonryVersionOfUser = version))\n      .catch((err) => {\n        console.error(`Failed to fetch masonry version: ${err.stack}`);\n        this.masonryVersionOfUser = 'latest';\n      });\n  }\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //===================FROM SPOOKY TO DISPLAY =========================\n  //=========================IN HOME PAGE==============================\n  //===================================================================\n\n  async getTombStat(): Promise<TokenStat> {\n    const { TombAvaxRewardPool } = this.contracts;\n    const supply = await this.TOMB.totalSupply();\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(TombAvaxRewardPool.address);\n    const tombCirculatingSupply = supply.sub(tombRewardPoolSupply)\n    const priceInAVAX = await this.getTokenPriceFromPancakeswap(this.TOMB);\n    const priceOfOneAVAX = await this.getWAVAXPriceFromPancakeswap();\n    const priceOfTombInDollars = (Number(priceInAVAX) * Number(priceOfOneAVAX)).toFixed(2);\n\n    return {\n      tokenInAvax: priceInAVAX,\n      priceInDollars: priceOfTombInDollars,\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0),\n    };\n  }\n\n  /**\n   * Calculates various stats for the requested LP\n   * @param name of the LP token to load stats for\n   * @returns\n   */\n  async getLPStat(name: string): Promise<LPStat> {\n    const lpToken = this.externalTokens[name];\n    const lpTokenSupplyBN = await lpToken.totalSupply();\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\n    const token0 = name.startsWith('BERRY') ? this.TOMB : this.TSHARE;\n    const isTomb = name.startsWith('BERRY');\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\n\n    const avaxAmountBN = await this.AVAX.balanceOf(lpToken.address);\n    const avaxAmount = getDisplayBalance(avaxAmountBN, 18);\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\n    const avaxAmountInOneLP = Number(avaxAmount) / Number(lpTokenSupply);\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isTomb);\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\n    return {\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      avaxAmount: avaxAmountInOneLP.toFixed(2).toString(),\n      priceOfOne: lpTokenPriceFixed,\n      totalLiquidity: liquidity,\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Use this method to get price for Tomb\n   * @returns TokenStat for TBOND\n   * priceInAVAX\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for Market)\n   */\n  async getBondStat(): Promise<TokenStat> {\n    const { Treasury } = this.contracts;\n    const tombStat = await this.getTombStat();\n    const bondTombRatioBN = await Treasury.getBondPremiumRate();\n    const modifier = bondTombRatioBN / 1e18 > 1 ? bondTombRatioBN / 1e18 : 1;\n    const bondPriceInAVAX = (Number(tombStat.tokenInAvax) * modifier).toFixed(2);\n    const priceOfTBondInDollars = (Number(tombStat.priceInDollars) * modifier).toFixed(2);\n    const supply = await this.TBOND.displayedTotalSupply();\n    return {\n      tokenInAvax: bondPriceInAVAX,\n      priceInDollars: priceOfTBondInDollars,\n      totalSupply: supply,\n      circulatingSupply: supply,\n    };\n  }\n\n  /**\n   * @returns TokenStat for TSHARE\n   * priceInAVAX\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for Market)\n   */\n  async getShareStat(): Promise<TokenStat> {\n    const { TombAvaxLPTShareRewardPool } = this.contracts;\n\n    const supply = await this.TSHARE.totalSupply();\n    const priceInAVAX = await this.getTokenPriceFromPancakeswap(this.TSHARE);\n    const tombRewardPoolSupply = await this.TSHARE.balanceOf(TombAvaxLPTShareRewardPool.address);\n    const tShareCirculatingSupply = supply.sub(tombRewardPoolSupply);\n    const priceOfOneAVAX = await this.getWAVAXPriceFromPancakeswap();\n    const priceOfSharesInDollars = (Number(priceInAVAX) * Number(priceOfOneAVAX)).toFixed(2);\n\n    return {\n      tokenInAvax: priceInAVAX,\n      priceInDollars: priceOfSharesInDollars,\n      totalSupply: getDisplayBalance(supply, this.TSHARE.decimal, 0),\n      circulatingSupply: getDisplayBalance(tShareCirculatingSupply, this.TSHARE.decimal, 0),\n    };\n  }\n\n  async getTombStatInEstimatedTWAP(): Promise<TokenStat> {\n    const { SeigniorageOracle, TombAvaxRewardPool } = this.contracts;\n    const expectedPrice = await SeigniorageOracle.twap(this.TOMB.address, ethers.utils.parseEther('1'));\n\n    const supply = await this.TOMB.totalSupply();\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(TombAvaxRewardPool.address);\n    const tombCirculatingSupply = supply.sub(tombRewardPoolSupply);\n    return {\n      tokenInAvax: getDisplayBalance(expectedPrice),\n      priceInDollars: getDisplayBalance(expectedPrice),\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0),\n    };\n  }\n\n  async getBerryPriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBerryUpdatedPrice();\n  }\n\n  async getBondsPurchasable(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBurnableBerryLeft();\n  }\n\n  /**\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\n   * @param bank\n   * @returns\n   */\n  async getPoolAPRs(bank: Bank): Promise<PoolStats> {\n    if (this.myAccount === undefined) return;\n    const depositToken = bank.depositToken;\n    const poolContract = this.contracts[bank.contract];\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\n    const stakeInPool = await depositToken.balanceOf(bank.address);\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const stat = bank.earnTokenName === 'BERRY' ? await this.getTombStat() : await this.getShareStat();\n    const tokenPerSecond = await this.getTokenPerSecond(\n      bank.earnTokenName,\n      bank.contract,\n      poolContract,\n      bank.depositTokenName,\n      bank.poolId\n    );\n    const tokenPerHour = tokenPerSecond.mul(60).mul(60);\n    const totalRewardPricePerYear =\n      Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n    const totalStakingTokenInPool =\n      Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\n    const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\n    return {\n      dailyAPR: dailyAPR.toFixed(2).toString(),\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\n      TVL: TVL.toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Method to return the amount of tokens the pool yields per second\n   * @param earnTokenName the name of the token that the pool is earning\n   * @param contractName the contract of the pool/bank\n   * @param poolContract the actual contract of the pool\n   * @returns\n   */\n  async getTokenPerSecond(\n    earnTokenName: string,\n    contractName: string,\n    poolContract: Contract,\n    depositTokenName: string,\n    poolId: number\n  ) {\n    if (earnTokenName === 'BERRY') {\n      if (!contractName.endsWith('TombRewardPool')) {\n        const rewardPerSecond = await poolContract.berryPerSecond();\n        const totalAllocPoint = await poolContract.totalAllocPoint();\n        const allocPoint = (await poolContract.poolInfo(poolId)).allocPoint;\n        return rewardPerSecond.mul(allocPoint).div(totalAllocPoint);\n      }\n      const poolStartTime = await poolContract.poolStartTime();\n      const startDateTime = new Date(poolStartTime.toNumber() * 1000);\n      const FOUR_DAYS = 4 * 24 * 60 * 60 * 1000;\n      if (Date.now() - startDateTime.getTime() > FOUR_DAYS) {\n        return await poolContract.epochBerryPerSecond(1);\n      }\n      return await poolContract.epochBerryPerSecond(0);\n    }\n    const rewardPerSecond = await poolContract.bSharePerSecond();\n    console.log('poolContract', poolContract.bSharePerSecond());\n\n\n    if (depositTokenName.startsWith('BERRY-AVAX')) {\n      return rewardPerSecond.mul(30000).div(59500);\n    } else if (depositTokenName.startsWith('BSHARE-AVAX')) {\n      return rewardPerSecond.mul(24000).div(59500);\n    } else {\n      return rewardPerSecond.mul(5500).div(59500)\n    }\n  }\n\n  /**\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\n   * If the deposited token is an LP it will find the price of its pieces\n   * @param tokenName\n   * @param pool\n   * @param token\n   * @returns\n   */\n  async getDepositTokenPriceInDollars(tokenName: string, token: ERC20) {\n    let tokenPrice;\n    const priceOfOneAvaxInDollars = await this.getWAVAXPriceFromPancakeswap();\n    if (tokenName === 'WAVAX') {\n      tokenPrice = priceOfOneAvaxInDollars;\n    } else {\n      if (tokenName === 'BERRY-AVAX-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.TOMB, true);\n      } else if (tokenName === 'BSHARE-AVAX-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.TSHARE, false);\n      } else if (tokenName === \"BERRY-BSHARE-LP\") {\n        tokenPrice = await this.getLPTokenPrice(token, this.TOMB, true);\n      } else if (tokenName === 'SHIBA') {\n        tokenPrice = await this.getTokenPriceFromSpiritswap(token);\n      } else {\n        tokenPrice = await this.getTokenPriceFromPancakeswap(token);\n        tokenPrice = (Number(tokenPrice) * Number(priceOfOneAvaxInDollars)).toString();\n      }\n    }\n    return tokenPrice;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //=========================== END ===================================\n  //===================================================================\n\n  async getCurrentEpoch(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.epoch();\n  }\n\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBondPremiumRate();\n  }\n\n  /**\n   * Buy Market with cash.\n   * @param amount amount of cash to purchase Market with.\n   */\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const treasuryTombPrice = await Treasury.getBerrtPrice();\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryTombPrice);\n  }\n\n  /**\n   * Redeem Market for cash.\n   * @param amount amount of Market to redeem.\n   */\n  async redeemBonds(amount: string): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const priceForTomb = await Treasury.getBerryPrice();\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForTomb);\n  }\n\n  // async getTotalValueLocked(): Promise<Number> {\n    \n  //   let totalValue = 0;\n  //   for (const bankInfo of Object.values(bankDefinitions)) {\n  //     const pool = this.contracts[bankInfo.contract];\n  //     const token = this.externalTokens[bankInfo.depositTokenName];\n  //     const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\n  //     const tokenAmountInPool = await token.balanceOf(pool.address);\n  //     const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\n  //     const poolValue = Number.isNaN(value) ? 0 : value;\n  //     totalValue += poolValue;\n  //   }\n\n  //   return totalValue;\n  // }\n\n  async getTotalValueLocked(): Promise<Number> {\n    let totalValue = 0;\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      const pool = this.contracts[bankInfo.contract];\n      const token = this.externalTokens[bankInfo.depositTokenName];\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\n      const tokenAmountInPool = await token.balanceOf(pool.address);\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\n      const poolValue = Number.isNaN(value) ? 0 : value;\n      totalValue += poolValue;\n    }\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(this.currentMasonry().address);\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\n\n    return totalValue + masonryTVL;\n  }\n\n  /**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be AVAX in most cases)\n   * @param isTomb sanity check for usage of tomb token or tShare\n   * @returns price of the LP token\n   */\n  async getLPTokenPrice(lpToken: ERC20, token: ERC20, isTomb: boolean): Promise<string> {\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\n    //Get amount of tokenA\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\n    const stat = isTomb === true ? await this.getTombStat() : await this.getShareStat();\n    const priceOfToken = stat.priceInDollars;\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n      .toString();\n    return tokenPrice;\n  }\n\n  async earnedFromBank(\n    poolName: ContractName,\n    earnTokenName: String,\n    poolId: Number,\n    account = this.myAccount,\n  ): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      if (earnTokenName === 'BERRY') {\n        // problem is pendingBERRY isnt a function since the abi still says pendingTOMB\n        return await pool.pendingBERRY(poolId, account);\n      } else {\n        return await pool.pendingShare(poolId, account);\n      }\n    } catch (err) {\n      console.error(`Failed to call earned() on pool ${pool.address}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async stakedBalanceOnBank(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      let userInfo = await pool.userInfo(poolId, account);\n      return await userInfo.amount;\n    } catch (err) {\n      console.error(`Failed to call balanceOf() on pool ${pool.address}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async stake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.deposit(poolId, amount);\n  }\n\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async unstake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.withdraw(poolId, amount);\n  }\n\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n  async harvest(poolName: ContractName, poolId: Number): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\n    return await pool.withdraw(poolId, 0);\n  }\n\n  /**\n   * Harvests and withdraws deposited tokens from the pool.\n   */\n  async exit(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    let userInfo = await pool.userInfo(poolId, account);\n    return await pool.withdraw(poolId, userInfo.amount);\n  }\n\n  async fetchMasonryVersionOfUser(): Promise<string> {\n    return 'latest';\n  }\n\n  currentMasonry(): Contract {\n    if (!this.masonryVersionOfUser) {\n      //throw new Error('you must unlock the wallet to continue.');\n    }\n    return this.contracts.Masonry;\n  }\n\n  isOldMasonryMember(): boolean {\n    return this.masonryVersionOfUser !== 'latest';\n  }\n\n  async getTokenPriceFromPancakeswap(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { chainId } = this.config;\n    const { WAVAX } = this.config.externalTokens;\n\n    const wavax = new Token(chainId, WAVAX[0], WAVAX[1]);\n    const token = new Token(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    console.log('token', token);\n    try {\n      const wavaxToToken = await Fetcher.fetchPairData(wavax, token, this.provider);\n      const priceInBUSD = new Route([wavaxToToken], token);\n\n      return priceInBUSD.midPrice.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromSpiritswap(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { chainId } = this.config;\n\n    const { WAVAX } = this.externalTokens;\n\n    const wavax = new Token(chainId, WAVAX.address, WAVAX.decimal);\n    const token = new Token(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wavaxToToken = await Fetcher.fetchPairData(wavax, token, this.provider);\n      const liquidityToken = wavaxToToken.liquidityToken;\n      let avaxBalanceInLP = await WAVAX.balanceOf(liquidityToken.address);\n      let avaxAmount = Number(getFullDisplayBalance(avaxBalanceInLP, WAVAX.decimal));\n      let shibaBalanceInLP = await tokenContract.balanceOf(liquidityToken.address);\n      let shibaAmount = Number(getFullDisplayBalance(shibaBalanceInLP, tokenContract.decimal));\n      const priceOfOneAvaxInDollars = await this.getWAVAXPriceFromPancakeswap();\n      let priceOfShiba = (avaxAmount / shibaAmount) * Number(priceOfOneAvaxInDollars);\n      return priceOfShiba.toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getWAVAXPriceFromPancakeswap(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { WAVAX, FUSDT } = this.externalTokens;\n    try {\n      const fusdt_wavax_lp_pair = this.externalTokens['USDT-AVAX-LP'];\n      let avax_amount_BN = await WAVAX.balanceOf(fusdt_wavax_lp_pair.address);\n      let avax_amount = Number(getFullDisplayBalance(avax_amount_BN, WAVAX.decimal));\n      let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_wavax_lp_pair.address);\n      let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\n      return (fusdt_amount / avax_amount).toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of WAVAX: ${err}`);\n    }\n  }\n\n  //===================================================================\n  //===================================================================\n  //===================== MASONRY METHODS =============================\n  //===================================================================\n  //===================================================================\n\n  async getMasonryAPR() {\n    const Masonry = this.currentMasonry();\n    const latestSnapshotIndex = await Masonry.latestSnapshotIndex();\n    const lastHistory = await Masonry.boardroomHistory(latestSnapshotIndex);\n\n    const lastRewardsReceived = lastHistory[1];\n\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const TOMBPrice = (await this.getTombStat()).priceInDollars;\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\n\n    //Mgod formula\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(TOMBPrice) * 4;\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(Masonry.address);\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\n    const realAPR = ((amountOfRewardsPerDay * 100) / masonryTVL) * 365;\n    return realAPR;\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Masonry\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserClaimRewardFromMasonry(): Promise<boolean> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.canClaimReward(this.myAccount);\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Masonry\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserUnstakeFromMasonry(): Promise<boolean> {\n    const Masonry = this.currentMasonry();\n    const canWithdraw = await Masonry.canWithdraw(this.myAccount);\n    const stakedAmount = await this.getStakedSharesOnMasonry();\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.TSHARE.decimal)) === 0;\n    const result = notStaked ? true : canWithdraw;\n    return result;\n  }\n\n  async timeUntilClaimRewardFromMasonry(): Promise<BigNumber> {\n    // const Masonry = this.currentMasonry();\n    // const mason = await Masonry.members(this.myAccount);\n    return BigNumber.from(0);\n  }\n\n  async getTotalStakedInMasonry(): Promise<BigNumber> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.totalSupply();\n  }\n\n  async stakeShareToMasonry(amount: string): Promise<TransactionResponse> {\n    if (this.isOldMasonryMember()) {\n      throw new Error(\"you're using old masonry. please withdraw and deposit the TSHARE again.\");\n    }\n    const Masonry = this.currentMasonry();\n    return await Masonry.stake(decimalToBalance(amount));\n  }\n\n  async getStakedSharesOnMasonry(): Promise<BigNumber> {\n    const Masonry = this.currentMasonry();\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.getShareOf(this.myAccount);\n    }\n    return await Masonry.balanceOf(this.myAccount);\n  }\n\n  async getEarningsOnMasonry(): Promise<BigNumber> {\n    const Masonry = this.currentMasonry();\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.getCashEarningsOf(this.myAccount);\n    }\n    return await Masonry.earned(this.myAccount);\n  }\n\n  async withdrawShareFromMasonry(amount: string): Promise<TransactionResponse> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.withdraw(decimalToBalance(amount));\n  }\n\n  async harvestCashFromMasonry(): Promise<TransactionResponse> {\n    const Masonry = this.currentMasonry();\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.claimDividends();\n    }\n    return await Masonry.claimReward();\n  }\n\n  async exitFromMasonry(): Promise<TransactionResponse> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.exit();\n  }\n\n  async getTreasuryNextAllocationTime(): Promise<AllocationTime> {\n    const { Treasury } = this.contracts;\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\n    const prevAllocation = new Date(Date.now());\n\n    return { from: prevAllocation, to: nextAllocation };\n  }\n\n  async getGenesisPoolStartAndEndTime(): Promise<AllocationTime> {\n    const { TombAvaxRewardPool } = this.contracts;\n    const startTimestamp: BigNumber = await TombAvaxRewardPool.poolStartTime();\n    const endTimestamp: BigNumber = await TombAvaxRewardPool.poolEndTime();\n    const startAllocation = new Date(startTimestamp.mul(1000).toNumber());\n    const endAllocation = new Date(endTimestamp.mul(1000).toNumber());\n\n    return { from: startAllocation, to: endAllocation };\n  }\n\n  async getMeteorPoolStartAndEndTime(): Promise<AllocationTime> {\n    const { TombAvaxLPTShareRewardPool } = this.contracts;\n    const startTimestamp: BigNumber = await TombAvaxLPTShareRewardPool.poolStartTime();\n    const endTimestamp: BigNumber = await TombAvaxLPTShareRewardPool.poolEndTime();\n    const startAllocation = new Date(startTimestamp.mul(1000).toNumber());\n    const endAllocation = new Date(endTimestamp.mul(1000).toNumber());\n\n    return { from: startAllocation, to: endAllocation };\n  }\n\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to claim\n   * their reward from the masonry\n   * @returns Promise<AllocationTime>\n   */\n  async getUserClaimRewardTime(): Promise<AllocationTime> {\n    const { Masonry, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Masonry.nextEpochPoint(); //in unix timestamp\n    const currentEpoch = await Masonry.epoch();\n    const mason = await Masonry.members(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\n    const rewardLockupEpochs = await Masonry.rewardLockupEpochs();\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\n\n    const fromDate = new Date(Date.now());\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\n      const endDate = moment(toDate)\n        .add(delta * periodInHours, 'hours')\n        .toDate();\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to unstake\n   * from the masonry\n   * @returns Promise<AllocationTime>\n   */\n  async getUserUnstakeTime(): Promise<AllocationTime> {\n    const { Masonry, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Masonry.nextEpochPoint();\n    const currentEpoch = await Masonry.epoch();\n    const mason = await Masonry.members(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const PeriodInHours = period / 60 / 60;\n    const withdrawLockupEpochs = await Masonry.withdrawLockupEpochs();\n    const fromDate = new Date(Date.now());\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\n    const stakedAmount = await this.getStakedSharesOnMasonry();\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\n      const endDate = moment(toDate)\n        .add(delta * PeriodInHours, 'hours')\n        .toDate();\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  async watchAssetInMetamask(assetName: string): Promise<boolean> {\n    const { ethereum } = window as any;\n    if (ethereum && ethereum.networkVersion === config.chainId.toString()) {\n      let asset;\n      let assetUrl;\n      if (assetName === 'BERRY') {\n        asset = this.TOMB;\n        assetUrl = 'https://raw.githubusercontent.com/CryptoGolden/StrawBerryImage/main/BERRY.png';\n      } else if (assetName === 'BSHARE') {\n        asset = this.TSHARE;\n        assetUrl = 'https://raw.githubusercontent.com/CryptoGolden/StrawBerryImage/main/BSHARE.png';\n      } else if (assetName === 'BBOND') {\n        asset = this.TBOND;\n        assetUrl = 'https://raw.githubusercontent.com/CryptoGolden/StrawBerryImage/main/BBOND.png';\n      } else if (assetName === 'BERRY-WAVAX') {\n        asset = this.TOMBWAVX;\n        assetUrl = 'https://raw.githubusercontent.com/CryptoGolden/StrawBerryImage/main/BERRY-WAVAX.png';\n      } else {\n        asset = this.TSHAREWAVX;\n        assetUrl = 'https://raw.githubusercontent.com/CryptoGolden/StrawBerryImage/main/BSHARE-WAVAX.png';\n      }\n      await ethereum.request({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20',\n          options: {\n            address: asset.address,\n            symbol: asset.symbol,\n            decimals: 18,\n            image: assetUrl,\n          },\n        },\n      });\n    }\n    return true;\n  }\n\n  async provideTombAvaxLP(avaxAmount: string, tombAmount: BigNumber): Promise<TransactionResponse> {\n    const { TaxOffice } = this.contracts;\n    let overrides = {\n      value: parseUnits(avaxAmount, 18),\n    };\n    return await TaxOffice.addLiquidityETHTaxFree(tombAmount, tombAmount.mul(992).div(1000), parseUnits(avaxAmount, 18).mul(992).div(1000), overrides);\n  }\n\n  async quoteFromSpooky(tokenAmount: string, tokenName: string): Promise<string> {\n    const { SpookyRouter } = this.contracts;\n    const { _reserve0, _reserve1 } = await this.TOMBWAVAX_LP.getReserves();\n    let quote;\n    if (tokenName === 'TOMB') {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve1, _reserve0);\n    } else {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve0, _reserve1);\n    }\n    return (quote / 1e18).toString();\n  }\n\n  /**\n   * @returns an array of the regulation events till the most up to date epoch\n   */\n  async listenForRegulationsEvents(): Promise<any> {\n    const { Treasury } = this.contracts;\n\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\n    const treasuryMasonryFundedFilter = Treasury.filters.MasonryFunded();\n    const boughtBondsFilter = Treasury.filters.BoughtBonds();\n    const redeemBondsFilter = Treasury.filters.RedeemedBonds();\n\n    let epochBlocksRanges: any[] = [];\n    let masonryFundEvents = await Treasury.queryFilter(treasuryMasonryFundedFilter);\n    var events: any[] = [];\n    masonryFundEvents.forEach(function callback(value, index) {\n      events.push({ epoch: index + 1 });\n      events[index].masonryFund = getDisplayBalance(value.args[1]);\n      if (index === 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n      }\n      if (index > 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n        epochBlocksRanges[index - 1].endBlock = value.blockNumber;\n      }\n    });\n\n    epochBlocksRanges.forEach(async (value, index) => {\n      events[index].bondsBought = await this.getBondsWithFilterForPeriod(\n        boughtBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n      events[index].bondsRedeemed = await this.getBondsWithFilterForPeriod(\n        redeemBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n    });\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\n    DEVFundEvents.forEach(function callback(value, index) {\n      events[index].devFund = getDisplayBalance(value.args[1]);\n    });\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\n    DAOFundEvents.forEach(function callback(value, index) {\n      events[index].daoFund = getDisplayBalance(value.args[1]);\n    });\n    return events;\n  }\n\n  /**\n   * Helper method\n   * @param filter applied on the query to the treasury events\n   * @param from block number\n   * @param to block number\n   * @returns the amount of Market events emitted based on the filter provided during a specific period\n   */\n  async getBondsWithFilterForPeriod(filter: EventFilter, from: number, to: number): Promise<number> {\n    const { Treasury } = this.contracts;\n    const bondsAmount = await Treasury.queryFilter(filter, from, to);\n    return bondsAmount.length;\n  }\n\n  async estimateZapIn(tokenName: string, lpName: string, amount: string): Promise<number[]> {\n    const { zapper } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    let estimate;\n    if (tokenName === AVAX_TICKER) {\n      estimate = await zapper.estimateZapIn(lpToken.address, TRADERJOE_ROUTER_ADDR, parseUnits(amount, 18));\n    } else {\n      const token = tokenName === TOMB_TICKER ? this.TOMB : this.TSHARE;\n      estimate = await zapper.estimateZapInToken(\n        token.address,\n        lpToken.address,\n        TRADERJOE_ROUTER_ADDR,\n        parseUnits(amount, 18),\n      );\n    }\n    return [estimate[0] / 1e18, estimate[1] / 1e18];\n  }\n  async zapIn(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\n    const { zapper } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    if (tokenName === AVAX_TICKER) {\n      let overrides = {\n        value: parseUnits(amount, 18),\n      };\n      return await zapper.zapIn(lpToken.address, TRADERJOE_ROUTER_ADDR, this.myAccount, overrides);\n    } else {\n      const token = tokenName === TOMB_TICKER ? this.TOMB : this.TSHARE;\n      return await zapper.zapInToken(\n        token.address,\n        parseUnits(amount, 18),\n        lpToken.address,\n        TRADERJOE_ROUTER_ADDR,\n        this.myAccount,\n      );\n    }\n  }\n  async swapTBondToTShare(tbondAmount: BigNumber): Promise<TransactionResponse> {\n    const { TShareSwapper } = this.contracts;\n    return await TShareSwapper.swapTBondToTShare(tbondAmount);\n  }\n  async estimateAmountOfTShare(tbondAmount: string): Promise<string> {\n    const { TShareSwapper } = this.contracts;\n    try {\n      const estimateBN = await TShareSwapper.estimateAmountOfTShare(parseUnits(tbondAmount, 18));\n      return getDisplayBalance(estimateBN, 18, 6);\n    } catch (err) {\n      console.error(`Failed to fetch estimate tshare amount: ${err}`);\n    }\n  }\n\n  async getTShareSwapperStat(address: string): Promise<TShareSwapperStat> {\n    const { TShareSwapper } = this.contracts;\n    const tshareBalanceBN = await TShareSwapper.getTShareBalance();\n    const tbondBalanceBN = await TShareSwapper.getTBondBalance(address);\n    // const tombPriceBN = await TShareSwapper.getBerryPrice();\n    // const tsharePriceBN = await TShareSwapper.getTSharePrice();\n    const rateTSharePerTombBN = await TShareSwapper.getTShareAmountPerTomb();\n    const tshareBalance = getDisplayBalance(tshareBalanceBN, 18, 5);\n    const tbondBalance = getDisplayBalance(tbondBalanceBN, 18, 5);\n    return {\n      tshareBalance: tshareBalance.toString(),\n      tbondBalance: tbondBalance.toString(),\n      // tombPrice: tombPriceBN.toString(),\n      // tsharePrice: tsharePriceBN.toString(),\n      rateTSharePerTomb: rateTSharePerTombBN.toString(),\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}