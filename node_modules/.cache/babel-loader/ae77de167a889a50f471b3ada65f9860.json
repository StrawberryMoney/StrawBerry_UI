{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ali_9\\\\Desktop\\\\StrawBerry_UI\\\\src\\\\views\\\\Bank\\\\components\\\\ZapModal.tsx\";\nimport React, { useState, useMemo } from 'react';\nimport { Button, Select, MenuItem, InputLabel, withStyles } from '@material-ui/core'; // import Button from '../../../components/Button'\n\nimport Modal from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\nimport styled from 'styled-components';\nimport { getDisplayBalance } from '../../../utils/formatBalance';\nimport Label from '../../../components/Label';\nimport useLpStats from '../../../hooks/useLpStats';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useTombFinance from '../../../hooks/useTombFinance';\nimport { useWallet } from 'use-wallet';\nimport useApproveZapper, { ApprovalState } from '../../../hooks/useApproveZapper';\nimport { TOMB_TICKER, TSHARE_TICKER, AVAX_TICKER } from '../../../utils/constants';\nimport { Alert } from '@material-ui/lab';\n\nconst ZapModal = _ref => {\n  let {\n    onConfirm,\n    onDismiss,\n    tokenName = '',\n    decimals = 18\n  } = _ref;\n  const tombFinance = useTombFinance();\n  const {\n    balance\n  } = useWallet();\n  const avaxBalance = (Number(balance) / 1e18).toFixed(4).toString();\n  const tombBalance = useTokenBalance(tombFinance.TOMB);\n  const tshareBalance = useTokenBalance(tombFinance.TSHARE);\n  const [val, setVal] = useState('');\n  const [zappingToken, setZappingToken] = useState(AVAX_TICKER);\n  const [zappingTokenBalance, setZappingTokenBalance] = useState(avaxBalance);\n  const [estimate, setEstimate] = useState({\n    token0: '0',\n    token1: '0'\n  }); // token0 will always be AVAX in this case\n\n  const [approveZapperStatus, approveZapper] = useApproveZapper(zappingToken);\n  const tombAvaxLpStats = useLpStats('BERRY-AVAX-LP');\n  const tShareAvaxLpStats = useLpStats('BSHARE-AVAX-LP');\n  const tombLPStats = useMemo(() => tombAvaxLpStats ? tombAvaxLpStats : null, [tombAvaxLpStats]);\n  const tshareLPStats = useMemo(() => tShareAvaxLpStats ? tShareAvaxLpStats : null, [tShareAvaxLpStats]);\n  const avaxAmountPerLP = tokenName.startsWith(TOMB_TICKER) ? tombLPStats === null || tombLPStats === void 0 ? void 0 : tombLPStats.avaxAmount : tshareLPStats === null || tshareLPStats === void 0 ? void 0 : tshareLPStats.avaxAmount;\n  /**\n   * Checks if a value is a valid number or not\n   * @param n is the value to be evaluated for a number\n   * @returns\n   */\n\n  function isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  const handleChangeAsset = event => {\n    const value = event.target.value;\n    setZappingToken(value);\n    setZappingTokenBalance(avaxBalance);\n\n    if (event.target.value === TSHARE_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(tshareBalance, decimals));\n    }\n\n    if (event.target.value === TOMB_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(tombBalance, decimals));\n    }\n  };\n\n  const handleChange = async e => {\n    if (e.currentTarget.value === '' || e.currentTarget.value === 0) {\n      setVal(e.currentTarget.value);\n      setEstimate({\n        token0: '0',\n        token1: '0'\n      });\n    }\n\n    if (!isNumeric(e.currentTarget.value)) return;\n    setVal(e.currentTarget.value);\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(e.currentTarget.value));\n    setEstimate({\n      token0: estimateZap[0].toString(),\n      token1: estimateZap[1].toString()\n    });\n  };\n\n  const handleSelectMax = async () => {\n    setVal(zappingTokenBalance);\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(zappingTokenBalance));\n    setEstimate({\n      token0: estimateZap[0].toString(),\n      token1: estimateZap[1].toString()\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalTitle, {\n    text: `Zap into ${tokenName}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StyledActionSpacer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(InputLabel, {\n    style: {\n      color: '#0a3769'\n    },\n    id: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, \"Select asset to zap with\"), /*#__PURE__*/React.createElement(Select, {\n    onChange: handleChangeAsset,\n    style: {\n      color: '#0a3769'\n    },\n    labelId: \"label\",\n    id: \"select\",\n    value: zappingToken,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StyledMenuItem, {\n    value: AVAX_TICKER,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"AVAX\"), /*#__PURE__*/React.createElement(StyledMenuItem, {\n    value: TSHARE_TICKER,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, \"BSHARE\"), /*#__PURE__*/React.createElement(StyledMenuItem, {\n    value: TOMB_TICKER,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"BERRY\")), /*#__PURE__*/React.createElement(TokenInput, {\n    onSelectMax: handleSelectMax,\n    onChange: handleChange,\n    value: val,\n    max: zappingTokenBalance,\n    symbol: zappingToken,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    text: \"Zap Estimations\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StyledDescriptionText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, ' ', tokenName, \": \", Number(estimate.token0) / Number(avaxAmountPerLP)), /*#__PURE__*/React.createElement(StyledDescriptionText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, ' ', \"(\", Number(estimate.token0), \" \", AVAX_TICKER, \" / \", Number(estimate.token1), ' ', tokenName.startsWith(TOMB_TICKER) ? TOMB_TICKER : TSHARE_TICKER, \")\", ' '), /*#__PURE__*/React.createElement(ModalActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    onClick: () => approveZapperStatus !== ApprovalState.APPROVED ? approveZapper() : onConfirm(zappingToken, tokenName, val),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, approveZapperStatus !== ApprovalState.APPROVED ? 'Approve' : \"Let's go\")), /*#__PURE__*/React.createElement(StyledActionSpacer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Alert, {\n    variant: \"filled\",\n    severity: \"warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, \"Beta feature. Use at your own risk!\"));\n}; // #66d562 !important\n\n\nconst StyledActionSpacer = styled.div`\n  height: ${props => props.theme.spacing[4]}px;\n  width: ${props => props.theme.spacing[4]}px;\n`;\nconst StyledDescriptionText = styled.div`\n  align-items: center;\n  color: ${props => props.theme.color.grey[400]};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 22px;\n  justify-content: flex-start;\n`;\nconst StyledMenuItem = withStyles({\n  root: {\n    backgroundColor: 'white !important',\n    color: '#0a3769',\n    '&:hover': {\n      backgroundColor: 'grey !important',\n      color: '#0a3769'\n    },\n    selected: {\n      backgroundColor: 'black'\n    }\n  }\n})(MenuItem);\nexport default ZapModal;","map":{"version":3,"sources":["C:/Users/ali_9/Desktop/StrawBerry_UI/src/views/Bank/components/ZapModal.tsx"],"names":["React","useState","useMemo","Button","Select","MenuItem","InputLabel","withStyles","Modal","ModalActions","ModalTitle","TokenInput","styled","getDisplayBalance","Label","useLpStats","useTokenBalance","useTombFinance","useWallet","useApproveZapper","ApprovalState","TOMB_TICKER","TSHARE_TICKER","AVAX_TICKER","Alert","ZapModal","onConfirm","onDismiss","tokenName","decimals","tombFinance","balance","avaxBalance","Number","toFixed","toString","tombBalance","TOMB","tshareBalance","TSHARE","val","setVal","zappingToken","setZappingToken","zappingTokenBalance","setZappingTokenBalance","estimate","setEstimate","token0","token1","approveZapperStatus","approveZapper","tombAvaxLpStats","tShareAvaxLpStats","tombLPStats","tshareLPStats","avaxAmountPerLP","startsWith","avaxAmount","isNumeric","n","isNaN","parseFloat","isFinite","handleChangeAsset","event","value","target","handleChange","e","currentTarget","estimateZap","estimateZapIn","String","handleSelectMax","color","APPROVED","StyledActionSpacer","div","props","theme","spacing","StyledDescriptionText","grey","StyledMenuItem","root","backgroundColor","selected"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react';\n\nimport { Button, Select, MenuItem, InputLabel, withStyles } from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, { ModalProps } from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\nimport styled from 'styled-components';\n\nimport { getDisplayBalance } from '../../../utils/formatBalance';\nimport Label from '../../../components/Label';\nimport useLpStats from '../../../hooks/useLpStats';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useTombFinance from '../../../hooks/useTombFinance';\nimport { useWallet } from 'use-wallet';\nimport useApproveZapper, { ApprovalState } from '../../../hooks/useApproveZapper';\nimport { TOMB_TICKER, TSHARE_TICKER, AVAX_TICKER } from '../../../utils/constants';\nimport { Alert } from '@material-ui/lab';\n\ninterface ZapProps extends ModalProps {\n  onConfirm: (zapAsset: string, lpName: string, amount: string) => void;\n  tokenName?: string;\n  decimals?: number;\n}\n\nconst ZapModal: React.FC<ZapProps> = ({ onConfirm, onDismiss, tokenName = '', decimals = 18 }) => {\n  const tombFinance = useTombFinance();\n  const { balance } = useWallet();\n  const avaxBalance = (Number(balance) / 1e18).toFixed(4).toString();\n  const tombBalance = useTokenBalance(tombFinance.TOMB);\n  const tshareBalance = useTokenBalance(tombFinance.TSHARE);\n  const [val, setVal] = useState('');\n  const [zappingToken, setZappingToken] = useState(AVAX_TICKER);\n  const [zappingTokenBalance, setZappingTokenBalance] = useState(avaxBalance);\n  const [estimate, setEstimate] = useState({ token0: '0', token1: '0' }); // token0 will always be AVAX in this case\n  const [approveZapperStatus, approveZapper] = useApproveZapper(zappingToken);\n  const tombAvaxLpStats = useLpStats('BERRY-AVAX-LP');\n  const tShareAvaxLpStats = useLpStats('BSHARE-AVAX-LP');\n  const tombLPStats = useMemo(() => (tombAvaxLpStats ? tombAvaxLpStats : null), [tombAvaxLpStats]);\n  const tshareLPStats = useMemo(() => (tShareAvaxLpStats ? tShareAvaxLpStats : null), [tShareAvaxLpStats]);\n  const avaxAmountPerLP = tokenName.startsWith(TOMB_TICKER) ? tombLPStats?.avaxAmount : tshareLPStats?.avaxAmount;\n\n  /**\n   * Checks if a value is a valid number or not\n   * @param n is the value to be evaluated for a number\n   * @returns\n   */\n  function isNumeric(n: any) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  const handleChangeAsset = (event: any) => {\n    const value = event.target.value;\n    setZappingToken(value);\n    setZappingTokenBalance(avaxBalance);\n    if (event.target.value === TSHARE_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(tshareBalance, decimals));\n    }\n    if (event.target.value === TOMB_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(tombBalance, decimals));\n    }\n  };\n\n  const handleChange = async (e: any) => {\n    if (e.currentTarget.value === '' || e.currentTarget.value === 0) {\n      setVal(e.currentTarget.value);\n      setEstimate({ token0: '0', token1: '0' });\n    }\n    if (!isNumeric(e.currentTarget.value)) return;\n    setVal(e.currentTarget.value);\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(e.currentTarget.value));\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\n  };\n\n  const handleSelectMax = async () => {\n    setVal(zappingTokenBalance);\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(zappingTokenBalance));\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\n  };\n\n  return (\n    <Modal>\n      <ModalTitle text={`Zap into ${tokenName}`} />\n      <StyledActionSpacer />\n      <InputLabel style={{ color: '#0a3769' }} id=\"label\">\n        Select asset to zap with\n      </InputLabel>\n      <Select\n        onChange={handleChangeAsset}\n        style={{ color: '#0a3769' }}\n        labelId=\"label\"\n        id=\"select\"\n        value={zappingToken}\n      >\n        <StyledMenuItem value={AVAX_TICKER}>AVAX</StyledMenuItem>\n        <StyledMenuItem value={TSHARE_TICKER}>BSHARE</StyledMenuItem>\n        {/* Tomb as an input for zapping will be disabled due to issues occuring with the Gatekeeper system */}\n        <StyledMenuItem value={TOMB_TICKER}>BERRY</StyledMenuItem>\n      </Select>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={zappingTokenBalance}\n        symbol={zappingToken}\n      />\n      <Label text=\"Zap Estimations\" />\n      <StyledDescriptionText>\n        {' '}\n        {tokenName}: {Number(estimate.token0) / Number(avaxAmountPerLP)}\n      </StyledDescriptionText>\n      <StyledDescriptionText>\n        {' '}\n        ({Number(estimate.token0)} {AVAX_TICKER} / {Number(estimate.token1)}{' '}\n        {tokenName.startsWith(TOMB_TICKER) ? TOMB_TICKER : TSHARE_TICKER}){' '}\n      </StyledDescriptionText>\n      <ModalActions>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() =>\n            approveZapperStatus !== ApprovalState.APPROVED ? approveZapper() : onConfirm(zappingToken, tokenName, val)\n          }\n        >\n          {approveZapperStatus !== ApprovalState.APPROVED ? 'Approve' : \"Let's go\"}\n        </Button>\n      </ModalActions>\n\n      <StyledActionSpacer />\n      <Alert variant=\"filled\" severity=\"warning\">\n        Beta feature. Use at your own risk!\n      </Alert>\n    </Modal>\n  );\n};\n// #66d562 !important\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledDescriptionText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.color.grey[400]};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 22px;\n  justify-content: flex-start;\n`;\nconst StyledMenuItem = withStyles({\n  root: {\n    backgroundColor: 'white !important',\n    color: '#0a3769',\n    '&:hover': {\n      backgroundColor: 'grey !important',\n      color: '#0a3769',\n    },\n    selected: {\n      backgroundColor: 'black',\n    },\n  },\n})(MenuItem);\n\nexport default ZapModal;\n"]},"metadata":{},"sourceType":"module"}