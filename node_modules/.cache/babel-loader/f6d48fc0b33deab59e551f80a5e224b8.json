{"ast":null,"code":"import JSBI from 'jsbi';\nexport { default as JSBI } from 'jsbi';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport { getAddress, getCreate2Address } from '@ethersproject/address';\nimport _Big from 'big.js';\nimport toFormat from 'toformat';\nimport _Decimal from 'decimal.js-light';\nimport { keccak256, pack } from '@ethersproject/solidity';\nimport { Contract } from '@ethersproject/contracts';\nimport { getNetwork } from '@ethersproject/networks';\nimport { getDefaultProvider } from '@ethersproject/providers';\n\nvar _FACTORY_ADDRESS, _JOE_ADDRESS, _MASTERCHEF_ADDRESS, _MASTERCHEF_V3_ADDRES, _BAR_ADDRESS, _ZAP_ADDRESS, _ROUTER_ADDRESS, _MAKER_ADDRESS, _ROLL_ADDRESS, _BORINGHELPER_ADDRESS, _BORINGHELPER_MCV3_AD, _BORINGTOKENSCANNER_A, _BORINGDASHBOARD_ADDR, _LOCKING_WRAPPER_ADDR, _ROCKET_JOE_TOKEN_ADD, _LAUNCH_EVENT_LENS_AD, _ROCKET_JOE_STAKING_A, _SOLIDITY_TYPE_MAXIMA, _UNITROLLER_ADDRESS, _JOELENS_ADDRESS, _JOELENSVIEW_ADDRESS, _FARMLENS_ADDRESS, _JAVAX_ADDRESS, _MAXIMILLION_ADDRESS;\n\nvar ChainId;\n\n(function (ChainId) {\n  ChainId[ChainId[\"RINKEBY\"] = 4] = \"RINKEBY\";\n  ChainId[ChainId[\"FUJI\"] = 43113] = \"FUJI\";\n  ChainId[ChainId[\"AVALANCHE\"] = 43114] = \"AVALANCHE\";\n})(ChainId || (ChainId = {}));\n\nvar TradeType;\n\n(function (TradeType) {\n  TradeType[TradeType[\"EXACT_INPUT\"] = 0] = \"EXACT_INPUT\";\n  TradeType[TradeType[\"EXACT_OUTPUT\"] = 1] = \"EXACT_OUTPUT\";\n})(TradeType || (TradeType = {}));\n\nvar Rounding;\n\n(function (Rounding) {\n  Rounding[Rounding[\"ROUND_DOWN\"] = 0] = \"ROUND_DOWN\";\n  Rounding[Rounding[\"ROUND_HALF_UP\"] = 1] = \"ROUND_HALF_UP\";\n  Rounding[Rounding[\"ROUND_UP\"] = 2] = \"ROUND_UP\";\n})(Rounding || (Rounding = {}));\n/**\r\n * DEX SDK\r\n */\n\n\nvar FACTORY_ADDRESS = (_FACTORY_ADDRESS = {}, _FACTORY_ADDRESS[ChainId.RINKEBY] = '0x86f83be9770894d8e46301b12E88e14AdC6cdb5F', _FACTORY_ADDRESS[ChainId.FUJI] = '0x7eeccb3028870540EEc3D88C2259506f2d34fEE0', _FACTORY_ADDRESS[ChainId.AVALANCHE] = '0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10', _FACTORY_ADDRESS);\nvar JOE_ADDRESS = (_JOE_ADDRESS = {}, _JOE_ADDRESS[ChainId.RINKEBY] = '0xce347E069B68C53A9ED5e7DA5952529cAF8ACCd4', _JOE_ADDRESS[ChainId.FUJI] = '0xcee9d937E3627E55F08240072D63f32c3a60fF2D', _JOE_ADDRESS[ChainId.AVALANCHE] = '0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd', _JOE_ADDRESS);\nvar MASTERCHEF_ADDRESS = (_MASTERCHEF_ADDRESS = {}, _MASTERCHEF_ADDRESS[ChainId.RINKEBY] = '0x1F51b7697A1919cF301845c93D4843FD620ad7Cc', _MASTERCHEF_ADDRESS[ChainId.FUJI] = '0x2d388F47c3Ae5CC0C7F8ad73296B208cfaCd35ae', _MASTERCHEF_ADDRESS[ChainId.AVALANCHE] = '0xd6a4F121CA35509aF06A0Be99093d08462f53052', _MASTERCHEF_ADDRESS);\nvar MASTERCHEF_V3_ADDRESS = (_MASTERCHEF_V3_ADDRES = {}, _MASTERCHEF_V3_ADDRES[ChainId.RINKEBY] = '0xEedf119022F1Bb5F63676BbE855c82151B7198AF', _MASTERCHEF_V3_ADDRES[ChainId.FUJI] = '0x0000000000000000000000000000000000000000', _MASTERCHEF_V3_ADDRES[ChainId.AVALANCHE] = '0x188bED1968b795d5c9022F6a0bb5931Ac4c18F00', _MASTERCHEF_V3_ADDRES);\nvar BAR_ADDRESS = (_BAR_ADDRESS = {}, _BAR_ADDRESS[ChainId.RINKEBY] = '0x33A86aFC0f728882F48E5105bc98758b3eAe2081', _BAR_ADDRESS[ChainId.FUJI] = '0x171B28d39De22EF001029117F3d241fF78c7DC5C', _BAR_ADDRESS[ChainId.AVALANCHE] = '0x57319d41F71E81F3c65F2a47CA4e001EbAFd4F33', _BAR_ADDRESS);\nvar ZAP_ADDRESS = (_ZAP_ADDRESS = {}, _ZAP_ADDRESS[ChainId.RINKEBY] = '0x70c949152D2AC84FbB809228606db4654773D994', _ZAP_ADDRESS[ChainId.FUJI] = '0x5BBFA5f49EC557eABA9427Ac434F21b69113Fe20', _ZAP_ADDRESS[ChainId.AVALANCHE] = '0x2C7B8e971c704371772eDaf16e0dB381A8D02027', _ZAP_ADDRESS);\nvar ROUTER_ADDRESS = (_ROUTER_ADDRESS = {}, _ROUTER_ADDRESS[ChainId.RINKEBY] = '0x7E2528476b14507f003aE9D123334977F5Ad7B14', _ROUTER_ADDRESS[ChainId.FUJI] = '0x5db0735cf88F85E78ed742215090c465979B5006', _ROUTER_ADDRESS[ChainId.AVALANCHE] = '0x60aE616a2155Ee3d9A68541Ba4544862310933d4', _ROUTER_ADDRESS);\nvar MAKER_ADDRESS = (_MAKER_ADDRESS = {}, _MAKER_ADDRESS[ChainId.RINKEBY] = '0xbEFE1d0756Da706B3F0EbaEa7b4ae10D0AdF2f3F', _MAKER_ADDRESS[ChainId.FUJI] = '0x0529719e33AA2f15c13b12be01D7E876454Caf02', _MAKER_ADDRESS[ChainId.AVALANCHE] = '0x861726BFE27931A4E22a7277bDe6cb8432b65856', _MAKER_ADDRESS);\nvar ROLL_ADDRESS = (_ROLL_ADDRESS = {}, _ROLL_ADDRESS[ChainId.RINKEBY] = '0xD6344FF98d12adD998cBcfaC16A215396e9bCb8c', _ROLL_ADDRESS[ChainId.FUJI] = '0x41d5f5F66e4cEd197Ff273308A1c194E9E249f4F', _ROLL_ADDRESS[ChainId.AVALANCHE] = '0xacFF0fBf56bAeb9Ef677DE19ADED8F7A950BCb58', _ROLL_ADDRESS);\nvar BORINGHELPER_ADDRESS = (_BORINGHELPER_ADDRESS = {}, _BORINGHELPER_ADDRESS[ChainId.RINKEBY] = '0x73B35Bab1aFD869E3738464b3bE97999e80E8458', _BORINGHELPER_ADDRESS[ChainId.FUJI] = '0xD28be693a573a26f50195213613EC893Ad5c4460', _BORINGHELPER_ADDRESS[ChainId.AVALANCHE] = '0x1dd4D86180EEe39ac4fB35ECa67CACF608Ab5741', _BORINGHELPER_ADDRESS);\nvar BORINGHELPER_MCV3_ADDRESS = (_BORINGHELPER_MCV3_AD = {}, _BORINGHELPER_MCV3_AD[ChainId.RINKEBY] = '0x11f89aE6DA4aB5D0C518A41F9424c5241A3D57A3', _BORINGHELPER_MCV3_AD[ChainId.FUJI] = '0x0000000000000000000000000000000000000000', _BORINGHELPER_MCV3_AD[ChainId.AVALANCHE] = '0xce63ECA0C8A2084C1BaEcE7737dB88f10c412c5E', _BORINGHELPER_MCV3_AD);\nvar BORINGTOKENSCANNER_ADDRESS = (_BORINGTOKENSCANNER_A = {}, _BORINGTOKENSCANNER_A[ChainId.RINKEBY] = '0xdd5C40b5f0f5Df9c8BF0aA4703d73867ea7f022D', _BORINGTOKENSCANNER_A[ChainId.FUJI] = '0xD28be693a573a26f50195213613EC893Ad5c4460', _BORINGTOKENSCANNER_A[ChainId.AVALANCHE] = '0x5cFcA5b2149A20A166508B28e5FCFA65c44c6B9c', _BORINGTOKENSCANNER_A);\nvar BORINGDASHBOARD_ADDRESS = (_BORINGDASHBOARD_ADDR = {}, _BORINGDASHBOARD_ADDR[ChainId.RINKEBY] = '0xeC208ef9F8aEDbbF28722286E334a3939acEA646', _BORINGDASHBOARD_ADDR[ChainId.FUJI] = '0xD28be693a573a26f50195213613EC893Ad5c4460', _BORINGDASHBOARD_ADDR[ChainId.AVALANCHE] = '0x1Af353148F2316487b5311Fcd522c037842D232c', _BORINGDASHBOARD_ADDR);\nvar LOCKING_WRAPPER_ADDRESS = (_LOCKING_WRAPPER_ADDR = {}, _LOCKING_WRAPPER_ADDR[ChainId.RINKEBY] = '0x60CB8E40B815fa7FF24Ab8a0603BF0afAcb49Cc0', _LOCKING_WRAPPER_ADDR[ChainId.FUJI] = '0x0000000000000000000000000000000000000000', _LOCKING_WRAPPER_ADDR[ChainId.AVALANCHE] = '0xDc3B37B5F0Fe5d3f8b8701a3F8d81A02EE8A1E1a', _LOCKING_WRAPPER_ADDR);\nvar ROCKET_JOE_TOKEN_ADDRESS = (_ROCKET_JOE_TOKEN_ADD = {}, _ROCKET_JOE_TOKEN_ADD[ChainId.RINKEBY] = '0x3Be901d05584dc7900461a1b538ce24F7989cD65', _ROCKET_JOE_TOKEN_ADD[ChainId.FUJI] = '0x0000000000000000000000000000000000000000', _ROCKET_JOE_TOKEN_ADD[ChainId.AVALANCHE] = '0x5483ce08659fABF0277f9314868Cc4f78687BD08', _ROCKET_JOE_TOKEN_ADD);\nvar LAUNCH_EVENT_LENS_ADDRESS = (_LAUNCH_EVENT_LENS_AD = {}, _LAUNCH_EVENT_LENS_AD[ChainId.RINKEBY] = '0xfa31cDA014bA4e1A2CfF02EA94a7B9E6DB6BcbC5', _LAUNCH_EVENT_LENS_AD[ChainId.FUJI] = '0x0000000000000000000000000000000000000000', _LAUNCH_EVENT_LENS_AD[ChainId.AVALANCHE] = '0x039AA5d3FC07f6f265656793A8c437055b653d68', _LAUNCH_EVENT_LENS_AD);\nvar ROCKET_JOE_STAKING_ADDRESS = (_ROCKET_JOE_STAKING_A = {}, _ROCKET_JOE_STAKING_A[ChainId.RINKEBY] = '0xc1108bda59F2A66843833d5B801bF40C966d34ca', _ROCKET_JOE_STAKING_A[ChainId.FUJI] = '0x0000000000000000000000000000000000000000', _ROCKET_JOE_STAKING_A[ChainId.AVALANCHE] = '0x102D195C3eE8BF8A9A89d63FB3659432d3174d81', _ROCKET_JOE_STAKING_A);\nvar INIT_CODE_HASH = '0x0bbca9af0511ad1a1da383135cf3a8d2ac620e549ef9f6ae3a4c33c2fed0af91';\nvar MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI.BigInt(1000); // exports for internal consumption\n\nvar ZERO = /*#__PURE__*/JSBI.BigInt(0);\nvar ONE = /*#__PURE__*/JSBI.BigInt(1);\nvar TWO = /*#__PURE__*/JSBI.BigInt(2);\nvar THREE = /*#__PURE__*/JSBI.BigInt(3);\nvar FIVE = /*#__PURE__*/JSBI.BigInt(5);\nvar TEN = /*#__PURE__*/JSBI.BigInt(10);\n\nvar _100 = /*#__PURE__*/JSBI.BigInt(100);\n\nvar _997 = /*#__PURE__*/JSBI.BigInt(997);\n\nvar _1000 = /*#__PURE__*/JSBI.BigInt(1000);\n\nvar SolidityType;\n\n(function (SolidityType) {\n  SolidityType[\"uint8\"] = \"uint8\";\n  SolidityType[\"uint256\"] = \"uint256\";\n})(SolidityType || (SolidityType = {}));\n\nvar SOLIDITY_TYPE_MAXIMA = (_SOLIDITY_TYPE_MAXIMA = {}, _SOLIDITY_TYPE_MAXIMA[SolidityType.uint8] = /*#__PURE__*/JSBI.BigInt('0xff'), _SOLIDITY_TYPE_MAXIMA[SolidityType.uint256] = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'), _SOLIDITY_TYPE_MAXIMA);\n/**\r\n * Lending SDK\r\n */\n\nvar UNITROLLER_ADDRESS = (_UNITROLLER_ADDRESS = {}, _UNITROLLER_ADDRESS[ChainId.RINKEBY] = '0x5b0a2Fa14808E34C5518E19f0DBc39F61d080B11', _UNITROLLER_ADDRESS[ChainId.FUJI] = '0x0000000000000000000000000000000000000000', _UNITROLLER_ADDRESS[ChainId.AVALANCHE] = '0xdc13687554205E5b89Ac783db14bb5bba4A1eDaC', _UNITROLLER_ADDRESS);\nvar JOELENS_ADDRESS = (_JOELENS_ADDRESS = {}, _JOELENS_ADDRESS[ChainId.RINKEBY] = '0x4F101798dd4AF8A2A8325F4C54C195a61C59Dc62', _JOELENS_ADDRESS[ChainId.FUJI] = '0x0000000000000000000000000000000000000000', _JOELENS_ADDRESS[ChainId.AVALANCHE] = '0xFDF50FEa3527FaD31Fa840B748FD3694aE8a47cc', _JOELENS_ADDRESS);\nvar JOELENSVIEW_ADDRESS = (_JOELENSVIEW_ADDRESS = {}, _JOELENSVIEW_ADDRESS[ChainId.RINKEBY] = '0x51fBdc8FCa72CeF1E1b558DB0c502e874DB5602A', _JOELENSVIEW_ADDRESS[ChainId.FUJI] = '0x0000000000000000000000000000000000000000', _JOELENSVIEW_ADDRESS[ChainId.AVALANCHE] = '0x0000000000000000000000000000000000000000', _JOELENSVIEW_ADDRESS);\nvar FARMLENS_ADDRESS = (_FARMLENS_ADDRESS = {}, _FARMLENS_ADDRESS[ChainId.RINKEBY] = '0x926E833c27284f7f633E461FcE6Dd17ccb2030e1', _FARMLENS_ADDRESS[ChainId.FUJI] = '0x0000000000000000000000000000000000000000', _FARMLENS_ADDRESS[ChainId.AVALANCHE] = '0xc1b83cE1573984Dcf4115e983F9c28748a0F350E', _FARMLENS_ADDRESS);\nvar JAVAX_ADDRESS = (_JAVAX_ADDRESS = {}, _JAVAX_ADDRESS[ChainId.RINKEBY] = '0x0444dcF838055493519F26021dE63Afa72EEe0D2', _JAVAX_ADDRESS[ChainId.FUJI] = '0x0000000000000000000000000000000000000000', _JAVAX_ADDRESS[ChainId.AVALANCHE] = '0xC22F01ddc8010Ee05574028528614634684EC29e', _JAVAX_ADDRESS);\nvar MAXIMILLION_ADDRESS = (_MAXIMILLION_ADDRESS = {}, _MAXIMILLION_ADDRESS[ChainId.RINKEBY] = '0xC48B0159d3e7F240ac76cc3Ce39dF62fCd4656b0', _MAXIMILLION_ADDRESS[ChainId.FUJI] = '0x0000000000000000000000000000000000000000', _MAXIMILLION_ADDRESS[ChainId.AVALANCHE] = '0xe5cDdAFd0f7Af3DEAf4bd213bBaee7A5927AB7E7', _MAXIMILLION_ADDRESS);\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n} // see https://stackoverflow.com/a/41102306\n\n\nvar CAN_SET_PROTOTYPE = ('setPrototypeOf' in Object);\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\n\nvar InsufficientReservesError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(InsufficientReservesError, _Error);\n\n  function InsufficientReservesError() {\n    var _this;\n\n    _this = _Error.call(this) || this;\n    _this.isInsufficientReservesError = true;\n    _this.name = _this.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof InsufficientReservesError ? this.constructor : void 0).prototype);\n    return _this;\n  }\n\n  return InsufficientReservesError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\n\n\nvar InsufficientInputAmountError = /*#__PURE__*/function (_Error2) {\n  _inheritsLoose(InsufficientInputAmountError, _Error2);\n\n  function InsufficientInputAmountError() {\n    var _this2;\n\n    _this2 = _Error2.call(this) || this;\n    _this2.isInsufficientInputAmountError = true;\n    _this2.name = _this2.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this2), (this instanceof InsufficientInputAmountError ? this.constructor : void 0).prototype);\n    return _this2;\n  }\n\n  return InsufficientInputAmountError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction validateSolidityTypeInstance(value, solidityType) {\n  !JSBI.greaterThanOrEqual(value, ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, value + \" is not a \" + solidityType + \".\") : invariant(false) : void 0;\n  !JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]) ? process.env.NODE_ENV !== \"production\" ? invariant(false, value + \" is not a \" + solidityType + \".\") : invariant(false) : void 0;\n} // warns if addresses are not checksummed\n\n\nfunction validateAndParseAddress(address) {\n  try {\n    var checksummedAddress = getAddress(address);\n    process.env.NODE_ENV !== \"production\" ? warning(address === checksummedAddress, address + \" is not checksummed.\") : void 0;\n    return checksummedAddress;\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? invariant(false, address + \" is not a valid address.\") : invariant(false);\n  }\n}\n\nfunction parseBigintIsh(bigintIsh) {\n  return bigintIsh instanceof JSBI ? bigintIsh : typeof bigintIsh === 'bigint' ? JSBI.BigInt(bigintIsh.toString()) : JSBI.BigInt(bigintIsh);\n} // mock the on-chain sqrt function\n\n\nfunction sqrt(y) {\n  validateSolidityTypeInstance(y, SolidityType.uint256);\n  var z = ZERO;\n  var x;\n\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y;\n    x = JSBI.add(JSBI.divide(y, TWO), ONE);\n\n    while (JSBI.lessThan(x, z)) {\n      z = x;\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO);\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE;\n  }\n\n  return z;\n} // given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\n\n\nfunction sortedInsert(items, add, maxSize, comparator) {\n  !(maxSize > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_SIZE_ZERO') : invariant(false) : void 0; // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n\n  !(items.length <= maxSize) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ITEMS_SIZE') : invariant(false) : void 0; // short circuit first item add\n\n  if (items.length === 0) {\n    items.push(add);\n    return null;\n  } else {\n    var isFull = items.length === maxSize; // short circuit if full and the additional item does not come before the last item\n\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add;\n    }\n\n    var lo = 0,\n        hi = items.length;\n\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n\n    items.splice(lo, 0, add);\n    return isFull ? items.pop() : null;\n  }\n}\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\n\n\nvar Currency =\n/**\r\n * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n * @param decimals decimals of the currency\r\n * @param symbol symbol of the currency\r\n * @param name of the currency\r\n */\nfunction Currency(decimals, symbol, name) {\n  validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8);\n  this.decimals = decimals;\n  this.symbol = symbol;\n  this.name = name;\n};\n/**\r\n * The only instance of the base class `Currency`.\r\n */\n\n\nCurrency.CAVAX = /*#__PURE__*/new Currency(18, 'AVAX', 'Avalanche');\nvar CAVAX = Currency.CAVAX;\n\nvar _WAVAX;\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\n\n\nvar Token = /*#__PURE__*/function (_Currency) {\n  _inheritsLoose(Token, _Currency);\n\n  function Token(chainId, address, decimals, symbol, name) {\n    var _this;\n\n    _this = _Currency.call(this, decimals, symbol, name) || this;\n    _this.chainId = chainId;\n    _this.address = validateAndParseAddress(address);\n    return _this;\n  }\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\n\n\n  var _proto = Token.prototype;\n\n  _proto.equals = function equals(other) {\n    // short circuit on reference equality\n    if (this === other) {\n      return true;\n    }\n\n    return this.chainId === other.chainId && this.address === other.address;\n  }\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\n  ;\n\n  _proto.sortsBefore = function sortsBefore(other) {\n    !(this.chainId === other.chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    !(this.address !== other.address) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ADDRESSES') : invariant(false) : void 0;\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  };\n\n  return Token;\n}(Currency);\n/**\r\n * Compares two currencies for equality\r\n */\n\n\nfunction currencyEquals(currencyA, currencyB) {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB);\n  } else if (currencyA instanceof Token) {\n    return false;\n  } else if (currencyB instanceof Token) {\n    return false;\n  } else {\n    return currencyA === currencyB;\n  }\n}\n\nvar WAVAX = (_WAVAX = {}, _WAVAX[ChainId.RINKEBY] = /*#__PURE__*/new Token(ChainId.RINKEBY, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WAVAX', 'Wrapped AVAX'), _WAVAX[ChainId.FUJI] = /*#__PURE__*/new Token(ChainId.FUJI, '0xd00ae08403B9bbb9124bB305C09058E32C39A48c', 18, 'WAVAX', 'Wrapped AVAX'), _WAVAX[ChainId.AVALANCHE] = /*#__PURE__*/new Token(ChainId.AVALANCHE, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'), _WAVAX);\n\nvar _toSignificantRoundin, _toFixedRounding;\n\nvar Decimal = /*#__PURE__*/toFormat(_Decimal);\nvar Big = /*#__PURE__*/toFormat(_Big);\nvar toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);\nvar toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[Rounding.ROUND_DOWN] = 0, _toFixedRounding[Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[Rounding.ROUND_UP] = 3, _toFixedRounding);\n\nvar Fraction = /*#__PURE__*/function () {\n  function Fraction(numerator, denominator) {\n    if (denominator === void 0) {\n      denominator = ONE;\n    }\n\n    this.numerator = parseBigintIsh(numerator);\n    this.denominator = parseBigintIsh(denominator);\n  } // performs floor division\n\n\n  var _proto = Fraction.prototype;\n\n  _proto.invert = function invert() {\n    return new Fraction(this.denominator, this.numerator);\n  };\n\n  _proto.add = function add(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.subtract = function subtract(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.lessThan = function lessThan(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.equalTo = function equalTo(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.greaterThan = function greaterThan(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.multiply = function multiply(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.divide = function divide(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(significantDigits) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not an integer.\") : invariant(false) : void 0;\n    !(significantDigits > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not positive.\") : invariant(false) : void 0;\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(decimalPlaces) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is not an integer.\") : invariant(false) : void 0;\n    !(decimalPlaces >= 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is negative.\") : invariant(false) : void 0;\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  };\n\n  _createClass(Fraction, [{\n    key: \"quotient\",\n    get: function get() {\n      return JSBI.divide(this.numerator, this.denominator);\n    } // remainder after floor division\n\n  }, {\n    key: \"remainder\",\n    get: function get() {\n      return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\n    }\n  }]);\n\n  return Fraction;\n}();\n\nvar Big$1 = /*#__PURE__*/toFormat(_Big);\n\nvar CurrencyAmount = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(CurrencyAmount, _Fraction); // amount _must_ be raw, i.e. in the native representation\n\n\n  function CurrencyAmount(currency, amount) {\n    var _this;\n\n    var parsedAmount = parseBigintIsh(amount);\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256);\n    _this = _Fraction.call(this, parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals))) || this;\n    _this.currency = currency;\n    return _this;\n  }\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param amount ether amount in wei\r\n   */\n\n\n  CurrencyAmount.ether = function ether(amount) {\n    return new CurrencyAmount(CAVAX, amount);\n  };\n\n  var _proto = CurrencyAmount.prototype;\n\n  _proto.add = function add(other) {\n    !currencyEquals(this.currency, other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw));\n  };\n\n  _proto.subtract = function subtract(other) {\n    !currencyEquals(this.currency, other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n\n    return _Fraction.prototype.toSignificant.call(this, significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = this.currency.decimals;\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n\n    !(decimalPlaces <= this.currency.decimals) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;\n    return _Fraction.prototype.toFixed.call(this, decimalPlaces, format, rounding);\n  };\n\n  _proto.toExact = function toExact(format) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    Big$1.DP = this.currency.decimals;\n    return new Big$1(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\n  };\n\n  _createClass(CurrencyAmount, [{\n    key: \"raw\",\n    get: function get() {\n      return this.numerator;\n    }\n  }]);\n\n  return CurrencyAmount;\n}(Fraction);\n\nvar TokenAmount = /*#__PURE__*/function (_CurrencyAmount) {\n  _inheritsLoose(TokenAmount, _CurrencyAmount); // amount _must_ be raw, i.e. in the native representation\n\n\n  function TokenAmount(token, amount) {\n    var _this;\n\n    _this = _CurrencyAmount.call(this, token, amount) || this;\n    _this.token = token;\n    return _this;\n  }\n\n  var _proto = TokenAmount.prototype;\n\n  _proto.add = function add(other) {\n    !this.token.equals(other.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw));\n  };\n\n  _proto.subtract = function subtract(other) {\n    !this.token.equals(other.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw));\n  };\n\n  return TokenAmount;\n}(CurrencyAmount);\n\nvar Price = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Price, _Fraction); // denominator and numerator _must_ be raw, i.e. in the native representation\n\n\n  function Price(baseCurrency, quoteCurrency, denominator, numerator) {\n    var _this;\n\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    _this.baseCurrency = baseCurrency;\n    _this.quoteCurrency = quoteCurrency;\n    _this.scalar = new Fraction(JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals)));\n    return _this;\n  }\n\n  Price.fromRoute = function fromRoute(route) {\n    var prices = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(route.pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          i = _step$value[0],\n          pair = _step$value[1];\n      prices.push(route.path[i].equals(pair.token0) ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw) : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw));\n    }\n\n    return prices.slice(1).reduce(function (accumulator, currentValue) {\n      return accumulator.multiply(currentValue);\n    }, prices[0]);\n  };\n\n  var _proto = Price.prototype;\n\n  _proto.invert = function invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  };\n\n  _proto.multiply = function multiply(other) {\n    !currencyEquals(this.quoteCurrency, other.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    var fraction = _Fraction.prototype.multiply.call(this, other);\n\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  } // performs floor division on overflow\n  ;\n\n  _proto.quote = function quote(currencyAmount) {\n    !currencyEquals(currencyAmount.currency, this.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, _Fraction.prototype.multiply.call(this, currencyAmount.raw).quotient);\n    }\n\n    return CurrencyAmount.ether(_Fraction.prototype.multiply.call(this, currencyAmount.raw).quotient);\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 4;\n    }\n\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\n  };\n\n  _createClass(Price, [{\n    key: \"raw\",\n    get: function get() {\n      return new Fraction(this.numerator, this.denominator);\n    }\n  }, {\n    key: \"adjusted\",\n    get: function get() {\n      return _Fraction.prototype.multiply.call(this, this.scalar);\n    }\n  }]);\n\n  return Price;\n}(Fraction);\n\nvar PAIR_ADDRESS_CACHE = {};\n\nvar Pair = /*#__PURE__*/function () {\n  function Pair(tokenAmountA, tokenAmountB, chainId) {\n    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, chainId), 18, 'JLP', 'Joe Liquidity');\n    this.tokenAmounts = tokenAmounts;\n  }\n\n  Pair.getAddress = function getAddress(tokenA, tokenB, chainId) {\n    var _PAIR_ADDRESS_CACHE, _PAIR_ADDRESS_CACHE$t;\n\n    var tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]; // does safety checks\n\n    if (((_PAIR_ADDRESS_CACHE = PAIR_ADDRESS_CACHE) === null || _PAIR_ADDRESS_CACHE === void 0 ? void 0 : (_PAIR_ADDRESS_CACHE$t = _PAIR_ADDRESS_CACHE[tokens[0].address]) === null || _PAIR_ADDRESS_CACHE$t === void 0 ? void 0 : _PAIR_ADDRESS_CACHE$t[tokens[1].address]) === undefined) {\n      var _PAIR_ADDRESS_CACHE2, _extends2, _extends3;\n\n      PAIR_ADDRESS_CACHE = _extends({}, PAIR_ADDRESS_CACHE, (_extends3 = {}, _extends3[tokens[0].address] = _extends({}, (_PAIR_ADDRESS_CACHE2 = PAIR_ADDRESS_CACHE) === null || _PAIR_ADDRESS_CACHE2 === void 0 ? void 0 : _PAIR_ADDRESS_CACHE2[tokens[0].address], (_extends2 = {}, _extends2[tokens[1].address] = getCreate2Address(FACTORY_ADDRESS[chainId], keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]), INIT_CODE_HASH), _extends2)), _extends3));\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address];\n  }\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\n  ;\n\n  var _proto = Pair.prototype;\n\n  _proto.involvesToken = function involvesToken(token) {\n    return token.equals(this.token0) || token.equals(this.token1);\n  }\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\n  ;\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\n\n\n  _proto.priceOf = function priceOf(token) {\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\n  }\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\n  ;\n\n  _proto.reserveOf = function reserveOf(token) {\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\n  };\n\n  _proto.getOutputAmount = function getOutputAmount(inputAmount, chainId) {\n    !this.involvesToken(inputAmount.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError();\n    }\n\n    var inputReserve = this.reserveOf(inputAmount.token);\n    var outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    var inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997);\n    var numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw);\n    var denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee);\n    var outputAmount = new TokenAmount(inputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator));\n\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), chainId)];\n  };\n\n  _proto.getInputAmount = function getInputAmount(outputAmount, chainId) {\n    !this.involvesToken(outputAmount.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO) || JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)) {\n      throw new InsufficientReservesError();\n    }\n\n    var outputReserve = this.reserveOf(outputAmount.token);\n    var inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    var numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000);\n    var denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997);\n    var inputAmount = new TokenAmount(outputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.add(JSBI.divide(numerator, denominator), ONE));\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), chainId)];\n  };\n\n  _proto.getLiquidityMinted = function getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {\n    !totalSupply.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    !(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    var liquidity;\n\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY);\n    } else {\n      var amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw);\n      var amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw);\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\n    }\n\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return new TokenAmount(this.liquidityToken, liquidity);\n  };\n\n  _proto.getLiquidityValue = function getLiquidityValue(token, totalSupply, liquidity, feeOn, kLast) {\n    if (feeOn === void 0) {\n      feeOn = false;\n    }\n\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    !totalSupply.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOTAL_SUPPLY') : invariant(false) : void 0;\n    !liquidity.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    !JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    var totalSupplyAdjusted;\n\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply;\n    } else {\n      !!!kLast ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'K_LAST') : invariant(false) : void 0;\n      var kLastParsed = parseBigintIsh(kLast);\n\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        var rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw));\n        var rootKLast = sqrt(kLastParsed);\n\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          var numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast));\n          var denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\n          var feeLiquidity = JSBI.divide(numerator, denominator);\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity));\n        } else {\n          totalSupplyAdjusted = totalSupply;\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply;\n      }\n    }\n\n    return new TokenAmount(token, JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw));\n  };\n\n  _createClass(Pair, [{\n    key: \"token0Price\",\n    get: function get() {\n      return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);\n    }\n    /**\r\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n     */\n\n  }, {\n    key: \"token1Price\",\n    get: function get() {\n      return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);\n    }\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.token0.chainId;\n    }\n  }, {\n    key: \"token0\",\n    get: function get() {\n      return this.tokenAmounts[0].token;\n    }\n  }, {\n    key: \"token1\",\n    get: function get() {\n      return this.tokenAmounts[1].token;\n    }\n  }, {\n    key: \"reserve0\",\n    get: function get() {\n      return this.tokenAmounts[0];\n    }\n  }, {\n    key: \"reserve1\",\n    get: function get() {\n      return this.tokenAmounts[1];\n    }\n  }]);\n\n  return Pair;\n}();\n\nvar Route = /*#__PURE__*/function () {\n  function Route(pairs, input, output) {\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !pairs.every(function (pair) {\n      return pair.chainId === pairs[0].chainId;\n    }) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    !(input instanceof Token && pairs[0].involvesToken(input) || input === CAVAX && pairs[0].involvesToken(WAVAX[pairs[0].chainId])) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT') : invariant(false) : void 0;\n    !(typeof output === 'undefined' || output instanceof Token && pairs[pairs.length - 1].involvesToken(output) || output === CAVAX && pairs[pairs.length - 1].involvesToken(WAVAX[pairs[0].chainId])) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT') : invariant(false) : void 0;\n    var path = [input instanceof Token ? input : WAVAX[pairs[0].chainId]];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          i = _step$value[0],\n          pair = _step$value[1];\n      var currentInput = path[i];\n      !(currentInput.equals(pair.token0) || currentInput.equals(pair.token1)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PATH') : invariant(false) : void 0;\n\n      var _output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\n\n      path.push(_output);\n    }\n\n    this.pairs = pairs;\n    this.path = path;\n    this.midPrice = Price.fromRoute(this);\n    this.input = input;\n    this.output = output !== null && output !== void 0 ? output : path[path.length - 1];\n  }\n\n  _createClass(Route, [{\n    key: \"chainId\",\n    get: function get() {\n      return this.pairs[0].chainId;\n    }\n  }]);\n\n  return Route;\n}();\n\nvar _100_PERCENT = /*#__PURE__*/new Fraction(_100);\n\nvar Percent = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Percent, _Fraction);\n\n  function Percent() {\n    return _Fraction.apply(this, arguments) || this;\n  }\n\n  var _proto = Percent.prototype;\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 5;\n    }\n\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 2;\n    }\n\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\n  };\n\n  return Percent;\n}(Fraction);\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\n\n\nfunction computePriceImpact(midPrice, inputAmount, outputAmount) {\n  var exactQuote = midPrice.raw.multiply(inputAmount.raw); // calculate slippage := (exactQuote - outputAmount) / exactQuote\n\n  var slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote);\n  return new Percent(slippage.numerator, slippage.denominator);\n} // comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\n\n\nfunction inputOutputComparator(a, b) {\n  // must have same input and output token for comparison\n  !currencyEquals(a.inputAmount.currency, b.inputAmount.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT_CURRENCY') : invariant(false) : void 0;\n  !currencyEquals(a.outputAmount.currency, b.outputAmount.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT_CURRENCY') : invariant(false) : void 0;\n\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0;\n    } // trade A requires less input than trade B, so A should come first\n\n\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n} // extension of the input output comparator that also considers other dimensions of the trade in ranking them\n\n\nfunction tradeComparator(a, b) {\n  var ioComp = inputOutputComparator(a, b);\n\n  if (ioComp !== 0) {\n    return ioComp;\n  } // consider lowest slippage next, since these are less likely to fail\n\n\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1;\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1;\n  } // finally consider the number of hops since each hop costs gas\n\n\n  return a.route.path.length - b.route.path.length;\n}\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\n\n\nfunction wrappedAmount(currencyAmount, chainId) {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount;\n  if (currencyAmount.currency === CAVAX) return new TokenAmount(WAVAX[chainId], currencyAmount.raw);\n  process.env.NODE_ENV !== \"production\" ? invariant(false, 'CURRENCY') : invariant(false);\n}\n\nfunction wrappedCurrency(currency, chainId) {\n  if (currency instanceof Token) return currency;\n  if (currency === CAVAX) return WAVAX[chainId];\n  process.env.NODE_ENV !== \"production\" ? invariant(false, 'CURRENCY') : invariant(false);\n}\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\n\n\nvar Trade = /*#__PURE__*/function () {\n  function Trade(route, amount, tradeType, chainId) {\n    var amounts = new Array(route.path.length);\n    var nextPairs = new Array(route.pairs.length);\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      !currencyEquals(amount.currency, route.input) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT') : invariant(false) : void 0;\n      amounts[0] = wrappedAmount(amount, route.chainId);\n\n      for (var i = 0; i < route.path.length - 1; i++) {\n        var pair = route.pairs[i];\n\n        var _pair$getOutputAmount = pair.getOutputAmount(amounts[i], chainId),\n            outputAmount = _pair$getOutputAmount[0],\n            nextPair = _pair$getOutputAmount[1];\n\n        amounts[i + 1] = outputAmount;\n        nextPairs[i] = nextPair;\n      }\n    } else {\n      !currencyEquals(amount.currency, route.output) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT') : invariant(false) : void 0;\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId);\n\n      for (var _i = route.path.length - 1; _i > 0; _i--) {\n        var _pair = route.pairs[_i - 1];\n\n        var _pair$getInputAmount = _pair.getInputAmount(amounts[_i], chainId),\n            inputAmount = _pair$getInputAmount[0],\n            _nextPair = _pair$getInputAmount[1];\n\n        amounts[_i - 1] = inputAmount;\n        nextPairs[_i - 1] = _nextPair;\n      }\n    }\n\n    this.route = route;\n    this.tradeType = tradeType;\n    this.inputAmount = tradeType === TradeType.EXACT_INPUT ? amount : route.input === CAVAX ? CurrencyAmount.ether(amounts[0].raw) : amounts[0];\n    this.outputAmount = tradeType === TradeType.EXACT_OUTPUT ? amount : route.output === CAVAX ? CurrencyAmount.ether(amounts[amounts.length - 1].raw) : amounts[amounts.length - 1];\n    this.executionPrice = new Price(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.raw, this.outputAmount.raw);\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input));\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount);\n    this.chainId = chainId;\n  }\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\n\n\n  Trade.exactIn = function exactIn(route, amountIn, chainId) {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT, chainId);\n  }\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\n  ;\n\n  Trade.exactOut = function exactOut(route, amountOut, chainId) {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT, chainId);\n  }\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\n  ;\n\n  var _proto = Trade.prototype;\n\n  _proto.minimumAmountOut = function minimumAmountOut(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;\n\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount;\n    } else {\n      var slippageAdjustedAmountOut = new Fraction(ONE).add(slippageTolerance).invert().multiply(this.outputAmount.raw).quotient;\n      return this.outputAmount instanceof TokenAmount ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut) : CurrencyAmount.ether(slippageAdjustedAmountOut);\n    }\n  }\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\n  ;\n\n  _proto.maximumAmountIn = function maximumAmountIn(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;\n\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount;\n    } else {\n      var slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient;\n      return this.inputAmount instanceof TokenAmount ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn) : CurrencyAmount.ether(slippageAdjustedAmountIn);\n    }\n  }\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\n  ;\n\n  Trade.bestTradeExactIn = function bestTradeExactIn(pairs, currencyAmountIn, currencyOut, _temp, // used in recursion.\n  currentPairs, originalAmountIn, bestTrades) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$maxNumResults = _ref.maxNumResults,\n        maxNumResults = _ref$maxNumResults === void 0 ? 3 : _ref$maxNumResults,\n        _ref$maxHops = _ref.maxHops,\n        maxHops = _ref$maxHops === void 0 ? 3 : _ref$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (originalAmountIn === void 0) {\n      originalAmountIn = currencyAmountIn;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !(maxHops > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_HOPS') : invariant(false) : void 0;\n    !(originalAmountIn === currencyAmountIn || currentPairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INVALID_RECURSION') : invariant(false) : void 0;\n    var chainId = currencyAmountIn instanceof TokenAmount ? currencyAmountIn.token.chainId : currencyOut instanceof Token ? currencyOut.chainId : undefined;\n    !(chainId !== undefined) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n    var amountIn = wrappedAmount(currencyAmountIn, chainId);\n    var tokenOut = wrappedCurrency(currencyOut, chainId);\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountOut = void 0;\n\n      try {\n        ;\n\n        var _pair$getOutputAmount2 = pair.getOutputAmount(amountIn, chainId);\n\n        amountOut = _pair$getOutputAmount2[0];\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the output token, so this is the final trade of one of the paths\n\n\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(bestTrades, new Trade(new Route([].concat(currentPairs, [pair]), originalAmountIn.currency, currencyOut), originalAmountIn, TradeType.EXACT_INPUT, chainId), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactIn(pairsExcludingThisPair, amountOut, currencyOut, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [].concat(currentPairs, [pair]), originalAmountIn, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  }\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\n  ;\n\n  Trade.bestTradeExactOut = function bestTradeExactOut(pairs, currencyIn, currencyAmountOut, _temp2, // used in recursion.\n  currentPairs, originalAmountOut, bestTrades) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n        _ref2$maxNumResults = _ref2.maxNumResults,\n        maxNumResults = _ref2$maxNumResults === void 0 ? 3 : _ref2$maxNumResults,\n        _ref2$maxHops = _ref2.maxHops,\n        maxHops = _ref2$maxHops === void 0 ? 3 : _ref2$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (originalAmountOut === void 0) {\n      originalAmountOut = currencyAmountOut;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !(maxHops > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_HOPS') : invariant(false) : void 0;\n    !(originalAmountOut === currencyAmountOut || currentPairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INVALID_RECURSION') : invariant(false) : void 0;\n    var chainId = currencyAmountOut instanceof TokenAmount ? currencyAmountOut.token.chainId : currencyIn instanceof Token ? currencyIn.chainId : undefined;\n    !(chainId !== undefined) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n    var amountOut = wrappedAmount(currencyAmountOut, chainId);\n    var tokenIn = wrappedCurrency(currencyIn, chainId);\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountIn = void 0;\n\n      try {\n        ;\n\n        var _pair$getInputAmount2 = pair.getInputAmount(amountOut, chainId);\n\n        amountIn = _pair$getInputAmount2[0];\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the input token, so this is the first trade of one of the paths\n\n\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(bestTrades, new Trade(new Route([pair].concat(currentPairs), currencyIn, originalAmountOut.currency), originalAmountOut, TradeType.EXACT_OUTPUT, chainId), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactOut(pairsExcludingThisPair, currencyIn, amountIn, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [pair].concat(currentPairs), originalAmountOut, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  };\n\n  return Trade;\n}();\n\nfunction toHex(currencyAmount) {\n  return \"0x\" + currencyAmount.raw.toString(16);\n}\n\nvar ZERO_HEX = '0x0';\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\n\nvar Router = /*#__PURE__*/function () {\n  /**\r\n   * Cannot be constructed.\r\n   */\n  function Router() {}\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\n\n\n  Router.swapCallParameters = function swapCallParameters(trade, options) {\n    var etherIn = trade.inputAmount.currency === CAVAX;\n    var etherOut = trade.outputAmount.currency === CAVAX; // the router does not support both ether in and out\n\n    !!(etherIn && etherOut) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ETHER_IN_OUT') : invariant(false) : void 0;\n    !(!('ttl' in options) || options.ttl > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TTL') : invariant(false) : void 0;\n    var to = validateAndParseAddress(options.recipient);\n    var amountIn = toHex(trade.maximumAmountIn(options.allowedSlippage));\n    var amountOut = toHex(trade.minimumAmountOut(options.allowedSlippage));\n    var path = trade.route.path.map(function (token) {\n      return token.address;\n    });\n    var deadline = 'ttl' in options ? \"0x\" + (Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16) : \"0x\" + options.deadline.toString(16);\n    var useFeeOnTransfer = Boolean(options.feeOnTransfer);\n    var methodName;\n    var args;\n    var value;\n\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactAVAXForTokensSupportingFeeOnTransferTokens' : 'swapExactAVAXForTokens'; // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForAVAXSupportingFeeOnTransferTokens' : 'swapExactTokensForAVAX'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens' : 'swapExactTokensForTokens'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n\n      case TradeType.EXACT_OUTPUT:\n        !!useFeeOnTransfer ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'EXACT_OUT_FOT') : invariant(false) : void 0;\n\n        if (etherIn) {\n          methodName = 'swapAVAXForExactTokens'; // (uint amountOut, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactAVAX'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = 'swapTokensForExactTokens'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n    }\n\n    return {\n      methodName: methodName,\n      args: args,\n      value: value\n    };\n  };\n\n  return Router;\n}();\n\nvar ERC20 = [{\n  constant: true,\n  inputs: [],\n  name: \"decimals\",\n  outputs: [{\n    name: \"\",\n    type: \"uint8\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: true,\n  inputs: [{\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nvar _format = \"hh-sol-artifact-1\";\nvar contractName = \"JoePair\";\nvar sourceName = \"contracts/traderjoe/JoePair.sol\";\nvar abi = [{\n  inputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"constructor\"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    indexed: true,\n    internalType: \"address\",\n    name: \"spender\",\n    type: \"address\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"Approval\",\n  type: \"event\"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"address\",\n    name: \"sender\",\n    type: \"address\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"amount0\",\n    type: \"uint256\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"amount1\",\n    type: \"uint256\"\n  }, {\n    indexed: true,\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }],\n  name: \"Burn\",\n  type: \"event\"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"address\",\n    name: \"sender\",\n    type: \"address\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"amount0\",\n    type: \"uint256\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"amount1\",\n    type: \"uint256\"\n  }],\n  name: \"Mint\",\n  type: \"event\"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"address\",\n    name: \"sender\",\n    type: \"address\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"amount0In\",\n    type: \"uint256\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"amount1In\",\n    type: \"uint256\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"amount0Out\",\n    type: \"uint256\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"amount1Out\",\n    type: \"uint256\"\n  }, {\n    indexed: true,\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }],\n  name: \"Swap\",\n  type: \"event\"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: false,\n    internalType: \"uint112\",\n    name: \"reserve0\",\n    type: \"uint112\"\n  }, {\n    indexed: false,\n    internalType: \"uint112\",\n    name: \"reserve1\",\n    type: \"uint112\"\n  }],\n  name: \"Sync\",\n  type: \"event\"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    indexed: true,\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"Transfer\",\n  type: \"event\"\n}, {\n  inputs: [],\n  name: \"DOMAIN_SEPARATOR\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"MINIMUM_LIQUIDITY\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"PERMIT_TYPEHASH\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"allowance\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"spender\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"approve\",\n  outputs: [{\n    internalType: \"bool\",\n    name: \"\",\n    type: \"bool\"\n  }],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }],\n  name: \"burn\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"amount0\",\n    type: \"uint256\"\n  }, {\n    internalType: \"uint256\",\n    name: \"amount1\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"decimals\",\n  outputs: [{\n    internalType: \"uint8\",\n    name: \"\",\n    type: \"uint8\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"factory\",\n  outputs: [{\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"getReserves\",\n  outputs: [{\n    internalType: \"uint112\",\n    name: \"_reserve0\",\n    type: \"uint112\"\n  }, {\n    internalType: \"uint112\",\n    name: \"_reserve1\",\n    type: \"uint112\"\n  }, {\n    internalType: \"uint32\",\n    name: \"_blockTimestampLast\",\n    type: \"uint32\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"_token0\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"_token1\",\n    type: \"address\"\n  }],\n  name: \"initialize\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"kLast\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }],\n  name: \"mint\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"liquidity\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"name\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"nonces\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"spender\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }, {\n    internalType: \"uint256\",\n    name: \"deadline\",\n    type: \"uint256\"\n  }, {\n    internalType: \"uint8\",\n    name: \"v\",\n    type: \"uint8\"\n  }, {\n    internalType: \"bytes32\",\n    name: \"r\",\n    type: \"bytes32\"\n  }, {\n    internalType: \"bytes32\",\n    name: \"s\",\n    type: \"bytes32\"\n  }],\n  name: \"permit\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"price0CumulativeLast\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"price1CumulativeLast\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }],\n  name: \"skim\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"amount0Out\",\n    type: \"uint256\"\n  }, {\n    internalType: \"uint256\",\n    name: \"amount1Out\",\n    type: \"uint256\"\n  }, {\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"bytes\",\n    name: \"data\",\n    type: \"bytes\"\n  }],\n  name: \"swap\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"symbol\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"sync\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"token0\",\n  outputs: [{\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"token1\",\n  outputs: [{\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"totalSupply\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"transfer\",\n  outputs: [{\n    internalType: \"bool\",\n    name: \"\",\n    type: \"bool\"\n  }],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"transferFrom\",\n  outputs: [{\n    internalType: \"bool\",\n    name: \"\",\n    type: \"bool\"\n  }],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}];\nvar bytecode = \"0x60806040526001600c5534801561001557600080fd5b50604080518082018252600c81526b2537b2902628102a37b5b2b760a11b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fd4eb8415c62493390808cc42ba6f3ba97fa30eb773771605674d83c7162115e7818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556122f18061010a6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610534578063d505accf1461053c578063dd62ed3e1461058d578063fff6cae9146105bb576101a9565b8063ba9a7a56146104fe578063bc25cf7714610506578063c45a01551461052c576101a9565b80637ecebe00116100d35780637ecebe001461046557806389afcb441461048b57806395d89b41146104ca578063a9059cbb146104d2576101a9565b80636a6278421461041157806370a08231146104375780637464fc3d1461045d576101a9565b806323b872dd116101665780633644e515116101405780633644e515146103cb578063485cc955146103d35780635909c0d5146104015780635a3d549314610409576101a9565b806323b872dd1461036f57806330adf81f146103a5578063313ce567146103ad576101a9565b8063022c0d9f146101ae57806306fdde031461023c5780630902f1ac146102b9578063095ea7b3146102f15780630dfe16811461033157806318160ddd14610355575b600080fd5b61023a600480360360808110156101c457600080fd5b8135916020810135916001600160a01b0360408301351691908101906080810160608201356401000000008111156101fb57600080fd5b82018360208201111561020d57600080fd5b8035906020019184600183028401116401000000008311171561022f57600080fd5b5090925090506105c3565b005b610244610afb565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027e578181015183820152602001610266565b50505050905090810190601f1680156102ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102c1610b23565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b61031d6004803603604081101561030757600080fd5b506001600160a01b038135169060200135610b4d565b604080519115158252519081900360200190f35b610339610b64565b604080516001600160a01b039092168252519081900360200190f35b61035d610b73565b60408051918252519081900360200190f35b61031d6004803603606081101561038557600080fd5b506001600160a01b03813581169160208101359091169060400135610b79565b61035d610c0d565b6103b5610c31565b6040805160ff9092168252519081900360200190f35b61035d610c36565b61023a600480360360408110156103e957600080fd5b506001600160a01b0381358116916020013516610c3c565b61035d610cba565b61035d610cc0565b61035d6004803603602081101561042757600080fd5b50356001600160a01b0316610cc6565b61035d6004803603602081101561044d57600080fd5b50356001600160a01b031661113c565b61035d61114e565b61035d6004803603602081101561047b57600080fd5b50356001600160a01b0316611154565b6104b1600480360360208110156104a157600080fd5b50356001600160a01b0316611166565b6040805192835260208301919091528051918290030190f35b6102446114f4565b61031d600480360360408110156104e857600080fd5b506001600160a01b038135169060200135611513565b61035d611520565b61023a6004803603602081101561051c57600080fd5b50356001600160a01b0316611526565b610339611692565b6103396116a1565b61023a600480360360e081101561055257600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356116b0565b61035d600480360360408110156105a357600080fd5b506001600160a01b03813581169160200135166118a5565b61023a6118c2565b600c54600114610608576040805162461bcd60e51b815260206004820152600b60248201526a129bd94e881313d0d2d15160aa1b604482015290519081900360640190fd5b6000600c558415158061061b5750600084115b61066c576040805162461bcd60e51b815260206004820152601f60248201527f4a6f653a20494e53554646494349454e545f4f55545055545f414d4f554e5400604482015290519081900360640190fd5b600080610677610b23565b5091509150816001600160701b03168710801561069c5750806001600160701b031686105b6106ed576040805162461bcd60e51b815260206004820152601b60248201527f4a6f653a20494e53554646494349454e545f4c49515549444954590000000000604482015290519081900360640190fd5b60065460075460009182916001600160a01b0391821691908116908916821480159061072b5750806001600160a01b0316896001600160a01b031614155b61076e576040805162461bcd60e51b815260206004820152600f60248201526e4a6f653a20494e56414c49445f544f60881b604482015290519081900360640190fd5b8a1561077f5761077f828a8d611a1e565b891561079057610790818a8c611a1e565b861561084257886001600160a01b031663ee22dd87338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561082957600080fd5b505af115801561083d573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561088857600080fd5b505afa15801561089c573d6000803e3d6000fd5b505050506040513d60208110156108b257600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b1580156108fe57600080fd5b505afa158015610912573d6000803e3d6000fd5b505050506040513d602081101561092857600080fd5b5051925060009150506001600160701b0385168a9003831161094b57600061095a565b89856001600160701b03160383035b9050600089856001600160701b0316038311610977576000610986565b89856001600160701b03160383035b905060008211806109975750600081115b6109e8576040805162461bcd60e51b815260206004820152601e60248201527f4a6f653a20494e53554646494349454e545f494e5055545f414d4f554e540000604482015290519081900360640190fd5b6000610a0a6109f8846003611baf565b610a04876103e8611baf565b90611c12565b90506000610a1c6109f8846003611baf565b9050610a41620f4240610a3b6001600160701b038b8116908b16611baf565b90611baf565b610a4b8383611baf565b1015610a87576040805162461bcd60e51b81526020600482015260066024820152654a6f653a204b60d01b604482015290519081900360640190fd5b5050610a9584848888611c62565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6040518060400160405280600c81526020016b2537b2902628102a37b5b2b760a11b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610b5a338484611e1b565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610bf8576001600160a01b0384166000908152600260209081526040808320338452909152902054610bd39083611c12565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610c03848484611e7d565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610c8c576040805162461bcd60e51b815260206004820152600e60248201526d2537b29d102327a92124a22222a760911b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c54600114610d0d576040805162461bcd60e51b815260206004820152600b60248201526a129bd94e881313d0d2d15160aa1b604482015290519081900360640190fd5b6000600c81905580610d1d610b23565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610d7157600080fd5b505afa158015610d85573d6000803e3d6000fd5b505050506040513d6020811015610d9b57600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610dee57600080fd5b505afa158015610e02573d6000803e3d6000fd5b505050506040513d6020811015610e1857600080fd5b505190506000610e31836001600160701b038716611c12565b90506000610e48836001600160701b038716611c12565b90506000610e568787611f2b565b6000549091508061102d5760055460408051637cd07e4760e01b815290516000926001600160a01b031691637cd07e47916004808301926020929190829003018186803b158015610ea657600080fd5b505afa158015610eba573d6000803e3d6000fd5b505050506040513d6020811015610ed057600080fd5b50519050336001600160a01b0382161415610fab57806001600160a01b03166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b158015610f1e57600080fd5b505afa158015610f32573d6000803e3d6000fd5b505050506040513d6020811015610f4857600080fd5b505199508915801590610f5d57506000198a14155b610fa6576040805162461bcd60e51b81526020600482015260156024820152744261642064657369726564206c697175696469747960581b604482015290519081900360640190fd5b611027565b6001600160a01b03811615611000576040805162461bcd60e51b815260206004820152601660248201527526bab9ba103737ba103430bb329036b4b3b930ba37b960511b604482015290519081900360640190fd5b6110186103e8610a046110138888611baf565b61206b565b995061102760006103e86120bd565b50611070565b61106d6001600160701b0389166110448684611baf565b8161104b57fe5b046001600160701b0389166110608685611baf565b8161106757fe5b04612147565b98505b600089116110af5760405162461bcd60e51b815260040180806020018281038252602281526020018061229a6022913960400191505060405180910390fd5b6110b98a8a6120bd565b6110c586868a8a611c62565b81156110ef576008546110eb906001600160701b0380821691600160701b900416611baf565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c546001146111ae576040805162461bcd60e51b815260206004820152600b60248201526a129bd94e881313d0d2d15160aa1b604482015290519081900360640190fd5b6000600c819055806111be610b23565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561121a57600080fd5b505afa15801561122e573d6000803e3d6000fd5b505050506040513d602081101561124457600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561129257600080fd5b505afa1580156112a6573d6000803e3d6000fd5b505050506040513d60208110156112bc57600080fd5b5051306000908152600160205260408120549192506112db8888611f2b565b600054909150806112ec8487611baf565b816112f357fe5b049a50806113018486611baf565b8161130857fe5b04995060008b11801561131b575060008a115b6113565760405162461bcd60e51b81526004018080602001828103825260228152602001806122786022913960400191505060405180910390fd5b611360308461215f565b61136b878d8d611a1e565b611376868d8c611a1e565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b1580156113bc57600080fd5b505afa1580156113d0573d6000803e3d6000fd5b505050506040513d60208110156113e657600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561143257600080fd5b505afa158015611446573d6000803e3d6000fd5b505050506040513d602081101561145c57600080fd5b5051935061146c85858b8b611c62565b811561149657600854611492906001600160701b0380821691600160701b900416611baf565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b6040518060400160405280600381526020016204a4c560ec1b81525081565b6000610b5a338484611e7d565b6103e881565b600c5460011461156b576040805162461bcd60e51b815260206004820152600b60248201526a129bd94e881313d0d2d15160aa1b604482015290519081900360640190fd5b6000600c55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b039485169490931692611614928592879261160f926001600160701b03169185916370a0823191602480820192602092909190829003018186803b1580156115dd57600080fd5b505afa1580156115f1573d6000803e3d6000fd5b505050506040513d602081101561160757600080fd5b505190611c12565b611a1e565b611688818461160f6008600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156115dd57600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b428410156116f4576040805162461bcd60e51b815260206004820152600c60248201526b129bd94e881156141254915160a21b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa15801561180f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906118455750886001600160a01b0316816001600160a01b0316145b61188f576040805162461bcd60e51b81526020600482015260166024820152754a6f653a20494e56414c49445f5349474e415455524560501b604482015290519081900360640190fd5b61189a898989611e1b565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600c54600114611907576040805162461bcd60e51b815260206004820152600b60248201526a129bd94e881313d0d2d15160aa1b604482015290519081900360640190fd5b6000600c55600654604080516370a0823160e01b81523060048201529051611a17926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561195857600080fd5b505afa15801561196c573d6000803e3d6000fd5b505050506040513d602081101561198257600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156119cf57600080fd5b505afa1580156119e3573d6000803e3d6000fd5b505050506040513d60208110156119f957600080fd5b50516008546001600160701b0380821691600160701b900416611c62565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611acb5780518252601f199092019160209182019101611aac565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611b2d576040519150601f19603f3d011682016040523d82523d6000602084013e611b32565b606091505b5091509150818015611b60575080511580611b605750808060200190516020811015611b5d57600080fd5b50515b611ba8576040805162461bcd60e51b8152602060048201526014602482015273129bd94e881514905394d1915497d1905253115160621b604482015290519081900360640190fd5b5050505050565b6000811580611bca57505080820282828281611bc757fe5b04145b610b5e576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610b5e576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b038411801590611c8057506001600160701b038311155b611cc1576040805162461bcd60e51b815260206004820152600d60248201526c4a6f653a204f564552464c4f5760981b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b90048116820390811615801590611cf157506001600160701b03841615155b8015611d0557506001600160701b03831615155b15611d70578063ffffffff16611d2d85611d1e866121f1565b6001600160e01b031690612203565b600980546001600160e01b03929092169290920201905563ffffffff8116611d5884611d1e876121f1565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260016020526040902054611ea09082611c12565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611ecf9082612228565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7c57600080fd5b505afa158015611f90573d6000803e3d6000fd5b505050506040513d6020811015611fa657600080fd5b5051600b546001600160a01b038216158015945091925090612057578015612052576000611fe36110136001600160701b03888116908816611baf565b90506000611ff08361206b565b90508082111561204f5760006120126120098484611c12565b60005490611baf565b9050600061202b83612025866005611baf565b90612228565b9050600081838161203857fe5b049050801561204b5761204b87826120bd565b5050505b50505b612063565b8015612063576000600b555b505092915050565b600060038211156120ae575080600160028204015b818110156120a85780915060028182858161209757fe5b0401816120a057fe5b049050612080565b506120b8565b81156120b8575060015b919050565b6000546120ca9082612228565b60009081556001600160a01b0383168152600160205260409020546120ef9082612228565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106121565781612158565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546121829082611c12565b6001600160a01b038316600090815260016020526040812091909155546121a99082611c12565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161222057fe5b049392505050565b80820182811015610b5e576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe4a6f653a20494e53554646494349454e545f4c49515549444954595f4255524e45444a6f653a20494e53554646494349454e545f4c49515549444954595f4d494e544544a26469706673582212205c0530d8975d81c05a44dc2110dd0e9eedcced0f1710956008eb001c428ccb0d64736f6c634300060c0033\";\nvar deployedBytecode = \"0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610534578063d505accf1461053c578063dd62ed3e1461058d578063fff6cae9146105bb576101a9565b8063ba9a7a56146104fe578063bc25cf7714610506578063c45a01551461052c576101a9565b80637ecebe00116100d35780637ecebe001461046557806389afcb441461048b57806395d89b41146104ca578063a9059cbb146104d2576101a9565b80636a6278421461041157806370a08231146104375780637464fc3d1461045d576101a9565b806323b872dd116101665780633644e515116101405780633644e515146103cb578063485cc955146103d35780635909c0d5146104015780635a3d549314610409576101a9565b806323b872dd1461036f57806330adf81f146103a5578063313ce567146103ad576101a9565b8063022c0d9f146101ae57806306fdde031461023c5780630902f1ac146102b9578063095ea7b3146102f15780630dfe16811461033157806318160ddd14610355575b600080fd5b61023a600480360360808110156101c457600080fd5b8135916020810135916001600160a01b0360408301351691908101906080810160608201356401000000008111156101fb57600080fd5b82018360208201111561020d57600080fd5b8035906020019184600183028401116401000000008311171561022f57600080fd5b5090925090506105c3565b005b610244610afb565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027e578181015183820152602001610266565b50505050905090810190601f1680156102ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102c1610b23565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b61031d6004803603604081101561030757600080fd5b506001600160a01b038135169060200135610b4d565b604080519115158252519081900360200190f35b610339610b64565b604080516001600160a01b039092168252519081900360200190f35b61035d610b73565b60408051918252519081900360200190f35b61031d6004803603606081101561038557600080fd5b506001600160a01b03813581169160208101359091169060400135610b79565b61035d610c0d565b6103b5610c31565b6040805160ff9092168252519081900360200190f35b61035d610c36565b61023a600480360360408110156103e957600080fd5b506001600160a01b0381358116916020013516610c3c565b61035d610cba565b61035d610cc0565b61035d6004803603602081101561042757600080fd5b50356001600160a01b0316610cc6565b61035d6004803603602081101561044d57600080fd5b50356001600160a01b031661113c565b61035d61114e565b61035d6004803603602081101561047b57600080fd5b50356001600160a01b0316611154565b6104b1600480360360208110156104a157600080fd5b50356001600160a01b0316611166565b6040805192835260208301919091528051918290030190f35b6102446114f4565b61031d600480360360408110156104e857600080fd5b506001600160a01b038135169060200135611513565b61035d611520565b61023a6004803603602081101561051c57600080fd5b50356001600160a01b0316611526565b610339611692565b6103396116a1565b61023a600480360360e081101561055257600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356116b0565b61035d600480360360408110156105a357600080fd5b506001600160a01b03813581169160200135166118a5565b61023a6118c2565b600c54600114610608576040805162461bcd60e51b815260206004820152600b60248201526a129bd94e881313d0d2d15160aa1b604482015290519081900360640190fd5b6000600c558415158061061b5750600084115b61066c576040805162461bcd60e51b815260206004820152601f60248201527f4a6f653a20494e53554646494349454e545f4f55545055545f414d4f554e5400604482015290519081900360640190fd5b600080610677610b23565b5091509150816001600160701b03168710801561069c5750806001600160701b031686105b6106ed576040805162461bcd60e51b815260206004820152601b60248201527f4a6f653a20494e53554646494349454e545f4c49515549444954590000000000604482015290519081900360640190fd5b60065460075460009182916001600160a01b0391821691908116908916821480159061072b5750806001600160a01b0316896001600160a01b031614155b61076e576040805162461bcd60e51b815260206004820152600f60248201526e4a6f653a20494e56414c49445f544f60881b604482015290519081900360640190fd5b8a1561077f5761077f828a8d611a1e565b891561079057610790818a8c611a1e565b861561084257886001600160a01b031663ee22dd87338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561082957600080fd5b505af115801561083d573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561088857600080fd5b505afa15801561089c573d6000803e3d6000fd5b505050506040513d60208110156108b257600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b1580156108fe57600080fd5b505afa158015610912573d6000803e3d6000fd5b505050506040513d602081101561092857600080fd5b5051925060009150506001600160701b0385168a9003831161094b57600061095a565b89856001600160701b03160383035b9050600089856001600160701b0316038311610977576000610986565b89856001600160701b03160383035b905060008211806109975750600081115b6109e8576040805162461bcd60e51b815260206004820152601e60248201527f4a6f653a20494e53554646494349454e545f494e5055545f414d4f554e540000604482015290519081900360640190fd5b6000610a0a6109f8846003611baf565b610a04876103e8611baf565b90611c12565b90506000610a1c6109f8846003611baf565b9050610a41620f4240610a3b6001600160701b038b8116908b16611baf565b90611baf565b610a4b8383611baf565b1015610a87576040805162461bcd60e51b81526020600482015260066024820152654a6f653a204b60d01b604482015290519081900360640190fd5b5050610a9584848888611c62565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6040518060400160405280600c81526020016b2537b2902628102a37b5b2b760a11b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610b5a338484611e1b565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610bf8576001600160a01b0384166000908152600260209081526040808320338452909152902054610bd39083611c12565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610c03848484611e7d565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610c8c576040805162461bcd60e51b815260206004820152600e60248201526d2537b29d102327a92124a22222a760911b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c54600114610d0d576040805162461bcd60e51b815260206004820152600b60248201526a129bd94e881313d0d2d15160aa1b604482015290519081900360640190fd5b6000600c81905580610d1d610b23565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610d7157600080fd5b505afa158015610d85573d6000803e3d6000fd5b505050506040513d6020811015610d9b57600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610dee57600080fd5b505afa158015610e02573d6000803e3d6000fd5b505050506040513d6020811015610e1857600080fd5b505190506000610e31836001600160701b038716611c12565b90506000610e48836001600160701b038716611c12565b90506000610e568787611f2b565b6000549091508061102d5760055460408051637cd07e4760e01b815290516000926001600160a01b031691637cd07e47916004808301926020929190829003018186803b158015610ea657600080fd5b505afa158015610eba573d6000803e3d6000fd5b505050506040513d6020811015610ed057600080fd5b50519050336001600160a01b0382161415610fab57806001600160a01b03166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b158015610f1e57600080fd5b505afa158015610f32573d6000803e3d6000fd5b505050506040513d6020811015610f4857600080fd5b505199508915801590610f5d57506000198a14155b610fa6576040805162461bcd60e51b81526020600482015260156024820152744261642064657369726564206c697175696469747960581b604482015290519081900360640190fd5b611027565b6001600160a01b03811615611000576040805162461bcd60e51b815260206004820152601660248201527526bab9ba103737ba103430bb329036b4b3b930ba37b960511b604482015290519081900360640190fd5b6110186103e8610a046110138888611baf565b61206b565b995061102760006103e86120bd565b50611070565b61106d6001600160701b0389166110448684611baf565b8161104b57fe5b046001600160701b0389166110608685611baf565b8161106757fe5b04612147565b98505b600089116110af5760405162461bcd60e51b815260040180806020018281038252602281526020018061229a6022913960400191505060405180910390fd5b6110b98a8a6120bd565b6110c586868a8a611c62565b81156110ef576008546110eb906001600160701b0380821691600160701b900416611baf565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c546001146111ae576040805162461bcd60e51b815260206004820152600b60248201526a129bd94e881313d0d2d15160aa1b604482015290519081900360640190fd5b6000600c819055806111be610b23565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561121a57600080fd5b505afa15801561122e573d6000803e3d6000fd5b505050506040513d602081101561124457600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561129257600080fd5b505afa1580156112a6573d6000803e3d6000fd5b505050506040513d60208110156112bc57600080fd5b5051306000908152600160205260408120549192506112db8888611f2b565b600054909150806112ec8487611baf565b816112f357fe5b049a50806113018486611baf565b8161130857fe5b04995060008b11801561131b575060008a115b6113565760405162461bcd60e51b81526004018080602001828103825260228152602001806122786022913960400191505060405180910390fd5b611360308461215f565b61136b878d8d611a1e565b611376868d8c611a1e565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b1580156113bc57600080fd5b505afa1580156113d0573d6000803e3d6000fd5b505050506040513d60208110156113e657600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561143257600080fd5b505afa158015611446573d6000803e3d6000fd5b505050506040513d602081101561145c57600080fd5b5051935061146c85858b8b611c62565b811561149657600854611492906001600160701b0380821691600160701b900416611baf565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b6040518060400160405280600381526020016204a4c560ec1b81525081565b6000610b5a338484611e7d565b6103e881565b600c5460011461156b576040805162461bcd60e51b815260206004820152600b60248201526a129bd94e881313d0d2d15160aa1b604482015290519081900360640190fd5b6000600c55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b039485169490931692611614928592879261160f926001600160701b03169185916370a0823191602480820192602092909190829003018186803b1580156115dd57600080fd5b505afa1580156115f1573d6000803e3d6000fd5b505050506040513d602081101561160757600080fd5b505190611c12565b611a1e565b611688818461160f6008600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156115dd57600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b428410156116f4576040805162461bcd60e51b815260206004820152600c60248201526b129bd94e881156141254915160a21b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa15801561180f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906118455750886001600160a01b0316816001600160a01b0316145b61188f576040805162461bcd60e51b81526020600482015260166024820152754a6f653a20494e56414c49445f5349474e415455524560501b604482015290519081900360640190fd5b61189a898989611e1b565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600c54600114611907576040805162461bcd60e51b815260206004820152600b60248201526a129bd94e881313d0d2d15160aa1b604482015290519081900360640190fd5b6000600c55600654604080516370a0823160e01b81523060048201529051611a17926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561195857600080fd5b505afa15801561196c573d6000803e3d6000fd5b505050506040513d602081101561198257600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156119cf57600080fd5b505afa1580156119e3573d6000803e3d6000fd5b505050506040513d60208110156119f957600080fd5b50516008546001600160701b0380821691600160701b900416611c62565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611acb5780518252601f199092019160209182019101611aac565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611b2d576040519150601f19603f3d011682016040523d82523d6000602084013e611b32565b606091505b5091509150818015611b60575080511580611b605750808060200190516020811015611b5d57600080fd5b50515b611ba8576040805162461bcd60e51b8152602060048201526014602482015273129bd94e881514905394d1915497d1905253115160621b604482015290519081900360640190fd5b5050505050565b6000811580611bca57505080820282828281611bc757fe5b04145b610b5e576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610b5e576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b038411801590611c8057506001600160701b038311155b611cc1576040805162461bcd60e51b815260206004820152600d60248201526c4a6f653a204f564552464c4f5760981b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b90048116820390811615801590611cf157506001600160701b03841615155b8015611d0557506001600160701b03831615155b15611d70578063ffffffff16611d2d85611d1e866121f1565b6001600160e01b031690612203565b600980546001600160e01b03929092169290920201905563ffffffff8116611d5884611d1e876121f1565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260016020526040902054611ea09082611c12565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611ecf9082612228565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7c57600080fd5b505afa158015611f90573d6000803e3d6000fd5b505050506040513d6020811015611fa657600080fd5b5051600b546001600160a01b038216158015945091925090612057578015612052576000611fe36110136001600160701b03888116908816611baf565b90506000611ff08361206b565b90508082111561204f5760006120126120098484611c12565b60005490611baf565b9050600061202b83612025866005611baf565b90612228565b9050600081838161203857fe5b049050801561204b5761204b87826120bd565b5050505b50505b612063565b8015612063576000600b555b505092915050565b600060038211156120ae575080600160028204015b818110156120a85780915060028182858161209757fe5b0401816120a057fe5b049050612080565b506120b8565b81156120b8575060015b919050565b6000546120ca9082612228565b60009081556001600160a01b0383168152600160205260409020546120ef9082612228565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106121565781612158565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546121829082611c12565b6001600160a01b038316600090815260016020526040812091909155546121a99082611c12565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161222057fe5b049392505050565b80820182811015610b5e576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe4a6f653a20494e53554646494349454e545f4c49515549444954595f4255524e45444a6f653a20494e53554646494349454e545f4c49515549444954595f4d494e544544a26469706673582212205c0530d8975d81c05a44dc2110dd0e9eedcced0f1710956008eb001c428ccb0d64736f6c634300060c0033\";\nvar linkReferences = {};\nvar deployedLinkReferences = {};\nvar IJoePair = {\n  _format: _format,\n  contractName: contractName,\n  sourceName: sourceName,\n  abi: abi,\n  bytecode: bytecode,\n  deployedBytecode: deployedBytecode,\n  linkReferences: linkReferences,\n  deployedLinkReferences: deployedLinkReferences\n};\nvar TOKEN_DECIMALS_CACHE = {};\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\n\nvar Fetcher = /*#__PURE__*/function () {\n  /**\r\n   * Cannot be constructed.\r\n   */\n  function Fetcher() {}\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\n\n\n  Fetcher.fetchTokenData = function fetchTokenData(chainId, address, provider, symbol, name) {\n    try {\n      var _TOKEN_DECIMALS_CACHE, _TOKEN_DECIMALS_CACHE2;\n\n      var _temp3 = function _temp3(parsedDecimals) {\n        return new Token(chainId, address, parsedDecimals, symbol, name);\n      };\n\n      if (provider === undefined) provider = getDefaultProvider(getNetwork(chainId));\n\n      var _temp4 = typeof ((_TOKEN_DECIMALS_CACHE = TOKEN_DECIMALS_CACHE) === null || _TOKEN_DECIMALS_CACHE === void 0 ? void 0 : (_TOKEN_DECIMALS_CACHE2 = _TOKEN_DECIMALS_CACHE[chainId]) === null || _TOKEN_DECIMALS_CACHE2 === void 0 ? void 0 : _TOKEN_DECIMALS_CACHE2[address]) === 'number';\n\n      return Promise.resolve(_temp4 ? _temp3(TOKEN_DECIMALS_CACHE[chainId][address]) : Promise.resolve(new Contract(address, ERC20, provider).decimals().then(function (decimals) {\n        var _TOKEN_DECIMALS_CACHE3, _extends2, _extends3;\n\n        TOKEN_DECIMALS_CACHE = _extends({}, TOKEN_DECIMALS_CACHE, (_extends3 = {}, _extends3[chainId] = _extends({}, (_TOKEN_DECIMALS_CACHE3 = TOKEN_DECIMALS_CACHE) === null || _TOKEN_DECIMALS_CACHE3 === void 0 ? void 0 : _TOKEN_DECIMALS_CACHE3[chainId], (_extends2 = {}, _extends2[address] = decimals, _extends2)), _extends3));\n        return decimals;\n      })).then(_temp3));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\n  ;\n\n  Fetcher.fetchPairData = function fetchPairData(tokenA, tokenB, provider) {\n    try {\n      if (provider === undefined) provider = getDefaultProvider(getNetwork(tokenA.chainId));\n      !(tokenA.chainId === tokenB.chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n      var address = Pair.getAddress(tokenA, tokenB, tokenA.chainId);\n      return Promise.resolve(new Contract(address, IJoePair.abi, provider).getReserves()).then(function (_ref) {\n        var reserves0 = _ref[0],\n            reserves1 = _ref[1];\n        var balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0];\n        return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]), tokenA.chainId);\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return Fetcher;\n}();\n\nvar _BLOCKS_SUBGRAPH, _EXCHANGE_SUBGRAPH, _MASTERCHEF_SUBGRAPH, _DEXCANDLES_SUBGRAPH, _BAR_SUBGRAPH, _LENDING_SUBGRAPH, _ROCKET_SUBGRAPH;\n\nvar ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';\nvar BLOCKS_SUBGRAPH = (_BLOCKS_SUBGRAPH = {}, _BLOCKS_SUBGRAPH[ChainId.RINKEBY] = 'https://api.thegraph.com/subgraphs/name/blocklytics/ethereum-blocks', _BLOCKS_SUBGRAPH[ChainId.FUJI] = ZERO_ADDRESS, _BLOCKS_SUBGRAPH[ChainId.AVALANCHE] = 'https://thegraph.com/explorer/subgraph/dasconnor/avalanche-blocks', _BLOCKS_SUBGRAPH);\nvar EXCHANGE_SUBGRAPH = (_EXCHANGE_SUBGRAPH = {}, _EXCHANGE_SUBGRAPH[ChainId.RINKEBY] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/exchange-rinkeby-ii', _EXCHANGE_SUBGRAPH[ChainId.FUJI] = ZERO_ADDRESS, _EXCHANGE_SUBGRAPH[ChainId.AVALANCHE] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/exchange', _EXCHANGE_SUBGRAPH);\nvar MASTERCHEF_SUBGRAPH = (_MASTERCHEF_SUBGRAPH = {}, _MASTERCHEF_SUBGRAPH[ChainId.RINKEBY] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/masterchefv2-rinkeby', _MASTERCHEF_SUBGRAPH[ChainId.FUJI] = ZERO_ADDRESS, _MASTERCHEF_SUBGRAPH[ChainId.AVALANCHE] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/masterchefv2', _MASTERCHEF_SUBGRAPH);\nvar DEXCANDLES_SUBGRAPH = (_DEXCANDLES_SUBGRAPH = {}, _DEXCANDLES_SUBGRAPH[ChainId.RINKEBY] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dexcandles-rinkeby-ii', _DEXCANDLES_SUBGRAPH[ChainId.FUJI] = ZERO_ADDRESS, _DEXCANDLES_SUBGRAPH[ChainId.AVALANCHE] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dexcandles', _DEXCANDLES_SUBGRAPH);\nvar BAR_SUBGRAPH = (_BAR_SUBGRAPH = {}, _BAR_SUBGRAPH[ChainId.RINKEBY] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/bar-rinkeby-ii', _BAR_SUBGRAPH[ChainId.FUJI] = ZERO_ADDRESS, _BAR_SUBGRAPH[ChainId.AVALANCHE] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/bar', _BAR_SUBGRAPH);\nvar LENDING_SUBGRAPH = (_LENDING_SUBGRAPH = {}, _LENDING_SUBGRAPH[ChainId.RINKEBY] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/lending-rinkeby', _LENDING_SUBGRAPH[ChainId.FUJI] = ZERO_ADDRESS, _LENDING_SUBGRAPH[ChainId.AVALANCHE] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/lending', _LENDING_SUBGRAPH);\nvar ROCKET_SUBGRAPH = (_ROCKET_SUBGRAPH = {}, _ROCKET_SUBGRAPH[ChainId.RINKEBY] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/rocket-rinkeby', _ROCKET_SUBGRAPH[ChainId.FUJI] = ZERO_ADDRESS, _ROCKET_SUBGRAPH[ChainId.AVALANCHE] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/rocket', _ROCKET_SUBGRAPH);\nexport { BAR_ADDRESS, BAR_SUBGRAPH, BLOCKS_SUBGRAPH, BORINGDASHBOARD_ADDRESS, BORINGHELPER_ADDRESS, BORINGHELPER_MCV3_ADDRESS, BORINGTOKENSCANNER_ADDRESS, CAVAX, ChainId, Currency, CurrencyAmount, DEXCANDLES_SUBGRAPH, EXCHANGE_SUBGRAPH, FACTORY_ADDRESS, FARMLENS_ADDRESS, Fetcher, Fraction, INIT_CODE_HASH, InsufficientInputAmountError, InsufficientReservesError, JAVAX_ADDRESS, JOELENSVIEW_ADDRESS, JOELENS_ADDRESS, JOE_ADDRESS, LAUNCH_EVENT_LENS_ADDRESS, LENDING_SUBGRAPH, LOCKING_WRAPPER_ADDRESS, MAKER_ADDRESS, MASTERCHEF_ADDRESS, MASTERCHEF_SUBGRAPH, MASTERCHEF_V3_ADDRESS, MAXIMILLION_ADDRESS, MINIMUM_LIQUIDITY, Pair, Percent, Price, ROCKET_JOE_STAKING_ADDRESS, ROCKET_JOE_TOKEN_ADDRESS, ROCKET_SUBGRAPH, ROLL_ADDRESS, ROUTER_ADDRESS, Rounding, Route, Router, Token, TokenAmount, Trade, TradeType, UNITROLLER_ADDRESS, WAVAX, ZAP_ADDRESS, currencyEquals, inputOutputComparator, tradeComparator };","map":{"version":3,"sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts","../src/subgraphs.ts"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","JOE_ADDRESS","MASTERCHEF_ADDRESS","MASTERCHEF_V3_ADDRESS","BAR_ADDRESS","ZAP_ADDRESS","ROUTER_ADDRESS","MAKER_ADDRESS","ROLL_ADDRESS","BORINGHELPER_ADDRESS","BORINGHELPER_MCV3_ADDRESS","BORINGTOKENSCANNER_ADDRESS","BORINGDASHBOARD_ADDRESS","LOCKING_WRAPPER_ADDRESS","ROCKET_JOE_TOKEN_ADDRESS","LAUNCH_EVENT_LENS_ADDRESS","ROCKET_JOE_STAKING_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","UNITROLLER_ADDRESS","JOELENS_ADDRESS","JOELENSVIEW_ADDRESS","FARMLENS_ADDRESS","JAVAX_ADDRESS","MAXIMILLION_ADDRESS","CAN_SET_PROTOTYPE","InsufficientReservesError","Object","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","validateAndParseAddress","address","checksummedAddress","getAddress","parseBigintIsh","bigintIsh","sqrt","y","z","x","sortedInsert","items","add","maxSize","comparator","isFull","lo","hi","mid","Currency","CAVAX","Token","equals","other","sortsBefore","currencyEquals","currencyA","currencyB","WAVAX","Decimal","toFormat","Big","toSignificantRounding","toFixedRounding","Fraction","denominator","invert","otherParsed","subtract","lessThan","equalTo","greaterThan","multiply","divide","toSignificant","format","groupSeparator","rounding","ROUND_HALF_UP","Number","significantDigits","precision","quotient","toFixed","decimalPlaces","CurrencyAmount","parsedAmount","currency","ROUND_DOWN","decimals","toExact","TokenAmount","Price","prices","i","pair","route","accumulator","baseCurrency","quoteCurrency","fraction","quote","currencyAmount","PAIR_ADDRESS_CACHE","Pair","tokens","tokenA","getCreate2Address","keccak256","pack","tokenAmounts","tokenAmountB","involvesToken","token","priceOf","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","numerator","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","pairs","input","output","path","currentInput","_100_PERCENT","Percent","exactQuote","midPrice","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","Trade","amounts","nextPairs","tradeType","amount","wrappedAmount","nextPair","computePriceImpact","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","maxNumResults","maxHops","currentPairs","originalAmountIn","currencyAmountIn","bestTrades","chainId","currencyOut","amountIn","tokenOut","wrappedCurrency","amountOut","error","pairsExcludingThisPair","originalAmountOut","currencyAmountOut","currencyIn","tokenIn","ZERO_HEX","Router","etherIn","trade","etherOut","options","to","toHex","deadline","Math","useFeeOnTransfer","Boolean","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","provider","getDefaultProvider","getNetwork","parsedDecimals","tokenB","reserves0","reserves1","IJoePair","balances","ZERO_ADDRESS","BLOCKS_SUBGRAPH","EXCHANGE_SUBGRAPH","MASTERCHEF_SUBGRAPH","DEXCANDLES_SUBGRAPH","BAR_SUBGRAPH","LENDING_SUBGRAPH","ROCKET_SUBGRAPH"],"mappings":"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","sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | bigint | string\r\n\r\nexport enum ChainId {\r\n  RINKEBY = 4,\r\n  FUJI = 43113,\r\n  AVALANCHE = 43114\r\n}\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\n/**\r\n * DEX SDK\r\n */\r\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0x86f83be9770894d8e46301b12E88e14AdC6cdb5F',\r\n  [ChainId.FUJI]: '0x7eeccb3028870540EEc3D88C2259506f2d34fEE0',\r\n  [ChainId.AVALANCHE]: '0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10'\r\n}\r\n\r\nexport const JOE_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0xce347E069B68C53A9ED5e7DA5952529cAF8ACCd4',\r\n  [ChainId.FUJI]: '0xcee9d937E3627E55F08240072D63f32c3a60fF2D',\r\n  [ChainId.AVALANCHE]: '0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd'\r\n}\r\n\r\nexport const MASTERCHEF_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0x1F51b7697A1919cF301845c93D4843FD620ad7Cc',\r\n  [ChainId.FUJI]: '0x2d388F47c3Ae5CC0C7F8ad73296B208cfaCd35ae',\r\n  [ChainId.AVALANCHE]: '0xd6a4F121CA35509aF06A0Be99093d08462f53052'\r\n}\r\n\r\nexport const MASTERCHEF_V3_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0xEedf119022F1Bb5F63676BbE855c82151B7198AF',\r\n  [ChainId.FUJI]: '0x0000000000000000000000000000000000000000',\r\n  [ChainId.AVALANCHE]: '0x188bED1968b795d5c9022F6a0bb5931Ac4c18F00'\r\n}\r\n\r\nexport const BAR_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0x33A86aFC0f728882F48E5105bc98758b3eAe2081',\r\n  [ChainId.FUJI]: '0x171B28d39De22EF001029117F3d241fF78c7DC5C',\r\n  [ChainId.AVALANCHE]: '0x57319d41F71E81F3c65F2a47CA4e001EbAFd4F33'\r\n}\r\n\r\nexport const ZAP_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0x70c949152D2AC84FbB809228606db4654773D994',\r\n  [ChainId.FUJI]: '0x5BBFA5f49EC557eABA9427Ac434F21b69113Fe20',\r\n  [ChainId.AVALANCHE]: '0x2C7B8e971c704371772eDaf16e0dB381A8D02027'\r\n}\r\n\r\nexport const ROUTER_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0x7E2528476b14507f003aE9D123334977F5Ad7B14',\r\n  [ChainId.FUJI]: '0x5db0735cf88F85E78ed742215090c465979B5006',\r\n  [ChainId.AVALANCHE]: '0x60aE616a2155Ee3d9A68541Ba4544862310933d4'\r\n}\r\n\r\nexport const MAKER_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0xbEFE1d0756Da706B3F0EbaEa7b4ae10D0AdF2f3F',\r\n  [ChainId.FUJI]: '0x0529719e33AA2f15c13b12be01D7E876454Caf02',\r\n  [ChainId.AVALANCHE]: '0x861726BFE27931A4E22a7277bDe6cb8432b65856'\r\n}\r\n\r\nexport const ROLL_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0xD6344FF98d12adD998cBcfaC16A215396e9bCb8c',\r\n  [ChainId.FUJI]: '0x41d5f5F66e4cEd197Ff273308A1c194E9E249f4F',\r\n  [ChainId.AVALANCHE]: '0xacFF0fBf56bAeb9Ef677DE19ADED8F7A950BCb58'\r\n}\r\n\r\nexport const BORINGHELPER_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0x73B35Bab1aFD869E3738464b3bE97999e80E8458',\r\n  [ChainId.FUJI]: '0xD28be693a573a26f50195213613EC893Ad5c4460',\r\n  [ChainId.AVALANCHE]: '0x1dd4D86180EEe39ac4fB35ECa67CACF608Ab5741'\r\n}\r\n\r\nexport const BORINGHELPER_MCV3_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0x11f89aE6DA4aB5D0C518A41F9424c5241A3D57A3',\r\n  [ChainId.FUJI]: '0x0000000000000000000000000000000000000000',\r\n  [ChainId.AVALANCHE]: '0xce63ECA0C8A2084C1BaEcE7737dB88f10c412c5E'\r\n}\r\n\r\nexport const BORINGTOKENSCANNER_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0xdd5C40b5f0f5Df9c8BF0aA4703d73867ea7f022D',\r\n  [ChainId.FUJI]: '0xD28be693a573a26f50195213613EC893Ad5c4460',\r\n  [ChainId.AVALANCHE]: '0x5cFcA5b2149A20A166508B28e5FCFA65c44c6B9c'\r\n}\r\n\r\nexport const BORINGDASHBOARD_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0xeC208ef9F8aEDbbF28722286E334a3939acEA646',\r\n  [ChainId.FUJI]: '0xD28be693a573a26f50195213613EC893Ad5c4460',\r\n  [ChainId.AVALANCHE]: '0x1Af353148F2316487b5311Fcd522c037842D232c'\r\n}\r\n\r\nexport const LOCKING_WRAPPER_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0x60CB8E40B815fa7FF24Ab8a0603BF0afAcb49Cc0',\r\n  [ChainId.FUJI]: '0x0000000000000000000000000000000000000000',\r\n  [ChainId.AVALANCHE]: '0xDc3B37B5F0Fe5d3f8b8701a3F8d81A02EE8A1E1a'\r\n}\r\n\r\nexport const ROCKET_JOE_TOKEN_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0x3Be901d05584dc7900461a1b538ce24F7989cD65',\r\n  [ChainId.FUJI]: '0x0000000000000000000000000000000000000000',\r\n  [ChainId.AVALANCHE]: '0x5483ce08659fABF0277f9314868Cc4f78687BD08'\r\n}\r\n\r\nexport const LAUNCH_EVENT_LENS_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0xfa31cDA014bA4e1A2CfF02EA94a7B9E6DB6BcbC5',\r\n  [ChainId.FUJI]: '0x0000000000000000000000000000000000000000',\r\n  [ChainId.AVALANCHE]: '0x039AA5d3FC07f6f265656793A8c437055b653d68'\r\n}\r\n\r\nexport const ROCKET_JOE_STAKING_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0xc1108bda59F2A66843833d5B801bF40C966d34ca',\r\n  [ChainId.FUJI]: '0x0000000000000000000000000000000000000000',\r\n  [ChainId.AVALANCHE]: '0x102D195C3eE8BF8A9A89d63FB3659432d3174d81'\r\n}\r\n\r\nexport const INIT_CODE_HASH = '0x0bbca9af0511ad1a1da383135cf3a8d2ac620e549ef9f6ae3a4c33c2fed0af91'\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const _997 = JSBI.BigInt(997)\r\nexport const _1000 = JSBI.BigInt(1000)\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n}\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n}\r\n\r\n/**\r\n * Lending SDK\r\n */\r\n\r\nexport const UNITROLLER_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0x5b0a2Fa14808E34C5518E19f0DBc39F61d080B11',\r\n  [ChainId.FUJI]: '0x0000000000000000000000000000000000000000',\r\n  [ChainId.AVALANCHE]: '0xdc13687554205E5b89Ac783db14bb5bba4A1eDaC'\r\n}\r\n\r\nexport const JOELENS_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0x4F101798dd4AF8A2A8325F4C54C195a61C59Dc62',\r\n  [ChainId.FUJI]: '0x0000000000000000000000000000000000000000',\r\n  [ChainId.AVALANCHE]: '0xFDF50FEa3527FaD31Fa840B748FD3694aE8a47cc'\r\n}\r\n\r\nexport const JOELENSVIEW_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0x51fBdc8FCa72CeF1E1b558DB0c502e874DB5602A',\r\n  [ChainId.FUJI]: '0x0000000000000000000000000000000000000000',\r\n  [ChainId.AVALANCHE]: '0x0000000000000000000000000000000000000000'\r\n}\r\n\r\nexport const FARMLENS_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0x926E833c27284f7f633E461FcE6Dd17ccb2030e1',\r\n  [ChainId.FUJI]: '0x0000000000000000000000000000000000000000',\r\n  [ChainId.AVALANCHE]: '0xc1b83cE1573984Dcf4115e983F9c28748a0F350E'\r\n}\r\n\r\nexport const JAVAX_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0x0444dcF838055493519F26021dE63Afa72EEe0D2',\r\n  [ChainId.FUJI]: '0x0000000000000000000000000000000000000000',\r\n  [ChainId.AVALANCHE]: '0xC22F01ddc8010Ee05574028528614634684EC29e'\r\n}\r\n\r\nexport const MAXIMILLION_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.RINKEBY]: '0xC48B0159d3e7F240ac76cc3Ce39dF62fCd4656b0',\r\n  [ChainId.FUJI]: '0x0000000000000000000000000000000000000000',\r\n  [ChainId.AVALANCHE]: '0xe5cDdAFd0f7Af3DEAf4bd213bBaee7A5927AB7E7'\r\n}\r\n","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\nimport JSBI from 'jsbi'\r\nimport { getAddress } from '@ethersproject/address'\r\n\r\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\r\n  return bigintIsh instanceof JSBI\r\n    ? bigintIsh\r\n    : typeof bigintIsh === 'bigint'\r\n    ? JSBI.BigInt(bigintIsh.toString())\r\n    : JSBI.BigInt(bigintIsh)\r\n}\r\n\r\n// mock the on-chain sqrt function\r\nexport function sqrt(y: JSBI): JSBI {\r\n  validateSolidityTypeInstance(y, SolidityType.uint256)\r\n  let z: JSBI = ZERO\r\n  let x: JSBI\r\n  if (JSBI.greaterThan(y, THREE)) {\r\n    z = y\r\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\r\n    while (JSBI.lessThan(x, z)) {\r\n      z = x\r\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\r\n    }\r\n  } else if (JSBI.notEqual(y, ZERO)) {\r\n    z = ONE\r\n  }\r\n  return z\r\n}\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nimport { SolidityType } from '../constants'\r\nimport { validateSolidityTypeInstance } from '../utils'\r\n\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport class Currency {\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n  public static readonly CAVAX: Currency = new Currency(18, 'AVAX', 'Avalanche')\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n}\r\n\r\nconst CAVAX = Currency.CAVAX\r\nexport { CAVAX }\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId } from '../constants'\r\nimport { validateAndParseAddress } from '../utils'\r\nimport { Currency } from './currency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends Currency {\r\n  public readonly chainId: ChainId\r\n  public readonly address: string\r\n\r\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n\r\nexport const WAVAX = {\r\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WAVAX', 'Wrapped AVAX'), // This is actually WETH\r\n  [ChainId.FUJI]: new Token(ChainId.FUJI,'0xd00ae08403B9bbb9124bB305C09058E32C39A48c',18,'WAVAX','Wrapped AVAX'),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE,'0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',18,'WAVAX','Wrapped AVAX')\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { ONE } from '../../constants'\r\nimport { parseBigintIsh } from '../../utils'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\r\n    this.numerator = parseBigintIsh(numerator)\r\n    this.denominator = parseBigintIsh(denominator)\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n}\r\n","import { currencyEquals } from '../token'\r\nimport { Currency, CAVAX } from '../currency'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Big from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\r\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\r\nimport { Fraction } from './fraction'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency\r\n\r\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param amount ether amount in wei\r\n   */\r\n  public static ether(amount: BigintIsh): CurrencyAmount {\r\n    return new CurrencyAmount(CAVAX, amount)\r\n  }\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  protected constructor(currency: Currency, amount: BigintIsh) {\r\n    const parsedAmount = parseBigintIsh(amount)\r\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\r\n\r\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\r\n    this.currency = currency\r\n  }\r\n\r\n  public get raw(): JSBI {\r\n    return this.numerator\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\r\n  }\r\n}\r\n","import { CurrencyAmount } from './currencyAmount'\r\nimport { Token } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh } from '../../constants'\r\n\r\nexport class TokenAmount extends CurrencyAmount {\r\n  public readonly token: Token\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  public constructor(token: Token, amount: BigintIsh) {\r\n    super(token, amount)\r\n    this.token = token\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n}\r\n","import { Token } from '../token'\r\nimport { TokenAmount } from './tokenAmount'\r\nimport { currencyEquals } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh, Rounding, TEN } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Route } from '../route'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseCurrency: Currency // input i.e. denominator\r\n  public readonly quoteCurrency: Currency // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  public static fromRoute(route: Route): Price {\r\n    const prices: Price[] = []\r\n    for (const [i, pair] of route.pairs.entries()) {\r\n      prices.push(\r\n        route.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\r\n      )\r\n    }\r\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n  }\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  public multiply(other: Price): Price {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  // performs floor division on overflow\r\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\r\n    if (this.quoteCurrency instanceof Token) {\r\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\r\n    }\r\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nimport {\r\n  BigintIsh,\r\n  FACTORY_ADDRESS,\r\n  INIT_CODE_HASH,\r\n  MINIMUM_LIQUIDITY,\r\n  ZERO,\r\n  ONE,\r\n  FIVE,\r\n  _997,\r\n  _1000,\r\n  ChainId\r\n} from '../constants'\r\nimport { sqrt, parseBigintIsh } from '../utils'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\r\nimport { Token } from './token'\r\n\r\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token, chainId: ChainId): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PAIR_ADDRESS_CACHE = {\r\n        ...PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            FACTORY_ADDRESS[chainId],\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            INIT_CODE_HASH\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, chainId: ChainId) {\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, chainId),\r\n      18,\r\n      'JLP',\r\n      'Joe Liquidity'\r\n    )\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price {\r\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price {\r\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].token\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].token\r\n  }\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount, chainId: ChainId): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.token)\r\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\r\n    const outputAmount = new TokenAmount(\r\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), chainId)]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: TokenAmount, chainId: ChainId): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.raw, ZERO) ||\r\n      JSBI.equal(this.reserve1.raw, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.token)\r\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\r\n    const inputAmount = new TokenAmount(\r\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), chainId)]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: TokenAmount,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount\r\n  ): TokenAmount {\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\r\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return new TokenAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: TokenAmount,\r\n    liquidity: TokenAmount,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: TokenAmount\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = parseBigintIsh(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return new TokenAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\r\n    )\r\n  }\r\n}\r\n","import { ChainId } from '../constants'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { Currency, CAVAX } from './currency'\r\nimport { Token, WAVAX } from './token'\r\nimport { Pair } from './pair'\r\nimport { Price } from './fractions/price'\r\n\r\nexport class Route {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: Currency\r\n  public readonly output: Currency\r\n  public readonly midPrice: Price\r\n\r\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n    invariant(\r\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\r\n        (input === CAVAX && pairs[0].involvesToken(WAVAX[pairs[0].chainId])),\r\n      'INPUT'\r\n    )\r\n    invariant(\r\n      typeof output === 'undefined' ||\r\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\r\n        (output === CAVAX && pairs[pairs.length - 1].involvesToken(WAVAX[pairs[0].chainId])),\r\n      'OUTPUT'\r\n    )\r\n\r\n    const path: Token[] = [input instanceof Token ? input : WAVAX[pairs[0].chainId]]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.midPrice = Price.fromRoute(this)\r\n    this.input = input\r\n    this.output = output ?? path[path.length - 1]\r\n  }\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Rounding, _100 } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst _100_PERCENT = new Fraction(_100)\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\r\nimport { sortedInsert } from '../utils'\r\nimport { Currency, CAVAX } from './currency'\r\nimport { CurrencyAmount } from './fractions/currencyAmount'\r\nimport { Fraction } from './fractions/fraction'\r\nimport { Percent } from './fractions/percent'\r\nimport { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport { Pair } from './pair'\r\nimport { Route } from './route'\r\nimport { currencyEquals, Token, WAVAX } from './token'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\r\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\r\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\r\n  return new Percent(slippage.numerator, slippage.denominator)\r\n}\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput {\r\n  readonly inputAmount: CurrencyAmount\r\n  readonly outputAmount: CurrencyAmount\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator(a: Trade, b: Trade) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\r\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\r\n  if (currencyAmount.currency === CAVAX) return new TokenAmount(WAVAX[chainId], currencyAmount.raw)\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n  if (currency instanceof Token) return currency\r\n  if (currency === CAVAX) return WAVAX[chainId]\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  public readonly nextMidPrice: Price\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  public readonly chainId: ChainId\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn(route: Route, amountIn: CurrencyAmount, chainId: ChainId): Trade {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT, chainId)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut(route: Route, amountOut: CurrencyAmount, chainId: ChainId): Trade {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT, chainId)\r\n  }\r\n\r\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType, chainId: ChainId) {\r\n    const amounts: TokenAmount[] = new Array(route.path.length)\r\n    const nextPairs: Pair[] = new Array(route.pairs.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\r\n      amounts[0] = wrappedAmount(amount, route.chainId)\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i], chainId)\r\n        amounts[i + 1] = outputAmount\r\n        nextPairs[i] = nextPair\r\n      }\r\n    } else {\r\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\r\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i], chainId)\r\n        amounts[i - 1] = inputAmount\r\n        nextPairs[i - 1] = nextPair\r\n      }\r\n    }\r\n\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n    this.inputAmount =\r\n      tradeType === TradeType.EXACT_INPUT\r\n        ? amount\r\n        : route.input === CAVAX\r\n        ? CurrencyAmount.ether(amounts[0].raw)\r\n        : amounts[0]\r\n    this.outputAmount =\r\n      tradeType === TradeType.EXACT_OUTPUT\r\n        ? amount\r\n        : route.output === CAVAX\r\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\r\n        : amounts[amounts.length - 1]\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.raw,\r\n      this.outputAmount.raw\r\n    )\r\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n    this.chainId = chainId\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.raw).quotient\r\n      return this.outputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\r\n      return this.inputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount,\r\n    currencyOut: Currency,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountIn instanceof TokenAmount\r\n        ? currencyAmountIn.token.chainId\r\n        : currencyOut instanceof Token\r\n        ? currencyOut.chainId\r\n        : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\r\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: TokenAmount\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn, chainId)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.token.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\r\n            originalAmountIn,\r\n            TradeType.EXACT_INPUT,\r\n            chainId\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          amountOut,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          originalAmountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut(\r\n    pairs: Pair[],\r\n    currencyIn: Currency,\r\n    currencyAmountOut: CurrencyAmount,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountOut instanceof TokenAmount\r\n        ? currencyAmountOut.token.chainId\r\n        : currencyIn instanceof Token\r\n        ? currencyIn.chainId\r\n        : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\r\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: TokenAmount\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut, chainId)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.token.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\r\n            originalAmountOut,\r\n            TradeType.EXACT_OUTPUT,\r\n            chainId\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          amountIn,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          originalAmountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { TradeType } from './constants'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './utils'\r\nimport { CurrencyAmount, CAVAX, Percent, Trade } from './entities'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount) {\r\n  return `0x${currencyAmount.raw.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency === CAVAX\r\n    const etherOut = trade.outputAmount.currency === CAVAX\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const path: string[] = trade.route.path.map(token => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactAVAXForTokensSupportingFeeOnTransferTokens' : 'swapExactAVAXForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForAVAXSupportingFeeOnTransferTokens' : 'swapExactTokensForAVAX'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapAVAXForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactAVAX'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value\r\n    }\r\n  }\r\n}\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { getNetwork } from '@ethersproject/networks'\r\nimport { getDefaultProvider } from '@ethersproject/providers'\r\nimport { TokenAmount } from './entities/fractions/tokenAmount'\r\nimport { Pair } from './entities/pair'\r\nimport invariant from 'tiny-invariant'\r\nimport ERC20 from './abis/ERC20.json'\r\nimport IJoePair from './abis/JoePair.json'\r\nimport { ChainId } from './constants'\r\nimport { Token } from './entities/token'\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {}\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    chainId: ChainId,\r\n    address: string,\r\n    provider = getDefaultProvider(getNetwork(chainId)),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals =\r\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\r\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\r\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\r\n            TOKEN_DECIMALS_CACHE = {\r\n              ...TOKEN_DECIMALS_CACHE,\r\n              [chainId]: {\r\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\r\n                [address]: decimals\r\n              }\r\n            }\r\n            return decimals\r\n          })\r\n    return new Token(chainId, address, parsedDecimals, symbol, name)\r\n  }\r\n\r\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<Pair> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\r\n    const address = Pair.getAddress(tokenA, tokenB, tokenA.chainId)\r\n    const [reserves0, reserves1] = await new Contract(address, IJoePair.abi, provider).getReserves()\r\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\r\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]), tokenA.chainId)\r\n  }\r\n}\r\n","import { ChainId } from './constants'\r\n\r\nconst ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\r\n\r\nexport const BLOCKS_SUBGRAPH: {[chainId in ChainId]: string } = {\r\n    [ChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/blocklytics/ethereum-blocks', \r\n    [ChainId.FUJI]: ZERO_ADDRESS,\r\n    [ChainId.AVALANCHE]: 'https://thegraph.com/explorer/subgraph/dasconnor/avalanche-blocks'\r\n}\r\n\r\nexport const EXCHANGE_SUBGRAPH: {[chainId in ChainId]: string } = {\r\n    [ChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/exchange-rinkeby-ii', \r\n    [ChainId.FUJI]: ZERO_ADDRESS,\r\n    [ChainId.AVALANCHE]: 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/exchange'\r\n}\r\n\r\nexport const MASTERCHEF_SUBGRAPH: {[chainId in ChainId]: string } = {\r\n    [ChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/masterchefv2-rinkeby', \r\n    [ChainId.FUJI]: ZERO_ADDRESS,\r\n    [ChainId.AVALANCHE]: 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/masterchefv2'\r\n}\r\n\r\nexport const DEXCANDLES_SUBGRAPH: {[chainId in ChainId]: string } = {\r\n    [ChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dexcandles-rinkeby-ii', \r\n    [ChainId.FUJI]: ZERO_ADDRESS,\r\n    [ChainId.AVALANCHE]: 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dexcandles'\r\n}\r\n\r\nexport const BAR_SUBGRAPH: {[chainId in ChainId]: string } = {\r\n    [ChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/bar-rinkeby-ii', \r\n    [ChainId.FUJI]: ZERO_ADDRESS,\r\n    [ChainId.AVALANCHE]: 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/bar'\r\n}\r\n\r\nexport const LENDING_SUBGRAPH: {[chainId in ChainId]: string } = {\r\n    [ChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/lending-rinkeby', \r\n    [ChainId.FUJI]: ZERO_ADDRESS,\r\n    [ChainId.AVALANCHE]: 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/lending'\r\n}\r\n\r\nexport const ROCKET_SUBGRAPH: {[chainId in ChainId]: string } = {\r\n    [ChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/rocket-rinkeby', \r\n    [ChainId.FUJI]: ZERO_ADDRESS,\r\n    [ChainId.AVALANCHE]: 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/rocket'\r\n}\r\n"]},"metadata":{},"sourceType":"module"}