{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers'; // import ERC20 from '../tomb-finance/ERC20';\n\nimport useTombFinance from './useTombFinance'; // import config from '../config';\n\nconst useBondsPurchasable = () => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n  useEffect(() => {\n    async function fetchBondsPurchasable() {\n      try {\n        setBalance(await tombFinance.getBondsPurchasable());\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    fetchBondsPurchasable();\n  }, [setBalance, tombFinance]);\n  return balance;\n};\n\nexport default useBondsPurchasable;","map":{"version":3,"sources":["C:/Users/ali_9/Desktop/StrawBerry_UI/src/hooks/useBondsPurchasable.ts"],"names":["useEffect","useState","BigNumber","useTombFinance","useBondsPurchasable","balance","setBalance","from","tombFinance","fetchBondsPurchasable","getBondsPurchasable","err","console","error"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,QAA1B,C,CACA;;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CACA;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAChC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAACC,SAAS,CAACK,IAAV,CAAe,CAAf,CAAD,CAAtC;AACA,QAAMC,WAAW,GAAGL,cAAc,EAAlC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeS,qBAAf,GAAuC;AACnC,UAAI;AACAH,QAAAA,UAAU,CAAC,MAAME,WAAW,CAACE,mBAAZ,EAAP,CAAV;AACH,OAFD,CAGA,OAAMC,GAAN,EAAW;AACPC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACF;;AACHF,IAAAA,qBAAqB;AACtB,GAVQ,EAUN,CAACH,UAAD,EAAaE,WAAb,CAVM,CAAT;AAYA,SAAOH,OAAP;AACD,CAjBD;;AAmBA,eAAeD,mBAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\n// import ERC20 from '../tomb-finance/ERC20';\nimport useTombFinance from './useTombFinance';\n// import config from '../config';\n\nconst useBondsPurchasable = () => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchBondsPurchasable() {\n        try {\n            setBalance(await tombFinance.getBondsPurchasable());\n        }\n        catch(err) {\n            console.error(err);\n        }\n      }\n    fetchBondsPurchasable();\n  }, [setBalance, tombFinance]);\n\n  return balance;\n};\n\nexport default useBondsPurchasable;\n"]},"metadata":{},"sourceType":"module"}