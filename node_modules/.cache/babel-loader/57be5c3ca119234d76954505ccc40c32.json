{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport useTombFinance from './../useTombFinance';\nimport useRefresh from '../useRefresh';\n\nconst useWithdrawCheck = () => {\n  const [canWithdraw, setCanWithdraw] = useState(false);\n  const tombFinance = useTombFinance();\n  const {\n    slowRefresh\n  } = useRefresh();\n  const isUnlocked = tombFinance === null || tombFinance === void 0 ? void 0 : tombFinance.isUnlocked;\n  useEffect(() => {\n    async function canUserWithdraw() {\n      try {\n        setCanWithdraw(await tombFinance.canUserUnstakeFromMasonry());\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    if (isUnlocked) {\n      canUserWithdraw();\n    }\n  }, [isUnlocked, tombFinance, slowRefresh]);\n  return canWithdraw;\n};\n\nexport default useWithdrawCheck;","map":{"version":3,"sources":["C:/Users/ali_9/Desktop/StrawBerry_UI/src/hooks/masonry/useWithdrawCheck.ts"],"names":["useEffect","useState","useTombFinance","useRefresh","useWithdrawCheck","canWithdraw","setCanWithdraw","tombFinance","slowRefresh","isUnlocked","canUserWithdraw","canUserUnstakeFromMasonry","err","console","error"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,UAAP,MAAuB,eAAvB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAMM,WAAW,GAAGL,cAAc,EAAlC;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAkBL,UAAU,EAAlC;AACA,QAAMM,UAAU,GAAGF,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEE,UAAhC;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeU,eAAf,GAAiC;AAC/B,UAAI;AACFJ,QAAAA,cAAc,CAAC,MAAMC,WAAW,CAACI,yBAAZ,EAAP,CAAd;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF;;AACD,QAAIH,UAAJ,EAAgB;AACdC,MAAAA,eAAe;AAChB;AACF,GAXQ,EAWN,CAACD,UAAD,EAAaF,WAAb,EAA0BC,WAA1B,CAXM,CAAT;AAaA,SAAOH,WAAP;AACD,CApBD;;AAsBA,eAAeD,gBAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport useTombFinance from './../useTombFinance';\nimport useRefresh from '../useRefresh';\n\nconst useWithdrawCheck = () => {\n  const [canWithdraw, setCanWithdraw] = useState(false);\n  const tombFinance = useTombFinance();\n  const { slowRefresh } = useRefresh();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  useEffect(() => {\n    async function canUserWithdraw() {\n      try {\n        setCanWithdraw(await tombFinance.canUserUnstakeFromMasonry());\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    if (isUnlocked) {\n      canUserWithdraw();\n    }\n  }, [isUnlocked, tombFinance, slowRefresh]);\n\n  return canWithdraw;\n};\n\nexport default useWithdrawCheck;\n"]},"metadata":{},"sourceType":"module"}