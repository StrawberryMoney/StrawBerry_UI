{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ali_9\\\\Desktop\\\\StrawBerry_UI\\\\src\\\\views\\\\Masonry\\\\components\\\\Harvest.tsx\";\nimport React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport { Box, Button, Card, CardContent, Typography } from '@material-ui/core';\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport Label from '../../../components/Label';\nimport Value from '../../../components/Value';\nimport CardIcon from '../../../components/CardIcon';\nimport useClaimRewardTimerMasonry from '../../../hooks/masonry/useClaimRewardTimerMasonry';\nimport useClaimRewardCheck from '../../../hooks/masonry/useClaimRewardCheck';\nimport ProgressCountdown from './../components/ProgressCountdown';\nimport useHarvestFromMasonry from '../../../hooks/useHarvestFromMasonry';\nimport useEarningsOnMasonry from '../../../hooks/useEarningsOnMasonry';\nimport useTombStats from '../../../hooks/useTombStats';\nimport { getDisplayBalance } from '../../../utils/formatBalance';\n\nconst Harvest = () => {\n  const tombStats = useTombStats();\n  const {\n    onReward\n  } = useHarvestFromMasonry();\n  const earnings = useEarningsOnMasonry();\n  const canClaimReward = useClaimRewardCheck();\n  const tokenPriceInDollars = useMemo(() => tombStats ? Number(tombStats.priceInDollars).toFixed(2) : null, [tombStats]);\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\n  const {\n    from,\n    to\n  } = useClaimRewardTimerMasonry();\n  return /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(StyledCardContentInner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(StyledCardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(TokenSymbol, {\n    symbol: \"BERRY\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Value, {\n    value: getDisplayBalance(earnings),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    text: `â‰ˆ $${earnedInDollars}`,\n    color: \"#000\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    text: \"BERRY Earned\",\n    color: \"#000\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 8\n    }\n  })), /*#__PURE__*/React.createElement(StyledCardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: onReward,\n    color: \"primary\",\n    variant: \"contained\",\n    disabled: earnings.eq(0) || !canClaimReward,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 8\n    }\n  }, \"Claim Reward\"))))), /*#__PURE__*/React.createElement(Box, {\n    mt: 2,\n    style: {\n      color: '#FFF'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 4\n    }\n  }, canClaimReward ? '' : /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 8\n    }\n  }, \"Claim possible in\"), /*#__PURE__*/React.createElement(ProgressCountdown, {\n    hideBar: true,\n    base: from,\n    deadline: to,\n    description: \"Claim available in\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 8\n    }\n  })))));\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: ${props => props.theme.spacing[6]}px;\n  width: 100%;\n`;\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\nexport default Harvest;","map":{"version":3,"sources":["C:/Users/ali_9/Desktop/StrawBerry_UI/src/views/Masonry/components/Harvest.tsx"],"names":["React","useMemo","styled","Box","Button","Card","CardContent","Typography","TokenSymbol","Label","Value","CardIcon","useClaimRewardTimerMasonry","useClaimRewardCheck","ProgressCountdown","useHarvestFromMasonry","useEarningsOnMasonry","useTombStats","getDisplayBalance","Harvest","tombStats","onReward","earnings","canClaimReward","tokenPriceInDollars","Number","priceInDollars","toFixed","earnedInDollars","from","to","eq","color","textAlign","StyledCardHeader","div","StyledCardActions","props","theme","spacing","StyledCardContentInner"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,IAAtB,EAA4BC,WAA5B,EAAyCC,UAAzC,QAA2D,mBAA3D;AAEA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,0BAAP,MAAuC,mDAAvC;AACA,OAAOC,mBAAP,MAAgC,4CAAhC;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;AACA,OAAOC,qBAAP,MAAkC,sCAAlC;AACA,OAAOC,oBAAP,MAAiC,qCAAjC;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,SAASC,iBAAT,QAAkC,8BAAlC;;AAEA,MAAMC,OAAiB,GAAG,MAAM;AAC/B,QAAMC,SAAS,GAAGH,YAAY,EAA9B;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAeN,qBAAqB,EAA1C;AACA,QAAMO,QAAQ,GAAGN,oBAAoB,EAArC;AACA,QAAMO,cAAc,GAAGV,mBAAmB,EAA1C;AAEA,QAAMW,mBAAmB,GAAGvB,OAAO,CAClC,MAAOmB,SAAS,GAAGK,MAAM,CAACL,SAAS,CAACM,cAAX,CAAN,CAAiCC,OAAjC,CAAyC,CAAzC,CAAH,GAAiD,IAD/B,EAElC,CAACP,SAAD,CAFkC,CAAnC;AAKA,QAAMQ,eAAe,GAAG,CAACH,MAAM,CAACD,mBAAD,CAAN,GAA8BC,MAAM,CAACP,iBAAiB,CAACI,QAAD,CAAlB,CAArC,EAAoEK,OAApE,CAA4E,CAA5E,CAAxB;AAEA,QAAM;AAAEE,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAelB,0BAA0B,EAA/C;AAEA,sBACC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,WAAD;AAAa,IAAA,MAAM,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD,eAIC,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEM,iBAAiB,CAACI,QAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJD,eAKC,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAG,MAAKM,eAAgB,EAAnC;AAAsC,IAAA,KAAK,EAAC,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALD,eAMC,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,cAAZ;AAA2B,IAAA,KAAK,EAAC,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAND,CADD,eASC,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,MAAD;AACC,IAAA,OAAO,EAAEP,QADV;AAEC,IAAA,KAAK,EAAC,SAFP;AAGC,IAAA,OAAO,EAAC,WAHT;AAIC,IAAA,QAAQ,EAAEC,QAAQ,CAACS,EAAT,CAAY,CAAZ,KAAkB,CAACR,cAJ9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,CATD,CADD,CADD,CADD,eAyBC,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAY,IAAA,KAAK,EAAE;AAAES,MAAAA,KAAK,EAAE;AAAT,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACET,cAAc,GACd,EADc,gBAGd,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAE;AAAEU,MAAAA,SAAS,EAAE;AAAb,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADD,eAEC,oBAAC,iBAAD;AAAmB,IAAA,OAAO,EAAE,IAA5B;AAAkC,IAAA,IAAI,EAAEJ,IAAxC;AAA8C,IAAA,QAAQ,EAAEC,EAAxD;AAA4D,IAAA,WAAW,EAAC,oBAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,CADD,CAJF,CAzBD,CADD;AAwCA,CAvDD;;AAyDA,MAAMI,gBAAgB,GAAGhC,MAAM,CAACiC,GAAI;AACpC;AACA;AACA;AACA,CAJA;AAKA,MAAMC,iBAAiB,GAAGlC,MAAM,CAACiC,GAAI;AACrC;AACA;AACA,gBAAiBE,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoB,CAApB,CAAuB;AAClD;AACA,CALA;AAOA,MAAMC,sBAAsB,GAAGtC,MAAM,CAACiC,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA,CANA;AAQA,eAAehB,OAAf","sourcesContent":["import React, { useMemo } from 'react';\nimport styled from 'styled-components';\n\nimport { Box, Button, Card, CardContent, Typography } from '@material-ui/core';\n\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport Label from '../../../components/Label';\nimport Value from '../../../components/Value';\nimport CardIcon from '../../../components/CardIcon';\nimport useClaimRewardTimerMasonry from '../../../hooks/masonry/useClaimRewardTimerMasonry';\nimport useClaimRewardCheck from '../../../hooks/masonry/useClaimRewardCheck';\nimport ProgressCountdown from './../components/ProgressCountdown';\nimport useHarvestFromMasonry from '../../../hooks/useHarvestFromMasonry';\nimport useEarningsOnMasonry from '../../../hooks/useEarningsOnMasonry';\nimport useTombStats from '../../../hooks/useTombStats';\nimport { getDisplayBalance } from '../../../utils/formatBalance';\n\nconst Harvest: React.FC = () => {\n\tconst tombStats = useTombStats();\n\tconst { onReward } = useHarvestFromMasonry();\n\tconst earnings = useEarningsOnMasonry();\n\tconst canClaimReward = useClaimRewardCheck();\n\n\tconst tokenPriceInDollars = useMemo(\n\t\t() => (tombStats ? Number(tombStats.priceInDollars).toFixed(2) : null),\n\t\t[tombStats],\n\t);\n\n\tconst earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\n\n\tconst { from, to } = useClaimRewardTimerMasonry();\n\n\treturn (\n\t\t<Box>\n\t\t\t<Card>\n\t\t\t\t<CardContent>\n\t\t\t\t\t<StyledCardContentInner>\n\t\t\t\t\t\t<StyledCardHeader>\n\t\t\t\t\t\t\t<CardIcon>\n\t\t\t\t\t\t\t\t<TokenSymbol symbol=\"BERRY\" />\n\t\t\t\t\t\t\t</CardIcon>\n\t\t\t\t\t\t\t<Value value={getDisplayBalance(earnings)} />\n\t\t\t\t\t\t\t<Label text={`â‰ˆ $${earnedInDollars}`} color=\"#000\" />\n\t\t\t\t\t\t\t<Label text=\"BERRY Earned\" color=\"#000\" />\n\t\t\t\t\t\t</StyledCardHeader>\n\t\t\t\t\t\t<StyledCardActions>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={onReward}\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tdisabled={earnings.eq(0) || !canClaimReward}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tClaim Reward\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</StyledCardActions>\n\t\t\t\t\t</StyledCardContentInner>\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t\t<Box mt={2} style={{ color: '#FFF' }}>\n\t\t\t\t{canClaimReward ? (\n\t\t\t\t\t''\n\t\t\t\t) : (\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t<Typography style={{ textAlign: 'center' }}>Claim possible in</Typography>\n\t\t\t\t\t\t\t<ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Claim available in\" />\n\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t</Card>\n\t\t\t\t)}\n\t\t\t</Box>\n\t\t</Box>\n\t);\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: ${(props) => props.theme.spacing[6]}px;\n  width: 100%;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport default Harvest;\n"]},"metadata":{},"sourceType":"module"}