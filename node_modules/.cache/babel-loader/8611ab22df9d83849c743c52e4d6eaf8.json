{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport config from './../config';\n\nconst usePromptNetwork = () => {\n  const [networkPrompt, setNetworkPrompt] = useState(false);\n  const {\n    ethereum\n  } = window;\n  /**\n   * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\n   * And https://docs.metamask.io/guide/ethereum-provider.html\n   * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\n   * @returns\n   */\n\n  const connectToNetwork = async provider => {\n    await provider.request({\n      method: 'wallet_addEthereumChain',\n      params: [{\n        chainId: `0x${config.chainId.toString(16)}`,\n        chainName: config.networkName,\n        nativeCurrency: {\n          name: 'AVAX',\n          symbol: 'avax',\n          decimals: 18\n        },\n        rpcUrls: [config.defaultProvider],\n        blockExplorerUrls: [config.avaxscanUrl]\n      }]\n    });\n  };\n\n  useEffect(() => {\n    if (!networkPrompt) {\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\n        connectToNetwork(ethereum);\n        setNetworkPrompt(true);\n      }\n    }\n  }, [networkPrompt, ethereum]);\n};\n\nexport default usePromptNetwork;","map":{"version":3,"sources":["C:/Users/ali_9/Desktop/StrawBerry_UI/src/hooks/useNetworkPrompt.ts"],"names":["useEffect","useState","config","usePromptNetwork","networkPrompt","setNetworkPrompt","ethereum","window","connectToNetwork","provider","request","method","params","chainId","toString","chainName","networkName","nativeCurrency","name","symbol","decimals","rpcUrls","defaultProvider","blockExplorerUrls","avaxscanUrl","networkVersion"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAeC,MAArB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,QAAMC,gBAAgB,GAAG,MAAOC,QAAP,IAAyB;AAChD,UAAMA,QAAQ,CAACC,OAAT,CAAiB;AACrBC,MAAAA,MAAM,EAAE,yBADa;AAErBC,MAAAA,MAAM,EAAE,CACN;AACEC,QAAAA,OAAO,EAAG,KAAIX,MAAM,CAACW,OAAP,CAAeC,QAAf,CAAwB,EAAxB,CAA4B,EAD5C;AAEEC,QAAAA,SAAS,EAAEb,MAAM,CAACc,WAFpB;AAGEC,QAAAA,cAAc,EAAE;AACdC,UAAAA,IAAI,EAAE,MADQ;AAEdC,UAAAA,MAAM,EAAE,MAFM;AAGdC,UAAAA,QAAQ,EAAE;AAHI,SAHlB;AAQEC,QAAAA,OAAO,EAAE,CAACnB,MAAM,CAACoB,eAAR,CARX;AASEC,QAAAA,iBAAiB,EAAE,CAACrB,MAAM,CAACsB,WAAR;AATrB,OADM;AAFa,KAAjB,CAAN;AAgBD,GAjBD;;AAkBAxB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACI,aAAL,EAAoB;AAClB,UAAIE,QAAQ,IAAIA,QAAQ,CAACmB,cAAT,KAA4BvB,MAAM,CAACW,OAAP,CAAeC,QAAf,EAA5C,EAAuE;AACrEN,QAAAA,gBAAgB,CAACF,QAAD,CAAhB;AACAD,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;AACF;AACF,GAPQ,EAON,CAACD,aAAD,EAAgBE,QAAhB,CAPM,CAAT;AAQD,CApCD;;AAsCA,eAAeH,gBAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport config from './../config';\n\nconst usePromptNetwork = () => {\n  const [networkPrompt, setNetworkPrompt] = useState(false);\n  const { ethereum } = window as any;\n\n  /**\n   * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\n   * And https://docs.metamask.io/guide/ethereum-provider.html\n   * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\n   * @returns\n   */\n  const connectToNetwork = async (provider: any) => {\n    await provider.request({\n      method: 'wallet_addEthereumChain',\n      params: [\n        {\n          chainId: `0x${config.chainId.toString(16)}`,\n          chainName: config.networkName,\n          nativeCurrency: {\n            name: 'AVAX',\n            symbol: 'avax',\n            decimals: 18,\n          },\n          rpcUrls: [config.defaultProvider],\n          blockExplorerUrls: [config.avaxscanUrl],\n        },\n      ],\n    });\n  };\n  useEffect(() => {\n    if (!networkPrompt) {\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\n        connectToNetwork(ethereum);\n        setNetworkPrompt(true);\n      }\n    }\n  }, [networkPrompt, ethereum]);\n};\n\nexport default usePromptNetwork;\n"]},"metadata":{},"sourceType":"module"}